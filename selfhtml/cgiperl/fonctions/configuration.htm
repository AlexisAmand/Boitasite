<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / Fonctions Perl  /  Fonctions pour les informations tir&eacute;es des fichiers de configuration</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Quelles sont les fonctions en Perl pour rechercher des donn&eacute;es dans les fichiers de configuration de l'ordinateur.">
<meta name="keywords"       content="SELFHTML, Perl, fonctions, fonctions Perl, fichiers de configuration, endgrent, endhostent, endnetend, endprotoent, endpwent, endservent, getgrent, getgrgid, getgrnam, gethostbyaddr, gethostbyname, gethostent, getlogin, getnetbyaddr, getnetbyname, getnetent, getprotobyname, getprotobynumber, getprotoent, getpwent, getpwnam, getpwuid, getservbyname, getservbyport, getservent, setgrent, sethostent, setnetent, setprotoent, setpwent, setservent">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/fonctions/configuration.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // Fonctions Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2> Fonctions pour les informations tir&eacute;es des fichiers de configuration</h2></td>
</tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#generalites"><b>G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endgrent"><b>endgrent</b></a> - sauter &agrave; la fin de <var>/etc/groups</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endhostent"><b>endhostent</b></a> - sauter &agrave; la fin de <var>/etc/hosts</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endnetend"><b>endnetend</b></a> - sauter &agrave; la fin de <var>/etc/networks</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endprotoent"><b>endprotoent</b></a> - sauter &agrave; la fin de <var>/etc/protocols</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endpwent"><b>endpwent</b></a> - sauter &agrave; la fin de <var>/etc/passwd</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endservent"><b>endservent</b></a> - sauter &agrave; la fin de <var>/etc/services</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrent"><b>getgrent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/groups</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrgid"><b>getgrgid</b></a> - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro de groupe d&eacute;termin&eacute; dans <var>/etc/groups</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrnam"><b>getgrnam</b></a> - rechercher un &eacute;l&eacute;ment avec un nom de groupe d&eacute;termin&eacute; dans <var>/etc/groups</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostbyaddr"><b>gethostbyaddr</b></a> -rechercher un &eacute;l&eacute;ment avec une IP d&eacute;termin&eacute;e dans  <var>/etc/hosts</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostbyname"><b>gethostbyname</b></a> - rechercher un &eacute;l&eacute;ment avec un nom d'h&ocirc;te d&eacute;termin&eacute; dans  <var>/etc/hosts</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostent"><b>gethostent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/hosts</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getlogin"><b>getlogin</b></a> - rechercher le nom de l'utilisateur actuel<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetbyaddr"><b>getnetbyaddr</b></a> - rechercher un &eacute;l&eacute;ment avec une IP d&eacute;termin&eacute;e dans <var>/etc/networks</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetbyname"><b>getnetbyname</b></a> - rechercher un &eacute;l&eacute;ment avec un nom de r&eacute;seau d&eacute;termin&eacute; dans <var>/etc/networks</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetent"><b>getnetent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/networks</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotobyname"><b>getprotobyname</b></a> - rechercher un &eacute;l&eacute;ment avec un nom de protocole d&eacute;termin&eacute; dans  <var>/etc/protocols</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotobynumber"><b>getprotobynumber</b></a> - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro de protocole d&eacute;termin&eacute; dans  <var>/etc/protocols</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotoent"><b>getprotoent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/protocols</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwent"><b>getpwent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/passwd</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwnam"><b>getpwnam</b></a> - rechercher un &eacute;l&eacute;ment avec un nom d'utilisateur d&eacute;termin&eacute; dans  <var>/etc/passwd</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwuid"><b>getpwuid</b></a> - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro d'utilisateur d&eacute;termin&eacute; dans  <var>/etc/passwd</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservbyname"><b>getservbyname</b></a> - rechercher un &eacute;l&eacute;ment avec un nom de port d&eacute;termin&eacute; dans <var>/etc/services</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservbyport"><b>getservbyport</b></a> - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro de port d&eacute;termin&eacute; dans <var>/etc/services</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservent"><b>getservent</b></a> - rechercher l'&eacute;l&eacute;ment suivant dans <var>/etc/services</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setgrent"><b>setgrent</b></a> - sauter au d&eacute;but de <var>/etc/groups</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#sethostent"><b>sethostent</b></a> - sauter au d&eacute;but de <var>/etc/hosts</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setnetent"><b>setnetent</b></a> - sauter au d&eacute;but de <var>/etc/networks</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setprotoent"><b>setprotoent</b></a> - sauter au d&eacute;but de <var>/etc/protocols</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setpwent"><b>setpwent</b></a> - sauter au d&eacute;but de <var>/etc/passwd</var><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setservent"><b>setservent</b></a> -sauter au d&eacute;but de <var>/etc/services</var><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>





<h2 class="Sh2"><a class="an" name="generalites"> G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</a></h2>

<p>Les fonctions rassembl&eacute;es ici servent &agrave; rechercher des &eacute;l&eacute;ments dans les fichiers de configuration syst&egrave;me. Il s'agit ici exclusivement de donn&eacute;es de configuration de syst&egrave;mes Unix. L'avantage des fonctions d&eacute;crites ici par rapport &agrave; la lecture directe de ces fichiers est qu'elles sont ind&eacute;pendantes de l'ordinateur, c'est &agrave; dire que les commandes fonctionnent &eacute;galement quand un syst&egrave;me Unix est configur&eacute; autrement que la normale et que les fichiers correspondants sont plac&eacute;s ailleurs.</p>

<p>Les fichiers de configuration importants sont pr&eacute;sent&eacute;s bri&egrave;vement ci-apr&egrave;s. Les noms de chemin correspondent &agrave; l'emplacement habituel.</p>

<h3 class="inf"><a name="group">Fichier de configuration: <var>/etc/group</var></a></h3>

<p>Dans ce fichier sont sauvegard&eacute;s les groupes d'habilitation et leurs membres. Un groupe d'habilitation peut poss&eacute;der certains droits sur des fichiers et r&eacute;pertoires qui appartiennent &agrave; l'un des ses membres. Outre les enregistrements pour les groupes d'habilitation &quot;humains&quot;, le fichier en contient &eacute;galement certains pour des groupes d'habilitation r&eacute;serv&eacute;s, sp&eacute;cifiques &agrave; l'ordinateur comme par exemple <code>mail</code>, <code>bin</code> ou bien <code>tty</code>. Les mots de passe dans ce fichier ne sont sauvegard&eacute;s que sous leur formes crypt&eacute;e.<br>
Donn&eacute;es typiques (Exemple):<br>
<code>root&nbsp;&nbsp;x&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;root</code><br>
<code>bin&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;root bin daemon</code><br>
<code>sys&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;101&nbsp;&nbsp;root bin sys</code><br>
Chacune des lignes de ce fichier contient le nom d'un groupe d'habilitation suivi de son mot de passe (crypt&eacute;), puis du num&eacute;ro de groupe (GID) suivie elle m&ecirc;me de la liste des membres du groupe.<br>
Les fonctions relatives &agrave; ce fichier sont <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endgrent"><b>endgrent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrent"><b>getgrent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrgid"><b>getgrgid</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrnam"><b>getgrnam</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setgrent"><b>setgrent</b></a><br>
Dans l'exemple sur la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrent"><b>getgrent</b></a>, il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/groups</var>. Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>


<h3 class="inf"><a name="hosts">Fichier de configuration: <var>/etc/hosts</var></a></h3>

<p>Dans ce fichier se trouvent les affectations d'adresses IP et de noms de domaine ou noms d'ordinateur que l'ordinateur doit r&eacute;soudre lui-m&ecirc;me.<br>
Donn&eacute;es typiques  (Exemple):<br>
<code>127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localhost</code><br>
<code>192.168.10.101&nbsp;&nbsp;soleil.galaxie.fr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;soleil</code><br>
<code>192.168.85.1&nbsp;&nbsp;&nbsp;&nbsp;jupiter.edu.rennes.fr&nbsp;&nbsp;&nbsp;minerve</code><br>
Chaque ligne du fichier contient une adresse IP suivie du nom de domaine officiel, suivi lui-m&ecirc;me au choix du nom interne de l'ordinateur, respectivement s&eacute;par&eacute;s par des espaces ou des tabulations. Derri&egrave;re le nom interne de l'ordinateur peut encore suivre aussi un nom d'alias.<br>
Les fonctions relatives &agrave; ce fichier sont <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endhostent"><b>endhostent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostbyaddr"><b>gethostbyaddr</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostbyname"><b>gethostbyname</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostent"><b>gethostent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#sethostent"><b>sethostent</b></a><br>
Dans l'exemple sur la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostent"><b>gethostent</b></a> il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/hosts</var> Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>




<h3 class="inf"><a name="networks">Fichier de configuration: <var>/etc/networks</var></a></h3>

<p>Dans ce fichier sont associ&eacute;s des noms de r&eacute;seau et l'adresse IP qui leur est propre. Ici sont aussi souvent mentionn&eacute;s le type d'adresse et le num&eacute;ro du r&eacute;seau.<br>
Donn&eacute;es typiques  (Exemple):<br>
<code>loopback&nbsp;&nbsp;127.0.0.0&nbsp;&nbsp;2&nbsp;&nbsp;2130706432</code><br>
Chaque ligne du fichier contient un nom de r&eacute;seau, l'adresse IP du r&eacute;seau qui lui est associ&eacute;e, le type d'adresse et le num&eacute;ro de r&eacute;seau.<br>
Les fonctions relatives &agrave; ce fichier sont <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endnetend"><b>endnetent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetbyaddr"><b>getnetbyaddr</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetbyname"><b>getnetbyname</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetent"><b>getnetent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setnetent"><b>setnetent</b></a><br>
Dans l'exemple sur la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetent"><b>getnetent</b></a> il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/networks</var> Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>



<h3 class="inf"><a name="passwd">Fichier de configuration: <var>/etc/passwd</var></a></h3>

<p>Dans ce fichier sont sauvegard&eacute;es toutes les donn&eacute;es importantes de tous les utilisateurs ayant acc&egrave;s &agrave; l'ordinateur. En font partie par exemple les noms d'utilisateur, leur mot de passe, les num&eacute;ros d'utilisateur (UIDs) et les r&eacute;pertoires de domiciliation des utilisateurs. Outre les &eacute;l&eacute;ments pour les utilisateurs normaux, le fichiers contient aussi ceux pour les utilisateurs r&eacute;serv&eacute;s comme par exemple <code>root</code> (sur certains ordinateurs aussi  <code>ruth</code>), <code>daemon</code> ou <code>ftp</code> (pour l'acc&egrave;s FTP anonyme). Les mots de passe ne sont sauvegard&eacute; que sous forme crypt&eacute;e dans ce fichier.<br>
Donn&eacute;es typiques  (Exemple):<br>
<code>root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
<code>bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
<code>customer&nbsp;&nbsp;x&nbsp;&nbsp;29&nbsp;&nbsp;29&nbsp;&nbsp;client&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/lib/client&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin/mysh</code><br>
Chaque ligne du fichier contient le nom d'utilisateur, le mot de passe qui lui est associ&eacute; (sous forme crypt&eacute;e), son num&eacute;ro d'utilisateur (UID), le num&eacute;ro de son groupe d'utilisation (GID), des mentions descriptives sur l'utilisateur, son r&eacute;pertoire de domiciliation sur l'ordinateur, sa console  (instance de l'interpr&eacute;teur de commande), et le cas &eacute;ch&eacute;ant des mentions sur la date de p&eacute;remption de son inscription.<br>
Les fonctions relatives &agrave; ce fichier sont <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endpwent"><b>endpwent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwent"><b>getpwent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwnam"><b>getpwnam</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwuid"><b>getpwuid</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setpwent"><b>setpwent</b></a><br>
Dans l'exemple sur la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwent"><b>getpwent</b></a> il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/passwd</var> Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>




<h3 class="inf"><a name="protocols">Fichier de configuration: <var>/etc/protocols</var></a></h3>

<p>Dans ce fichier sont enregistr&eacute;s les noms de protocole et num&eacute;ros de protocole des protocoles de transmission soutenus par le syst&egrave;me.<br>
Donn&eacute;es typiques  (Exemple):<br>
<code>ip&nbsp;&nbsp;&nbsp;&nbsp;IP&nbsp;&nbsp;&nbsp;&nbsp;0</code><br>
<code>icmp&nbsp;&nbsp;ICMP&nbsp;&nbsp;1</code><br>
<code>igmp&nbsp;&nbsp;IGMP&nbsp;&nbsp;2</code><br>
<code>ggp&nbsp;&nbsp;&nbsp;GGP&nbsp;&nbsp;&nbsp;3</code><br>
<code>tcp&nbsp;&nbsp;&nbsp;TCP&nbsp;&nbsp;&nbsp;6</code><br>
Chaque ligne du fichier contient le nom du protocole de transmission, le num&eacute;ro du protocole et le nom d'alias du protocole.<br>
Les fonctions relatives &agrave; ce fichier sont <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endprotoent"><b>endprotoent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotobyname"><b>getprotobyname</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotobynumber"><b>getprotobynumber</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotoent"><b>getprotoent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setprotoent"><b>setprotoent</b></a><br>
Dans l'exemple sur la fonction  <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotoent"><b>getprotoent</b></a> il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/protocols</var> Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>



<h3 class="inf"><a name="services">Fichier de configuration: <var>/etc/services</var></a></h3>

<p>Dans ce fichier sont sauvegard&eacute;s les noms de services du r&eacute;seau ainsi que les num&eacute;ros de port et les noms de protocole qui leur sont associ&eacute;s.<br>
Donn&eacute;es typiques  (Exemple):<br>
<code>ftp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;tcp</code><br>
<code>telnet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;tcp</code><br>
<code>smtp&nbsp;&nbsp;mail&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;tcp</code><br>
<code>whois&nbsp;&nbsp;nicname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;tcp</code><br>
<code>domain&nbsp;&nbsp;nameserver&nbsp;&nbsp;53&nbsp;&nbsp;tcp</code><br>
<code>gopher&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;70&nbsp;&nbsp;tcp</code><br>
<code>finger&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;79&nbsp;&nbsp;tcp</code><br>
<code>www&nbsp;&nbsp;http&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;tcp</code><br>
<code>www&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;udp</code><br>
Les fonctions relatives &agrave; ce fichier sont  <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#endservent"><b>endservent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservbyname"><b>getservbyname</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservbyport"><b>getservbyport</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservent"><b>getservent</b></a>&nbsp;<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#setservent"><b>setservent</b></a><br>
Dans l'exemple sur la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservent"><b>getservent</b></a> il est montr&eacute; comment vous pouvez sortir l'int&eacute;gralit&eacute; du fichier <var>/etc/services</var> Ce qui vous permet d'avoir une vue d'ensemble compl&egrave;te sur le contenu du fichier.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endgrent">endgrent - sauter &agrave; la fin de  <var>/etc/groups</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#group"><b>/etc/group</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getgrent();
print &quot;$valeur\n&quot;;
endgrent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/groups</var> avec  <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getgrent"><b>getgrent</b></a> sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endhostent">endhostent - sauter &agrave; la fin de  <var>/etc/hosts</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#hosts"><b>/etc/hosts</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = gethostent();
print &quot;$valeur\n&quot;;
endhostent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/hosts</var> avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#gethostent"><b>gethostent</b></a> sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endnetend">endnetend - sauter &agrave; la fin de  <var>/etc/networks</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#networks"><b>/etc/networks</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getnetent();
print &quot;$valeur\n&quot;;
endnetent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/networks</var> avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getnetent"><b>getnetent</b></a>  sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endprotoent">endprotoent - sauter &agrave; la fin de  <var>/etc/protocols</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#protocols"><b>/etc/protocols</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getprotoent();
print &quot;$valeur\n&quot;;
endprotent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/protocols</var> avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getprotoent"><b>getprotoent</b></a> sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endpwent">endpwent - sauter &agrave; la fin de  <var>/etc/passwd</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#passwd"><b>/etc/passwd</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getnetent();
print &quot;$valeur\n&quot;;
endnetent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/passwd</var> avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getpwent"><b>getpwent</b></a> sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="endservent">endservent - sauter &agrave; la fin de  <var>/etc/services</var></a></h2>

<p>Saute &agrave; la fin du fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#services"><b>/etc/services</b></a> et termine l'acc&egrave;s &agrave; ce fichier.</p>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getservent();
print &quot;$valeur\n&quot;;
endservent();
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le premier &eacute;l&eacute;ment de <var>/etc/services</var> avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#getservent"><b>getnetent</b></a> sort la valeur trouv&eacute;e et saute &agrave; la fin du fichier.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getgrent">getgrent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/groups</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#group"><b>/etc/group</b></a> ou dans un contexte de liste, une liste avec quatre &eacute;l&eacute;ments.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getgrent();
while(@Liste) {
  print &quot;$Liste[0]]  $Liste[1]  $Liste[2]  $Liste[3]\n&quot;;
  @Liste = getgrent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier <var>/etc/groups</var> avec un script CGI. Tout d'abord  <code>getgrent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste <code>@Liste</code>. Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> - les quatre &eacute;l&eacute;ments de la liste sont sortis, et <code>getgrent</code> est appel&eacute; pour la prochaine boucle. Les quatre &eacute;l&eacute;ments de la liste retourn&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = Nom du groupe d'habilitation,<br>
<code>$Liste[1]</code> = Mot de passe du groupe d'habilitation (sous forme crypt&eacute;e),<br>
<code>$Liste[2]</code> = Num&eacute;ro du groupe d'habilitation (GID),<br>
<code>$Liste[3]</code> = Noms des membres du groupe d'habilitation</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getgrgid">getgrgid - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro de groupe d&eacute;termin&eacute; dans  <var>/etc/groups</var></a></h2>

<p>Recherche l'&eacute;l&eacute;ment correspondant &agrave; un certain num&eacute;ro de groupe (GID) dans <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#group"><b>/etc/group</b></a>. En contexte scalaire, le nom de groupe correspondant est recherch&eacute;, en contexte de liste, tout l'enregistrement correspondant au GID.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le GID souhait&eacute;.</p>

<p>Renvoie selon le contexte, soit le nom de groupe, soit la liste. Si le GID mentionn&eacute; n'a pas &eacute;t&eacute; trouv&eacute;, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

($nom,$mot_passe,$Gid,$membre) = getgrgid(2);
print &quot;&lt;h3&gt;Contexte de liste:&lt;/h3&gt;&quot;;
print &quot;&lt;pre&gt;$nom\n$GrPasswort\n$Gid\n$membre&lt;/pre&gt;&quot;;

print &quot;&lt;h3&gt;Contexte scalaire:&lt;/h3&gt;&lt;pre&gt;&quot;;
my $valeur = getgrgid(2);
print &quot;&lt;pre&gt;$valeur&lt;/pre&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple appelle deux fois en tout la fonction <code>getgrgid</code> d'abord en contexte de liste, et plus tard en contexte scalaire. Dans les deux cas, <code>2</code> est transmis comme num&eacute;ro de groupe recherch&eacute; (GID). En contexte de liste l'&eacute;l&eacute;ment trouv&eacute; complet se composant du nom de groupe, du mot de passe du groupe (crypt&eacute;), du num&eacute;ro de groupe et du nom de membre est envoy&eacute; au navigateur pour &ecirc;tre sorti. En contexte scalaire, seul le nom de groupe correspondant au num&eacute;ro de groupe est sorti.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getgrnam">getgrnam - rechercher un &eacute;l&eacute;ment avec un nom de groupe d&eacute;termin&eacute; dans  <var>/etc/groups</var></a></h2>

<p>Recherche l'&eacute;l&eacute;ment correspondant &agrave; un certain num&eacute;ro de groupe dans <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#group"><b>/etc/group</b></a>. En contexte scalaire, le num&eacute;ro de groupe (GID) correspondant au nom mentionn&eacute; est recherch&eacute;, en contexte de liste, tout l'enregistrement correspondant au nom de groupe.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom de groupe d&eacute;sir&eacute;.</p>

<p>Renvoie selon le contexte, soit le num&eacute;ro de groupe (GID), soit la liste. Si le nom de groupe mentionn&eacute; n'a pas &eacute;t&eacute; trouv&eacute; <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

(my $nom, my $mot_passe, my $Gid, my $membre) = getgrnam(&quot;mail&quot;);
print &quot;&lt;h3&gt;Contexte de liste:&lt;/h3&gt;&quot;;
print &quot;&lt;pre&gt;$nom\n$mot_passe\n$Gid\n$membre&lt;/pre&gt;&quot;;

print &quot;&lt;h3&gt;Contexte scalaire:&lt;/h3&gt;&quot;;
my $valeur = getgrnam(&quot;mail&quot;);
print &quot;&lt;pre&gt;$valeur&lt;/pre&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple appelle deux fois en tout la fonction  <code>getgrgid</code>, d'abord en contexte de liste, et plus tard en contexte scalaire. Dans les deux cas <code>&quot;mail&quot;</code> est transmis comme nom de groupe. ). En contexte de liste l'&eacute;l&eacute;ment trouv&eacute; complet se composant du nom de groupe, du mot de passe du groupe (crypt&eacute;), du num&eacute;ro de groupe et du nom de membre est envoy&eacute; au navigateur pour &ecirc;tre sorti. En contexte scalaire, seul le num&eacute;ro de groupe (GID) correspondant au nom de groupe  est sorti.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="gethostbyaddr">gethostbyaddr - -rechercher un &eacute;l&eacute;ment avec une IP d&eacute;termin&eacute;e dans  <var>/etc/hosts</var></a></h2>

<p>Recherche le nom d'h&ocirc;te correspondant &agrave; une adresse IP d&eacute;termin&eacute;e dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#hosts"><b>/etc/hosts</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> l'adresse IP d&eacute;sir&eacute;e et cela sous forme num&eacute;rique exprim&eacute;e en binaire.<br>
<b>2.</b> le type d'adresse IP (num&eacute;rique).</p>

<p>Renvoie le nom d'h&ocirc;te correspondant. Si l'adresse IP mentionn&eacute;e n'a pas &eacute;t&eacute; trouv&eacute;e, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

use Socket;
my $addr = inet_aton(&quot;127.0.0.1&quot;);
my $valeur  = gethostbyaddr($addr, AF_INET);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez rechercher le nom d'h&ocirc;te d'une adresse IP sur l'ordinateur. Pour assurer la passation quelque peu compliqu&eacute;e des param&egrave;tres de la fonction <code>gethostbyaddr</code>, le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm"><b>module standard</b></a> <code>Socket</code> est utilis&eacute;. Par l'appel de la fonction de module <code>inet_aton</code> une adresse IP transmise sous la forme d'&eacute;criture normale est transform&eacute;e dans la forme d'&eacute;criture binaire indispensable. Le r&eacute;sultat est sauvegard&eacute; dans la scalaire <code>$addr</code>. Le module <code>Socket</code> dispose aussi de constantes pour le type d'adresse. La constante pour le deuxi&egrave;me param&egrave;tre de <code>gethostbyaddr</code> est <code>AF_INET</code>. Par la transmission de <code>$addr</code> et de <code>AF_INET</code>, <code>gethostbyaddr</code> est correctement pourvu et sort le nom d'h&ocirc;te correspondant &agrave; l'adresse de l'exemple <code>127.0.0.1</code> (en principe <code>localhost</code>).</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="gethostbyname">gethostbyname - - rechercher un &eacute;l&eacute;ment avec un nom d'h&ocirc;te d&eacute;termin&eacute; dans  <var>/etc/hosts</var></a></h2>

<p>Recherche l'adresse IP  correspondant au nom d'h&ocirc;te d&eacute;termin&eacute;  dans le fichier  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#hosts"><b>/etc/hosts</b></a> .</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom d'h&ocirc;te d&eacute;termin&eacute; d&eacute;sir&eacute;.</p>

<p>Renvoie l'adresse IP correspondante, &agrave; vrai dire sous forme num&eacute;rique exprim&eacute;e en binaire.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

use Socket;
my $addr  = gethostbyname(&quot;localhost&quot;);
my $valeur = inet_ntoa($addr);
print &quot;$valeur&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez rechercher l'adresse IP  d'un nom d'h&ocirc;te sur l'ordinateur. Pour ce faire, le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm"><b>module Standard</b></a> <code>Socket</code> est employ&eacute;. Il permet de convertir commod&eacute;ment sous sa forme courante la valeur num&eacute;rique binaire de la valeur renvoy&eacute;e par <code>gethostbyname</code>, qui dans l'exemple est sauvegard&eacute;e dans la scalaire <code>$addr</code>. Par l'appel de la fonction de module <code>inet_ntoa</code>, <code>$addr</code> est transform&eacute; dans sa forme d'&eacute;criture habituelle. Le r&eacute;sultat de la conversion est sauvegard&eacute; dans l'exemple dans la scalaire <code>$valeur</code>. Ensuite, l'adresse IP  du nom d'h&ocirc;te <code>localhost</code> est sortie (en principe <code>127.0.0.1</code>).</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="gethostent">gethostent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/hosts</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#hosts"><b>/etc/hosts</b></a> ou dans un contexte de liste, une liste avec cinq &eacute;l&eacute;ments et plus.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = gethostent();
while(@Liste) {
  print &quot;$Liste[0]   $Liste[1]   $Liste[2]&quot;;
  for(my $i = 0; $i &lt; $Liste[3]; $i++) {
    (my $a, my $b, my $c, my $d) = unpack('C4',$Liste[4+$i]);
    print &quot;  $a.$b.$c.$d&quot;;
  }
  print &quot;\n&quot;;
  @Liste = gethostent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier  <var>/etc/hosts</var> avec un script CGI. Tout d'abord <code>gethostent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste <code>@Liste</code>. Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> - les &eacute;l&eacute;ments de la liste sont sortis et <code>gethostent</code> est appel&eacute; pour la prochaine boucle. La liste contient comme dernier &eacute;l&eacute;ment de liste &agrave; son tour une liste, de sorte qu'une autre <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#for"><b>boucle for</b></a> int&eacute;rieure est n&eacute;cessaire pour rechercher tous les &eacute;l&eacute;ments.
Les &eacute;l&eacute;ments de la liste renvoy&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = nom d'h&ocirc;te,<br>
<code>$Liste[1]</code> = nom d'alias du nom d'h&ocirc;te,<br>
<code>$Liste[2]</code> = type d'adresse,<br>
<code>$Liste[3]</code> = nombre d'&eacute;l&eacute;ments de la liste restant &agrave; venir<br>
<code>$Liste[4]</code> et autres  = adresses IP attribu&eacute;es<br>
Les adresses IP attribu&eacute;es sont sauvegard&eacute;es en binaire. Pour obtenir la repr&eacute;sentation habituelle de quatre nombres, la forme binaire d'&eacute;criture doit d'abord &ecirc;tre convertie. Ce qui est rendu possible par l'application de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="chainescaracteres.htm#unpack"><b>unpack</b></a> et de <code>C4</code> en tant que premier param&egrave;tre, comme dans l'exemple ci-dessus. De cette fa&ccedil;on, les quatre nombres distincts de l'adresse IP y sont recherch&eacute;s et sauvegard&eacute;s dans les scalaires <code>$a</code>, <code>$b</code>, <code>$c</code> et <code>$d</code>.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getlogin">getlogin - rechercher le nom de l'utilisateur actuel</a></h2>

<p><p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie l'identification de l'utilisateur actuel</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
my $valeur = getlogin();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche l'identification de l'utilisateur avec <code>getlogin</code>, la sauvegarde dans la scalaire <code>$valeur</code> et sort celle-ci pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getnetbyaddr">getnetbyaddr - rechercher un &eacute;l&eacute;ment avec une IP d&eacute;termin&eacute;e dans  <var>/etc/networks</var></a></h2>

<p>Recherche le nom de r&eacute;seau correspondant &agrave; une adresse IP d&eacute;termin&eacute;e dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#networks"><b>/etc/networks</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b>  l'adresse IP d&eacute;sir&eacute;e et cela sous forme num&eacute;rique exprim&eacute;e en binaire.<br>
<b>2.</b> le type d'adresse IP (num&eacute;rique).</p>

<p>Renvoie le nom de r&eacute;seau correspondant. Si l'adresse IP mentionn&eacute;e n'a pas &eacute;t&eacute; trouv&eacute;e. <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

use Socket;
my $addr = inet_aton(&quot;127.0.0.0&quot;);
my $valeur  = getnetbyaddr($addr, AF_INET);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez rechercher le nom de r&eacute;seau d'une adresse IP sur l'ordinateur. Pour assurer la passation quelque peu compliqu&eacute;e des param&egrave;tres de la fonction <code>getnetbyaddr</code>, le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm"><b>module standard</b></a> <code>Socket</code> est utilis&eacute;. Par l'appel de la fonction de module  <code>inet_aton</code> une adresse IP transmise sous la forme d'&eacute;criture normale est transform&eacute;e dans la forme d'&eacute;criture binaire indispensable. Le r&eacute;sultat est sauvegard&eacute; dans la scalaire  <code>$addr</code>. Le module  <code>Socket</code> dispose aussi de constantes pour le type d'adresse. La constante pour le deuxi&egrave;me param&egrave;tre de <code>gethostbyaddr</code> est <code>AF_INET</code>. Par la transmission de <code>$addr</code> et de <code>AF_INET</code>, <code>getnetbyaddr</code> est correctement pourvu et sort le nom de r&eacute;seau correspondant &agrave; l'adresse de l'exemple <code>127.0.0.0</code> (en principe <code>loopback</code>).</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getnetbyname">getnetbyname - rechercher un &eacute;l&eacute;ment avec un nom de r&eacute;seau d&eacute;termin&eacute; dans <var>/etc/networks</var></a></h2>

<p>Recherche l'adresse IP correspondant au nom de r&eacute;seau d&eacute;termin&eacute; dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#hosts"><b>/etc/networks</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom de r&eacute;seau d&eacute;sir&eacute;.</p>

<p>Renvoie l'adresse IP correspondante, &agrave; vrai dire sous forme num&eacute;rique exprim&eacute;e en binaire.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

use Socket;
my $addr  = getnetbyname(&quot;loopback&quot;);
my $valeur = inet_ntoa($addr);
print &quot;$valeur&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez rechercher l'adresse IP d'un nom de r&eacute;seau sur l'ordinateur. Pour ce faire, le  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm"><b>module standard</b></a> <code>Socket</code> est utilis&eacute;. Il permet de convertir commod&eacute;ment sous sa forme courante la valeur num&eacute;rique binaire de la valeur renvoy&eacute;e par  <code>getnetbyname</code>, qui dans l'exemple est sauvegard&eacute;e dans la scalaire <code>$addr</code>. Par l'appel de la fonction de module  <code>inet_ntoa</code>  <code>$addr</code> est transform&eacute; dans sa forme d'&eacute;criture habituelle. Le r&eacute;sultat de la conversion est sauvegard&eacute; dans l'exemple dans la scalaire <code>$valeur</code>. Ensuite, l'adresse IP du nom de r&eacute;seau <code>loopback</code> est sortie (en principe <code>127.0.0.0</code>).</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getnetent">getnetent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/networks</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#networks"><b>/etc/networks</b></a> ou dans un contexte de liste, une liste avec quatre &eacute;l&eacute;ments.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getnetent();
while(@Liste) {
  print &quot;$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]\n&quot;;
  @Liste = getnetent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier <var>/etc/networks</var> avec un script CGI. Tout d'abord <code>getnetent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste <code>@Liste</code>. Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> -les quatre &eacute;l&eacute;ments de la liste sont sortis et   <code>getnetent</code> est appel&eacute; pour la prochaine boucle. Les quatre &eacute;l&eacute;ments de la liste renvoy&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = nom du r&eacute;seau,<br>
<code>$Liste[1]</code> = nom d'alias du r&eacute;seau,<br>
<code>$Liste[2]</code> = type d'adresse,<br>
<code>$Liste[3]</code> = num&eacute;ro du r&eacute;seau</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getprotobyname">getprotobyname - rechercher un &eacute;l&eacute;ment avec un nom de protocole d&eacute;termin&eacute; dans <var>/etc/protocols</var></a></h2>

<p>Recherche le num&eacute;ro de protocole d'un nom de protocole d&eacute;termin&eacute; dans le fichier   <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#protocols"><b>/etc/protocols</b></a> .</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom de protocole d&eacute;sir&eacute;.</p>

<p>Renvoie le num&eacute;ro de protocole correspondant. Si le nom de protocole transmis n'a pas &eacute;t&eacute; trouv&eacute; <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my $valeur = getprotobyname(&quot;tcp&quot;);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le num&eacute;ro de protocole du protocole <code>tcp</code>. C'est a cela que sert l'appel de <code>getprotobyname(&quot;tcp&quot;)</code>, dont la valeur renvoy&eacute;e est sauvegard&eacute;e dans la scalaire <code>$valeur</code>. Pour le contr&ocirc;le la valeur est sortie.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getprotobynumber">getprotobynumber - rechercher un &eacute;l&eacute;ment avec un nom de protocole d&eacute;termin&eacute; dans <var>/etc/protocols</var></a></h2>

<p>Recherche le nom de protocole d'un num&eacute;ro de protocole d&eacute;termin&eacute; dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#protocols"><b>/etc/protocols</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le num&eacute;ro de protocole d&eacute;sir&eacute;.</p>

<p>Renvoie le nom de protocole correspondant. Si le num&eacute;ro de protocole transmis n'a pas &eacute;t&eacute; trouv&eacute; <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my $valeur = getprotobynumber(17);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le nom de protocole du num&eacute;ro de protocole <code>17</code>. C'est a cela que sert l'appel de <code>getprotobynumber(17)</code>, dont la valeur renvoy&eacute;e est sauvegard&eacute;e dans la scalaire <code>$valeur</code>. Pour le contr&ocirc;le la valeur est sortie.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getprotoent">getprotoent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/protocols</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#protocols"><b>/etc/protocols</b></a> ou dans un contexte de liste, une liste avec trois &eacute;l&eacute;ments.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getprotoent();
while(@Liste) {
  print &quot;$Liste[0]  $Liste[1]  $Liste[2]\n&quot;;
  @Liste = getprotoent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier  <var>/etc/protocols</var> avec un script CGI. Tout d'abord <code>getprotoent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste <code>@Liste</code>. . Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> - les trois &eacute;l&eacute;ments de la liste sont sortis et <code>getnetent</code> est appel&eacute; pour la prochaine boucle. Les trois &eacute;l&eacute;ments de la liste renvoy&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = nom de protocole,<br>
<code>$Liste[1]</code> = num&eacute;ro de protocole,<br>
<code>$Liste[2]</code> = nom d'alias du protocole</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getpwent">getpwent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/passwd</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#passwd"><b>/etc/passwd</b></a> ou dans un contexte de liste, une liste jusqu'&agrave; neuf &eacute;l&eacute;ments.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getpwent();
while(@Liste) {
  print &quot;$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n&quot;;
  @Liste = getpwent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier <var>/etc/passwd</var> avec un script CGI. Tout d'abord <code>getpwent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste  <code>@Liste</code>. Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> - les neuf &eacute;l&eacute;ments de la liste sont sortis et <code>getpwent</code> est appel&eacute; pour la prochaine boucle. Les neuf &eacute;l&eacute;ments de la liste renvoy&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = nom d'utilisateur,<br>
<code>$Liste[1]</code> = mot de passe utilisateur (sous forme crypt&eacute;e),<br>
<code>$Liste[2]</code> = num&eacute;ro d'utilisateur (UID),<br>
<code>$Liste[3]</code> = num&eacute;ro du groupe d'habilitation dont il fait partie (GID),<br>
<code>$Liste[4]</code> = mentions descriptives,<br>
<code>$Liste[5]</code> = mentions descriptives,<br>
<code>$Liste[6]</code> = r&eacute;pertoire de domiciliation de l'utilisateur,<br>
<code>$Liste[7]</code> = console de l'utilisateur,<br>
<code>$Liste[8]</code> = (facultatif) Date de p&eacute;remption de l'&eacute;l&eacute;ment</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getpwnam">getpwnam - rechercher un &eacute;l&eacute;ment avec un nom d'utilisateur d&eacute;termin&eacute; dans <var>/etc/passwd</var></a></h2>

<p>Recherche pour un nom d'utilisateur d&eacute;termin&eacute; l'enregistrement correspondant dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#passwd"><b>/etc/passwd</b></a>. Recherche en contexte scalaire le num&eacute;ro d'utilisateur (UID) ou dans un contexte de liste, une liste jusqu'&agrave; neuf &eacute;l&eacute;ments.</p>


<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom d'utilisateur d&eacute;sir&eacute;.</p>

<p>Renvoie en contexte scalaire le num&eacute;ro d'utilisateur correspondant (UID) et en contexte de liste, une liste avec toutes les donn&eacute;es de l'enregistrement. Si le nom d'utilisateur n'a pas &eacute;t&eacute; trouv&eacute;, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getpwnam(&quot;uucp&quot;);
print &quot;$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n&quot;;

my $valeur = getpwnam(&quot;uucp&quot;);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche pour le nom d'utilisateur <code>uucp</code>, qui est transmis &agrave; la fonction <code>getpwbynam</code>, l'&eacute;l&eacute;ment correspondant - d'abord dans un contexte de liste, et lors du deuxi&egrave;me appel dans un contexte scalaire. Dans le contexte de liste, les neuf &eacute;l&eacute;ments de l'enregistrement sont recherch&eacute;s et sauvegard&eacute;s dans la liste <code>@Liste</code>, dans le contexte scalaire, seul le num&eacute;ro d'utilisateur (UID) est recherch&eacute; puis sauvegard&eacute; dans la scalaire <code>$valeur</code>. L'exemple sort les r&eacute;sultats des deux appels pour le contr&ocirc;le. Pour la signification des &eacute;l&eacute;ments de la liste, voir la fonction <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getpwent"><b>getpwent</b></a>.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getpwuid">getpwuid - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro d'utilisateur d&eacute;termin&eacute; dans  <var>/etc/passwd</var></a></h2>

<p>Recherche pour un num&eacute;ro d'utilisateur d&eacute;termin&eacute; (UID) l'enregistrement correspondant dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#passwd"><b>/etc/passwd</b></a>. Recherche en contexte scalaire le nom d'utilisateur  ou dans un contexte de liste, une liste jusqu'&agrave; neuf &eacute;l&eacute;ments.</p>


<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le num&eacute;ro d'utilisateur d&eacute;sir&eacute; (UID).</p>

<p>Renvoie en contexte scalaire le nom d'utilisateur correspondant et en contexte de liste, une liste avec toutes les donn&eacute;es de l'enregistrement. Si le nom d'utilisateur n'a pas &eacute;t&eacute; trouv&eacute;, <code>undef</code> est renvoy&eacute;.</p>


<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getpwuid(2);
print &quot;$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]  $Liste[4]  $Liste[5]  $Liste[6]  $Liste[7]  $Liste[8]\n&quot;;

my $valeur = getpwuid(2);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche pour le num&eacute;ro d'utilisateur <code>2</code>, qui est transmis &agrave; la fonction <code>getpwbyuid</code>, l'&eacute;l&eacute;ment correspondant - d'abord dans un contexte de liste, et lors du deuxi&egrave;me appel dans un contexte scalaire. Dans le contexte de liste, les neuf &eacute;l&eacute;ments de l'enregistrement sont recherch&eacute;s et sauvegard&eacute;s dans la liste <code>@Liste</code>, dans le contexte scalaire, seul le nom d'utilisateur est recherch&eacute; puis sauvegard&eacute; dans la scalaire <code>$valeur</code>. L'exemple sort les r&eacute;sultats des deux appels pour le contr&ocirc;le. Pour la signification des &eacute;l&eacute;ments de la liste, voir la fonction  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getpwent"><b>getpwent</b></a>.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getservbyname">getservbyname - rechercher un &eacute;l&eacute;ment avec un nom de port d&eacute;termin&eacute; dans  <var>/etc/services</var></a></h2>

<p>Recherche le num&eacute;ro de port d'un service r&eacute;seau d&eacute;termin&eacute; dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#services"><b>/etc/services</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le nom du service du service r&eacute;seau souhait&eacute;,<br>
<b>2.</b> le nom du protocole souhait&eacute;.</p>

<p>Renvoie le num&eacute;ro de port correspondant. si le nom de r&eacute;seau ou le protocole transmis n'ont pas &eacute;t&eacute; trouv&eacute;s, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my $valeur = getservbyname(&quot;www&quot;,&quot;tcp&quot;);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;

</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le num&eacute;ro de port pour le service r&eacute;seau <code>www</code> sur le protocole de r&eacute;seau <code>tcp</code>. C'est &agrave; cela que sert l'appel  <code>getservbyname(&quot;www&quot;,&quot;tcp&quot;)</code>, dont la valeur renvoy&eacute;e est sauvegard&eacute;e dans la scalaire <code>$valeur</code>. Pour le contr&ocirc;le, la valeur est sortie.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getservbyport">getservbyport - - rechercher un &eacute;l&eacute;ment avec un num&eacute;ro de port d&eacute;termin&eacute; dans <var>/etc/services</var></a></h2>

<p>Recherche le nom d'un service r&eacute;seau d'un num&eacute;ro de port d&eacute;termin&eacute;  dans le fichier <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#services"><b>/etc/services</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le num&eacute;ro de port d&eacute;sir&eacute;,<br>
<b>2.</b> le nom du protocole d&eacute;sir&eacute;.</p>

<p>Renvoie le nom du service r&eacute;seau correspondant. Si le num&eacute;ro de port ou le protocole transmis n'ont pas &eacute;t&eacute; trouv&eacute;s, <code>undef</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my $valeur = getservbyport(80,&quot;tcp&quot;);
print &quot;$valeur\n&quot;;

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;

</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple recherche le nom d'un service r&eacute;seau avec le num&eacute;ro de port <code>80</code> sur le protocole r&eacute;seau <code>tcp</code>. C'est &agrave; cela que sert l'appel <code>getservbyport(80,&quot;tcp&quot;)</code>, dont la valeur renvoy&eacute;e est sauvegard&eacute;e dans la scalaire <code>$valeur</code>. Pour le contr&ocirc;le, la valeur est sortie.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="getservent">getservent - rechercher l'&eacute;l&eacute;ment suivant dans  <var>/etc/services</var></a></h2>

<p>Recherche en contexte scalaire l'&eacute;l&eacute;ment suivant dans le fichier  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#services"><b>/etc/services</b></a> ou dans un contexte de liste, une liste avec quatre &eacute;l&eacute;ments.</p>

<p>N'attend aucun param&egrave;tre.</p>

<p>Renvoie selon le contexte soit l'&eacute;l&eacute;ment suivant du fichier ou la liste. &Agrave; la fin du fichier, <code>undef</code> est renvoy&eacute;.</p>


<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;

my @Liste = getservent();
while(@Liste) {
  print &quot;$Liste[0]  $Liste[1]  $Liste[2]  $Liste[3]\n&quot;;
  @Liste = getservent();
}

print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment vous pouvez sortir dans le navigateur tous les &eacute;l&eacute;ments du fichier <var>/etc/services</var> avec un script CGI. Tout d'abord <code>getservent</code> est appel&eacute; une premi&egrave;re fois. La valeur renvoy&eacute;e est interpr&eacute;t&eacute;e dans un contexte de liste et sauvegard&eacute;e dans la liste <code>@Liste</code>. Aussi longtemps que la liste a un contenu  - <code>while(@Liste)</code> - les quatre &eacute;l&eacute;ments de la liste sont sortis et <code>getservent</code> est appel&eacute; pour la prochaine boucle. Les quatre &eacute;l&eacute;ments de la liste renvoy&eacute;s par la fonction sont:<br>
<code>$Liste[0]</code> = nom du service r&eacute;seau,<br>
<code>$Liste[1]</code> = nom d'alias du service r&eacute;seau,<br>
<code>$Liste[2]</code> = num&eacute;ro de port du service r&eacute;seau,<br>
<code>$Liste[3]</code> = nom du protocole correspondant</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="setgrent">setgrent - sauter au d&eacute;but de  <var>/etc/groups</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
setgrent();
my $valeur = getgrent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>setgrent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getgrent"><b>getgrent</b></a>. La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="sethostent">sethostent - sauter au d&eacute;but de  <var>/etc/hosts</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
sethostent();
my $valeur = gethostent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>sethostent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#gethostent"><b>gethostent</b></a>. La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="setnetent">setnetent - sauter au d&eacute;but de  <var>/etc/networks</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
setnetent();
my $valeur = getnetent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>setnetent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getnetent"><b>getnetent</b></a> . La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="setprotoent">setprotoent - sauter au d&eacute;but de  <var>/etc/protocols</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
setprotoent();
my $valeur = getprotoent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>setprotoent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getprotoent"><b>getprotoent</b></a> . . La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="setpwent">setpwent - sauter au d&eacute;but de  <var>/etc/passwd</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
setpwent();
my $valeur = getpwent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>setpwent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getpwent"><b>getpwent</b></a>. La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="setservent">setservent - sauter au d&eacute;but de  <var>/etc/services</var></a></h2>

<p>N'attend aucun param&egrave;tre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;\n&quot;;
setservent();
my $valeur = getservent();
print &quot;$valeur\n&quot;;
print &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple saute au d&eacute;but du fichier avec <code>setservent</code>. Ensuite, il lit l'&eacute;l&eacute;ment suivant du fichier, en l'occurrence le premier &eacute;l&eacute;ment avec  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#getservent"><b>getservent</b></a>. La valeur renvoy&eacute;e qui est sauvegard&eacute;e dans la scalaire <code>$valeur</code> est sortie pour le contr&ocirc;le.</p>













<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="modules.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="modules.htm"><b>Fonctions pour les modules et progiciels (packages)</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="appelssysteme.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="appelssysteme.htm"><b> Fonctions pour les appels du syst&egrave;me d'exploitation</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
