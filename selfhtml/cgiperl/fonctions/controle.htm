<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / Fonctions Perl / Fonctions pour le contr&ocirc;le du script en cours</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Quelles fonctions exitent en Perl qui permettent de garder le contr&ocirc;le sur le script en cours.">
<meta name="keywords"       content="SELFHTML, Perl, fonctions, fonctions Perl, d&eacute;roulement du script, contr&ocirc;le, traitement d'erreur, Error-Handling, caller, defined, die, eval, exit, local, my, quotemeta, reset, return, scalar, wantarray, warn">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/fonctions/controle.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // Fonctions Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Fonctions pour le contr&ocirc;le du script en cours</h2></td>
</tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#allgemeines"><b>G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#caller"><b>caller</b></a> - rechercher le contexte de l'appel<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#defined"><b>defined</b></a> - v&eacute;rifier la d&eacute;finition d'une variable<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#die"><b>die</b></a> - interrompre le script en cas d'erreur<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#eval"><b>eval</b></a> - faire interpr&eacute;ter des instructions ou des blocs d'instructions<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#exit"><b>exit</b></a> - terminer le script<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#local"><b>local</b></a> - limiter la valeur de variables en local<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#my"><b>my</b></a> - limiter le domaine de validit&eacute; de variables<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#quotemeta"><b>quotemeta</b></a> - masquer tous les signes except&eacute;s A-Z, a-z, 0-9 et _ <br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#return"><b>return</b></a> - quitter un sous-programme en renvoyant une valeur<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#scalar"><b>scalar</b></a> - &eacute;valuer une expression dans un contexte scalaire<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#wantarray"><b>wantarray</b></a> - v&eacute;rifier si le contexte de listes est attendu<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#warn"><b>warn</b></a> - sortir des avertissements<br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>





<h2 class="Sh2"><a class="an" name="allgemeines">G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</a></h2>

<p>Les fonctions rassembl&eacute;es ici servent avant tout &agrave; fixer certaines choses pour le Script, &agrave; contr&ocirc;ler ou &agrave; influer sur le cours du script. Ainsi un <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/sousroutines.htm"><b>sous-programme</b></a> peut rechercher pas exemple l'endroit duquel il a &eacute;t&eacute; appel&eacute;. Il est possible de v&eacute;rifier pour une variable si elle a une valeur ou non. La validit&eacute; (dur&eacute;e de vie) de variables peut &ecirc;tre limit&eacute;e &agrave; certains passages du script. Les scripts peuvent &ecirc;tre interrompus dans des situations critiques ou en cas d'erreur ou bien sortir des avertissements.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="caller">caller - rechercher le contexte de l'appel</a></h2>

<p>Recherche l'endroit &agrave; partir duquel la partie de programme actuelle a &eacute;t&eacute; appel&eacute;e et de quel contexte.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> (facultatif) La profondeur &agrave; laquelle la recherche doit remonter vers l'arri&egrave;re exprim&eacute;e sous forme de nombre. Si vous voulez exp&eacute;rimenter ce param&egrave;tre, essayez dans un premier temps de transmettre la valeur <code>1</code>. Des valeurs plus &eacute;lev&eacute;es peuvent avoir pour cons&eacute;quence que moins d'informations qu'esp&eacute;r&eacute; ne soient trouv&eacute;es.</p>

<p>Renvoie une scalaire ou une liste au choix. Quand la valeur renvoy&eacute;e est seulement sauvegard&eacute;e dans une scalaire, celle-ci contient apr&egrave;s l'appel de la fonction, le nom du <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/intro.htm#packages_module"><b>package</b></a> . Quelles autres valeurs renvoy&eacute;es sont sauvegard&eacute;es dans une liste, c'est ce que montre l'exemple suivant.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $Infos = demarrer_appels();
print &quot;$Infos\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;

sub demarrer_appels {
  my $simples_infos = appel_simples_infos();
  my $D_A = &quot;&lt;h3&gt;Informations simples d'appel:&lt;/h3&gt;&lt;p&gt;&quot;.$simples_infos.&quot;&lt;/p&gt;&quot;;
  my $infos_detaillees = appel_infos_detaillees();
  $D_A = $D_A.&quot;&lt;h3&gt;Informations d�taill�es d'appel:&lt;/h3&gt;&lt;p&gt;&quot;.$infos_detaillees.&quot;&lt;/p&gt;&quot;;
  return($D_A);
}

sub appel_simples_infos {
   (my $Package, my $fichier, my $ligne) = caller();
   my $A_S_I = &quot;&lt;b&gt;L'appel a eu lieu � partir du package:&lt;/b&gt; &quot;.$Package.&quot;&lt;br&gt;&quot; if (defined $Package);
   $A_S_I = $A_S_I.&quot;&lt;b&gt;L'appel a eu lieu � partir du fichier:&lt;/b&gt; &quot;.$fichier.&quot;&lt;br&gt;&quot; if (defined $fichier);
   $A_S_I = $A_S_I.&quot;&lt;b&gt;L'appel a eu lieu � partir de la ligne du programme:&lt;/b&gt; &quot;.$ligne if (defined $ligne);
   return($A_S_I);
}

sub appel_infos_detaillees {
   (my $Package, my $fichier, my $ligne, my $sous_programme, my $HasArgs, my $WantArray, my $EvalText, my $IsRequire) = caller(1);
   my $A_I_D = &quot;&lt;b&gt;L'appel a eu lieu � partir du package:&lt;/b&gt; &quot;.$Package.&quot;&lt;br&gt;&quot; if (defined $Package);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;L'appel a eu lieu � partir du fichier:&lt;/b&gt; &quot;.$fichier.&quot;&lt;br&gt;&quot; if (defined $fichier);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;L'appel a eu lieu � partir de la ligne du programme:&lt;/b&gt; &quot;.$ligne.&quot;&lt;br&gt;&quot; if (defined $ligne);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;L'appel a eu lieu � partir du sous-programme:&lt;/b&gt; &quot;.$sous_programme.&quot;&lt;br&gt;&quot; if (defined $sous_programme);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;HasArgs:&lt;/b&gt; &quot;.$HasArgs.&quot;&lt;br&gt;&quot; if (defined $HasArgs);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;WantArray:&lt;/b&gt; &quot;.$WantArray.&quot;&lt;br&gt;&quot; if (defined $WantArray);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;EvalText:&lt;/b&gt; &quot;.$EvalText.&quot;&lt;br&gt;&quot; if (defined $EvalText);
   $A_I_D = $A_I_D.&quot;&lt;b&gt;IsRequire:&lt;/b&gt; &quot;.$IsRequire.&quot;&lt;br&gt;&quot; if (defined $IsRequire);
   return($A_I_D);
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple envoie du code HTML au navigateur. Pendant la sortie HTML le sous-programme <code>demarrer_appels()</code> est appel&eacute;. La valeur renvoy&eacute;e par l'appel est sauvegard&eacute; dans la scalaire <code>$Infos</code> et ensuite est sortie.<br>
Le sous-programme <code>demarrer_appels()</code> appelle de son c&ocirc;t&eacute; les sous-programmes <code>appel_simples_infos()</code> et <code>appel_infos_detaillees()</code>. &Agrave; partir des valeurs renvoy&eacute;es par ces deux sous-programmes, est compos&eacute;e une cha&icirc;ne de caract&egrave;res nomm&eacute;e <code>$D_A</code> qui est ensuite sortie.<br>
Dans <code>appel_simples_infos</code> figure la variante simple d'un appel typique de <code>caller</code>. Ici trois &eacute;l&eacute;ments de liste sont attendus comme valeur renvoy&eacute;e: le nom du package appelant, celui du fichier Perl appelant et le num&eacute;ro de la ligne de programme dans laquelle l'appel a eu lieu.<br>
Le sous-programme <code>appel_infos_detaillees</code> montre quant &agrave; lui l'appel avanc&eacute; de <code>caller</code>. Ici les valeurs renvoy&eacute;es attendues sont huit &eacute;l&eacute;ments de liste. Outre les trois &eacute;l&eacute;ments de la variante simplifi&eacute;e, ce sont le nom du sous programme appelant et les informations compl&eacute;mentaires suivantes:<br>
<code>$HasArgs</code> est &eacute;gal &agrave; 1, quand lors de l'appel des arguments ont &eacute;t&eacute; transmis (est &eacute;galement consid&eacute;r&eacute;e comme telle une liste vide), sinon est &eacute;gal &agrave;  0.<br>
<code>$WantArray</code> sauvegarde si la fonction a &eacute;t&eacute; appel&eacute;e dans un contexte liste.<br>
<code>$EvalText</code> sauvegarde un contenu quand l'appel a lieu &agrave; partir d'une &eacute;valuation avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#eval"><b>eval()</b></a> (pas forc&eacute;ment cependant pour les &eacute;valuations de bloc avec <code>eval{...}</code>.<br>
<code>$IsRequire</code> sauvegarde <code>1</code> comme contenu quand l'appel a eu lieu &agrave; partir de <code>eval</code>, et que l'une des fonctions  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="modules.htm#use"><b>use</b></a> ou <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="modules.htm#require"><b>require</b></a> sont en jeu.<br>
Les deux sous-programmes <code>appel_simples_infos</code> et <code>appel_infos_detaillees</code> dans l'exemple ci-dessus composent &agrave; partir des informations recueillies les cha&icirc;nes de caract&egrave;res <code>$A_S_I</code> ou <code>$A_I_D</code> et sortent celles-ci &agrave; la fin.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="defined">defined - v&eacute;rifier la d&eacute;finition d'une variable</a></h2>

<p>Les variables, que ce soient des scalaires, des &eacute;l&eacute;ments de listes ou d'array ou des &eacute;l&eacute;ments de hash ont pour valeur <code>undef</code> aussi longtemps qu'une valeur quelconque ne leur a pas &eacute;t&eacute; affect&eacute;e explicitement. Avec cette fonction, vous pouvez v&eacute;rifier si une valeur a d&eacute;j&agrave; &eacute;t&eacute; oui ou non affect&eacute;e &agrave; une variable.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la variable &agrave; v&eacute;rifier.</p>

<p>Renvoie <code>1</code> ou bien une valeur logique &quot;vrai&quot;, si la variable s'est vu affecter une valeur, et <code>0</code> ou bien une valeur logique &quot;faux&quot;, quand aucune valeur n'est affect&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $premiere_phrase;
my $seconde_phrase = &quot;Le premier est mordu par les chats&quot;;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
&amp;enoncer_phrase;
$premiere_phrase = &quot;...et le dernier, c'est bien connu, par les chiens&quot;;
undef $seconde_phrase;
print &quot;&lt;p&gt;&lt;/p&gt;&lt;i&gt;So - et maintenant encore une fois:&lt;/i&gt;&lt;/p&gt;&quot;;
&amp;enoncer_phrase;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;

sub enoncer_phrase {
  if(defined $premiere_phrase) {
    print &quot;La premi�re phrase est  &lt;b&gt;$premiere_phrase&lt;/b&gt;&lt;br&gt;\n&quot;;
  }
  if(defined $seconde_phrase) {
    print &quot;La deuxi�me phrase est &lt;b&gt;$seconde_phrase&lt;/b&gt;&lt;br&gt;\n&quot;;
  }
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script en exemple d&eacute;finit d'abord deux scalaires nomm&eacute;es <code>$premiere_phrase</code> sans affectation de valeur et <code>$seconde_phrase</code> avec une affectation de valeur. Le script contient un sous-programme nomm&eacute; <code>enoncer_phrase</code>. Y est v&eacute;rifi&eacute; pour chacune des deux scalaires avec <code>defined</code> si une valeur leur a &eacute;t&eacute; affect&eacute;e. Si c'est le cas, la valeur est sortie.<br>
Le script envoie du code HTML au navigateur et appelle ici d'abord le sous-programme <code>enoncer_phrase</code>. Ensuite, la scalaire <code>$premiere_phrase</code>, jusqu'alors ind&eacute;finie re&ccedil;oit une valeur, et la scalaire <code>$seconde_phrase</code> est fix&eacute;e avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="hashlistes.htm#undef"><b>undef</b></a> dans un &eacute;tat o&ugrave; aucune valeur (ou plut&ocirc;t  la &quot;non-valeur&quot; <code>undef</code>) lui est affect&eacute;e. Apr&egrave;s quoi  <code>enoncer_phrase</code> est appel&eacute; encore une fois.<br>
Au premier appel de <code>enoncer_phrase</code> seul est sorti  &quot;Le premier est mordu par les chats&quot;, au deuxi&egrave;me appel seulement  &quot;...et le dernier, c'est bien connu, par les chiens&quot;.</p>

<h3 class="xpl">Attention:</h3>

<p>La valeur initiale <code>undef</code> d'une variable, que vous pouvez r&eacute;tablir gr&acirc;ce &agrave; la fonction <code>undef</code> est diff&eacute;rente de la cha&icirc;ne de caract&egrave;res vide (<code>&quot;&quot;</code>). Une cha&icirc;ne de caract&egrave;res vide est tout &agrave; fait une valeur affect&eacute;e!</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="die">die - interrompre le script en cas d'erreur</a></h2>

<p>Termine un script quand il est vain de continuer son ex&eacute;cution. Est employ&eacute; volontiers quand un fichier important ne peut pas &ecirc;tre ouvert.<br>
&Eacute;crit les messages d'erreur sur la sortie standard d'erreur <code>STDERR</code> et termine le script avec la valeur actuelle de la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../langage/predefini.htm"><b>variable pr&eacute;d&eacute;finie</b></a> <code>$!</code>. Pour le port CGI d'un serveur WWW la sortie standard d'erreur est la plupart du temps un fichier Log, dans lequel ces messages d'erreur sont r&eacute;unis. Recherchez le cas &eacute;ch&eacute;ant dans la documentation du serveur Web o&ugrave;  et comment les messages d'erreur sont recens&eacute;s.</p>

<p>Attend comme param&egrave;tre:<br>
<b>1.</b> une liste qui doit &ecirc;tre &eacute;crite sur la sortie standard. Pour le bien, la liste contient un ou plusieurs messages d'erreur correspondants.</p>

<h3 class="xmp">Exemple:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

open(TEXT, &quot;&lt;/daten/texte/absent.txt&quot;) || die &quot;Erreur survenue: $!&quot;;
my @lignes = &lt;TEXT&gt;;
close(TEXT);
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple essaie d'ouvrir un fichier avec  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="entreesortie.htm#open"><b>open</b></a>, fichier qui cependant n'existe pas. Ce qui fait que l'embranchement derri&egrave;re l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../langage/operateurs.htm#logiques"><b>op&eacute;rateur logique</b></a> <code>||</code> (qui figure pour &quot;ou&quot;) est actif. L&agrave; est not&eacute;e la fonction <code>die</code>. Elle &eacute;crit sur la sortie standard d'erreur qu'une erreur est survenue. En notant &eacute;galement la variable pr&eacute;d&eacute;finie <code>$!</code> dans la sortie, sera &eacute;galement recens&eacute;e dans le protocole, la nature de l'erreur survenue. Dans ce cas, l'instruction <code>use&nbsp;CGI::Carp&nbsp;qw(fatalsToBrowser)</code> est aussi d'une grande aide car l'erreur est ainsi en outre &eacute;galement &eacute;crite sur la sortie standard et peut selon le cas &eacute;galement atterrir &agrave; l'affichage dans le navigateur.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="eval">eval - faire interpr&eacute;ter des instructions ou des blocs d'instructions</a></h2>

<p>Les scripts Perl sont normalement compil&eacute;s en interne en <b>code d'op&eacute;ration</b> (operationscode) (ce qu'on appelle Opcodes), avant qu'ils ne soient ex&eacute;cut&eacute;s. C'est ce que vous pouvez remarquer en tant que programmeur quand l'interpr&eacute;teur Perl s'interrompt avant l'ex&eacute;cution, d&egrave;s que le script contient des erreurs de syntaxe. &Agrave; l'aide de la fonction <code>eval</code> vous pouvez cependant appeler l'interpr&eacute;teur Perl au cours d'un script et lui faire interpr&eacute;ter du code Perl quelconque pendant l'ex&eacute;cution du script. En d'autres termes, un script Perl peut de cette fa&ccedil;on &eacute;crire lui m&ecirc;me des scripts Perl et incorporer leur ex&eacute;cution dans sa propre ex&eacute;cution. Dans la cr&eacute;ation de code, des contenus de variables que le script g&egrave;re peuvent bien s&ucirc;r &ecirc;tre repris.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> <b>soit</b> une cha&icirc;ne de caract&egrave;res qui contient du code Perl, <b>soit</b> un bloc d'instructions dans des parenth&egrave;ses accolades, comparable &agrave; un bloc d'instructions dans un sous-programme ou &agrave; l'int&eacute;rieur d'une requ&ecirc;te <code>if</code>.<br>
La diff&eacute;rence entre les deux possibilit&eacute;s r&eacute;side en ce qu'une cha&icirc;ne de caract&egrave;res transmise n'est effectivement compil&eacute;e qu'&agrave; l'ex&eacute;cution, alors qu'il est tenu compte du bloc d'instructions dans la compilation interne pr&eacute;liminaire. Ainsi par exemple des erreurs graves qui m&egrave;nent &agrave; l'interruption du script sont-elles d&eacute;j&agrave; reconnues lors de la compilation en ce qui concerne la transmission d'un bloc d'instructions mais seulement &agrave; l'ex&eacute;cution en ce qui concerne la transmission d'une cha&icirc;ne de caract&egrave;res.</p>

<p>Renvoie le r&eacute;sultat de la derni&egrave;re instruction ex&eacute;cut&eacute;e dans la cha&icirc;ne de caract&egrave;res transmise ou dans le bloc d'instructions transmis. En ca d'erreur <code>undef</code> est renvoy&eacute;, et le message de l'erreur survenue peut &ecirc;tre consult&eacute; par la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/predefini.htm"><b>variable pr&eacute;d&eacute;finie</b></a> <code>$@</code> .</p>

<h3 class="xmp">Exemple 1 d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $resultat_calcul = eval($ENV{'QUERY_STRING'});

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;Le r�sultat de l'op�ration de calcul transmise est &lt;b&gt;$resultat_calcul&lt;/b&gt;&lt;br&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script attend lors de son appel la transmission d'un param&egrave;tre qui est not&eacute; par l'URI derri&egrave;re un point d'interrogation. Le param&egrave;tre transmis consiste en une op&eacute;ration de calcul. Il peut aussi s'agir d'expressions de calculs complexes avec parenth&egrave;ses, par exemple <code>((6+7)*4)+(5/7)</code>. Seuls les espaces ne sont pas autoris&eacute;s dans cet exemple de script simple &eacute;tant donn&eacute; qu'ils sont reformat&eacute;s lors de leur transmission dans la ligne d'URI.<br>
Par la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/variablesenvironnement.htm"><b>variable d'environnement CGI</b></a> <code>$ENV{'QUERY_STRING'}</code> le script peut acc&eacute;der &agrave; l'op&eacute;ration de calcul transmise. Il transmet aussit&ocirc;t la variable d'environnement &agrave; la fonction <code>eval</code>. Celle-ci transmet &agrave; son tour la cha&icirc;ne de caract&egrave;res transmise, donc l'op&eacute;ration de calcul lors de l'ex&eacute;cution &agrave; l'interpr&eacute;teur Perl. La valeur de cette instruction est renvoy&eacute;e et c'est dans notre cas simplement le r&eacute;sultat de l'op&eacute;ration, tel que Perl le sauvegarderait dans une scalaire si on lui affectait cette op&eacute;ration de calcul.<br>
Pour le contr&ocirc;le, le script envoie du code HTML au navigateur et sort le r&eacute;sultat de l'op&eacute;ration.</p>

<h3 class="inf">Attention:</h3>

<p>Les scripts comme dans l'exemple ci-dessus peuvent &ecirc;tre extr&ecirc;mement dangereux. N'en utilisez jamais comme scripts accessibles au public! Car le code transmis que le script re&ccedil;oit de l'utilisateur est ex&eacute;cut&eacute; sans piti&eacute;. Si l'utilisateur est quelqu'un qui s'y conna&icirc;t, il peut transmettre &agrave; la place de l'op&eacute;ration de calcul requise, un appel de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="appelssysteme.htm#system"><b>system</b></a> avec lequel toute une arborescence de r&eacute;pertoires est effac&eacute;e ou le disque dur est format&eacute;.</p>


<h3 class="xmp">Exemple 2 d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $nombre_1 = int(rand(50));
my $nombre_2 = int(rand(5));
my $resultat;
eval { $resultat = $nombre_1 / $nombre_2; };

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

if($@) {
  print &quot;L'erreur suivante est survenue: $@\n&quot;;
}
else {
  print &quot;$nombre_1 divis� par $nombre_2 donne $resultat\n&quot;;
}
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans cet exemple, la fonction <code>eval</code> est utilis&eacute;e, comme elle l'est souvent dans la pratique pour la capture d'erreurs. Le script recherche avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="calculs.htm#rand"><b>rand</b></a> deux nombres al&eacute;atoires <code>$nombre_1</code> et <code>$nombre_2</code>. Ensuite il divise nombre 1 par nombre 2. &Eacute;tant donn&eacute; cependant que pour les nombres al&eacute;atoires recherch&eacute;s la valeur 0 peut &eacute;galement &ecirc;tre trouv&eacute;e, une erreur grave surviendrait si nombre 2 avait cette valeur. Car une division par 0 m&egrave;ne sur tous les syst&egrave;mes d'ordinateurs &agrave; une erreur. Le script incorpore pour cette raison l'instruction avec la division dans un bloc <code>eval</code>. Au cas o&ugrave; nombre 2 a effectivement la valeur 0, une interruption a lieu et le message d'erreur g&eacute;n&eacute;r&eacute; par Perl figure ensuite dans la variable pr&eacute;d&eacute;finie <code>$@</code>.<br>
L'exemple envoie du code HTML au navigateur. Ce faisant il demande si <code>$@</code> a un contenu. Si oui, l'erreur est sortie. Si non, le r&eacute;sultat de la division effectu&eacute;e est sorti.</p>


<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="exit">exit - terminer le script</a></h2>

<p>Termine le script et renvoie une valeur au processus appelant.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> (facultatif) une valeur &agrave; renvoyer. Les valeurs usuelles qui sont reconnues &eacute;galement au plus t&ocirc;t par des processus appelants &eacute;trangers sont <code>0</code> pour &quot;termin&eacute; avec succ&egrave;s&quot; et <code>1</code> pour &quot;termin&eacute; avec erreurs&quot;. Si vous ne mentionnez aucun param&egrave;tre, c'est automatiquement <code>0</code> qui est utilis&eacute;.</p>


<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

if($ENV{'QUERY_STRING'} eq &quot;&quot;) {
   HTML_Output(&quot;Nom d'utilisateur attendu � l'appel!&quot;);
   exit(1);
}
else {
   HTML_Output(&quot;Hello $ENV{'QUERY_STRING'}, Comment &ccedil;a va?&quot;);
   exit(0);
}

sub HTML_Output {
  print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
  print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
  print &quot;$_[0]\n&quot;;
  print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>&Agrave; l'appel du script, la transmission d'un param&egrave;tre est attendue qui est not&eacute; &agrave; l'appel par l'URI derri&egrave;re un point d'interrogation. Le param&egrave;tre transmis comprend un nom d'utilisateur. Par l'estimation de la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/variablesenvironnement.htm"><b>variable d'environnement CGI</b></a> <code>$ENV{'QUERY_STRING'}</code> le script acc&egrave;de au nom transmis. Si la variable d'environnement CGI est vide (<code>&quot;&quot;</code>), aucun nom n'a &eacute;t&eacute; transmis, Dans ce cas le script appelle le sous-programme <code>HTML_Output</code> et lui fait envoyer un message d'erreur au navigateur. Ensuite, le script est termin&eacute; avec <code>exit(1)</code>. Dans le cas contraire, si tout est en ordre et qu'un nom a &eacute;t&eacute; transmis, le script appelle &eacute;galement <code>HTML_Output</code> mais cette fois cependant avec une salutation gentille de l'utilisateur. Dans ce cas l&agrave;, le script se termine ensuite avec <code>exit(0)</code>.</p>



<h3 class="xpl">Attention:</h3>

<p>Il n'est pas de bon ton en programmation d'utiliser <code>exit</code> dans des sous-programmes. Si le script reconna&icirc;t des cas d'erreurs dans ces parties de programme, il doit plut&ocirc;t renvoyer une valeur avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#return"><b>return</b></a> , qui est reconnue en tant que telle dans la partie globale du script et doit conduire &agrave; cet endroit &agrave; un appel de <code>exit</code>.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="local">local - limiter la valeur de variables en local</a></h2>

<p>Restreint la validit&eacute; de la valeur d'une variable (qu'il s'agisse d'une scalaire, d'une liste ou d'un hash etc...) &agrave; une validit&eacute; locale. La limitation peut se rapporter &agrave; un <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/intro.htm#blocs_instructions"><b>bloc d'instructions</b></a> ou &agrave; un passage qui est appel&eacute; &agrave; partir de ce bloc d'instructions. S'il existe une variable du m&ecirc;me nom en dehors du bloc, une nouvelle valeur lui est affect&eacute;e temporairement &agrave; l'int&eacute;rieur du bloc d'instructions. Vous pouvez appliquer cette fonction &agrave; la premi&egrave;re introduction, donc &agrave; la d&eacute;claration de la variable.</p>

<p>Ne perdez pas de vue que <code>local</code> ne cr&eacute;e pas vraiment une variable locale mais seulement une variable globale avec une valeur valable localement. N'utilisez donc  <code>local</code> que dans des cas exceptionnels justifi&eacute;s! Des &quot;vraies&quot; variables valables localement sont d&eacute;clar&eacute;es avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#my"><b>my</b></a>.</p>


<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une variable &agrave; laquelle doit &ecirc;tre affect&eacute;e temporairement une nouvelle valeur.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

use vars '$nombre_1';
print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $resultat = sous_programme_1();
print &quot;$resultat\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;

sub sous_programme_1 {
   local $nombre_1 = 10;
   $nombre_1 = $nombre_1 * 2;
   $nombre_2 = sous_programme_2();
   return($nombre_1 + $nombre_2);
}

sub sous_programme_2 {
  return($nombre_1 + 100);

}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit au d&eacute;but une scalaire <code>$nombre_1</code>. C'est une variable globale, valide partout et qui peut &ecirc;tre modifi&eacute;e &agrave; tout endroit du script. L'exemple contient cependant aussi plus bas un sous-programme nomm&eacute;  <code>sous_programme_1</code>. Dans celui-ci qui pour Perl repr&eacute;sente un bloc d'instructions, une autre valeur pour le sous-programme <code>sous_programme_1</code> est affect&eacute;e &agrave; la variable globale avec <code>local $nombre_1</code>, &agrave; savoir <code>10</code>. Si <code>local</code> manquait, alors une nouvelle valeur serait tout simplement affect&eacute;e &agrave; la variable globale <code>$nombre_1</code>.<br>
<code>$nombre_1</code> est multipli&eacute; par 2 dans l'instruction qui suit imm&eacute;diatement. Apr&egrave;s quoi la valeur <code>20</code> figure dans <code>$nombre_1</code>, &eacute;tant donn&eacute; que la multiplication est faite avec la valeur temporaire <code>10</code>.<br>
&Agrave; partir de <code>sous_programme_1</code> est ensuite appel&eacute; <code>sous_programme_2</code>. L&agrave; est encore employ&eacute;e la variable <code>$nombre_1</code>. &Agrave; cet instant dans le d&eacute;roulement du script, la valeur globale <code>5</code> de la variable <code>$nombre_1</code> est toujours remplac&eacute;e par la valeur temporaire <code>20</code>. &Eacute;tant donn&eacute; qu'elle est &eacute;galement valide dans les passages qui sont appel&eacute;s &agrave; partir de <code>sous_programme_1</code> cette valeur continue &agrave; &ecirc;tre utilis&eacute;e &agrave; l'int&eacute;rieur de <code>sous_programme_2</code>  (ici la diff&eacute;rence avec la fonction <img src="../../src/bas.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="#my"><b>my</b></a> est &eacute;vidente) . &Agrave; la valeur actuelle 20 est ajout&eacute; 100. La valeur que sous_programme_2  <img src="../../src/bas.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="#return"><b>renvoie avec return</b></a>, est donc 120.<br>
<code>sous_programme_1</code> renvoie apr&egrave;s l'appel de <code>sous_programme_2</code> de la m&ecirc;me fa&ccedil;on le r&eacute;sultat d'une addition &agrave; la commande appelante. &Eacute;tant donn&eacute; que <code>$nombre_2</code> a la valeur <code>120</code> , c'est donc la valeur <code>140</code> qui est renvoy&eacute;e.<br>
Dans le programme principal, l'exemple envoie du code HTML au navigateur. Ce faisant <code>sous_programme_1</code> est appel&eacute; et la valeur qu'il renvoie est sauvegard&eacute;e dans la scalaire <code>$resultat</code>. Pour le contr&ocirc;le, le r&eacute;sultat est sorti.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="my">my - limiter le domaine de validit&eacute; de variables</a></h2>

<p>Restreint le domaine de validit&eacute; d'une variable (qu'il s'agisse d'une scalaire, d'une liste ou d'un hash etc...)  &agrave; un  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/intro.htm#packages_module"><b>espace de nommage</b></a> ou &agrave; un   <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/intro.htm#blocs_instructions"><b>bloc d'instructions</b></a>. Si une variable du m&ecirc;me nom existe en dehors du bloc, elle ne sera pas touch&eacute;e. Vous pouvez appliquer cette fonction lors de la d&eacute;finition d'une variable.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une variable dont le domaine de validit&eacute; doit &ecirc;tre restreint.</p>


<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);
use vars qw($nombre_1);

$nombre_1 = 1;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $resultat = sous_programme_1();
print &quot;$resultat\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;

sub sous_programme_1 {
   my $nombre_1 = 10;
   my $nombre_2 = sous_programme_2();
   return($nombre_1 + $nombre_2);
}

sub sous_programme_2 {
 return($nombre_1 + 100);
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit au d&eacute;but une scalaire <code>$nombre_1</code>. C'est une variable globale, valide partout et qui peut &ecirc;tre modifi&eacute;e &agrave; tout endroit du script. La d&eacute;claration a lieu avec le  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm"><b>module standard</b></a> <code>vars</code>. La raison en est que l'emploi de <code>use strict</code> ne permet sinon aucune d&eacute;claration de variables globales et g&eacute;n&egrave;rerait une erreur. Vous voyez dans l'exemple comment le module <code>vars</code> est mis en &#339;uvre. Incorpor&eacute; avec <code>use</code>, figure dans la parenth&egrave;se derri&egrave;re <code>qw</code> le nom <code>$nombre_1</code>, donc le nom de la variable qui doit &ecirc;tre d&eacute;clar&eacute;e globalement. Dans la parenth&egrave;se derri&egrave;re <code>qw</code> vous pouvez aussi mentionner en tant que liste,  plusieurs variables globales s&eacute;par&eacute;es par des espaces.</p>

<p>Le script en exemple  contient aussi plus bas un sous-programme nomm&eacute; <code>sous_programme_1</code>. Dans celui-ci qui pour Perl repr&eacute;sente un bloc d'instructions, est d&eacute;clar&eacute;e une variable avec <code>my $nombre_1</code> et elle porte le m&ecirc;me nom que la variable globale. Par l'application de <code>my</code> il s'agit cependant d'une nouvelle variable distincte qui est initialis&eacute;e avec la valeur <code>10</code> . Si <code>my</code> manquait, alors une nouvelle valeur serait tout simplement affect&eacute;e &agrave; la variable globale <code>$nombre_1</code>.<br>
&Agrave; partir de  <code>sous_programme_1</code> est ensuite appel&eacute; <code>sous_programme_2</code>. . L&agrave; est encore employ&eacute;e la variable <code>$nombre_1</code>. &Agrave; cet instant dans le d&eacute;roulement du script, les deux variables <code>$nombre_1</code> existent. &Eacute;tant donn&eacute; que celle qui a &eacute;t&eacute; d&eacute;clar&eacute;e dans  <code>sous_programme_1</code>, n'est cependant valide que l&agrave;, c'est &agrave; nouveau la variable globale dont il est question dans <code>sous_programme_2</code>. &Agrave; sa valeur <code>1</code> est ajout&eacute; <code>100</code>. la valeur que <code>sous_programme_2</code> retourne avec <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#return"><b>return</b></a> est donc <code>101</code>.<br>
<code>sous_programme_1</code> renvoie de la m&ecirc;me fa&ccedil;on apr&egrave;s l'appel de <code>sous_programme_2</code> le r&eacute;sultat d'une addition &agrave; la commande appelante. Dans ce cas il est &agrave; nouveau question avec <code>$nombre_1</code> de la variable qui a &eacute;t&eacute; d&eacute;clar&eacute;e dans le m&ecirc;me bloc, donc &agrave; l'int&eacute;rieur de <code>sous_programme_1</code>, et qui a pour valeur <code>10</code>. &Eacute;tant donn&eacute; que <code>$nombre_2</code> a pour valeur <code>101</code>, c'est donc la valeur <code>111</code> qui est sortie.<br>
Dans le programme principal, l'exemple envoie du code HTML au navigateur. Ce faisant <code>sous_programme_1</code> est appel&eacute; et la valeur qu'il renvoie est sauvegard&eacute;e dans la scalaire   <code>$resultat</code>. Pour le contr&ocirc;le, le r&eacute;sultat est sorti.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="quotemeta">quotemeta - masquer tous les signes except&eacute;s A-Z, a-z, 0-9 et _ </a></h2>

<p>Transforme une cha&icirc;ne de caract&egrave;res de telle fa&ccedil;on que tous les caract&egrave;res except&eacute;s A &agrave; Z, a &agrave; z, 0 &agrave; 9 et le tiret de soulignement _ soient masqu&eacute;s par une barre oblique invers&eacute;e <code>\</code>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une cha&icirc;ne de caract&egrave;res qui doit &ecirc;tre transform&eacute;e.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res transform&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

my $texte_normal = &quot;+++Test+++&quot;;
my $longueur_normale = length($texte_normal);
my $texte_quotemeta = quotemeta($texte_normal);
my $longueur_quotemeta = length($texte_quotemeta);

print &quot;&lt;b&gt;$texte_normal&lt;/b&gt; a �t� transform� en &lt;b&gt;$texte_quotemeta&lt;/b&gt;&lt;br&gt;\n&quot;;
print &quot;Longueur du texte avant : &lt;b&gt;$longueur_normale&lt;/b&gt; caract�res&lt;br&gt;\n&quot;;
print &quot;Longueur du texte maintenant: &lt;b&gt;$longueur_quotemeta&lt;/b&gt; caract�res\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple envoie du code HTML au navigateur. Ce faisant, il d&eacute;montre la fa&ccedil;on d'agir de <code>quotemeta</code>. Une scalaire nomm&eacute;e  <code>$texte_normal</code> qui se voit affecter, tout d'abord une valeur, qui contient outre le mot &quot;Test&quot; diff&eacute;rents signes plus. Par ailleurs la longueur de la cha&icirc;ne de caract&egrave;res est recherch&eacute;e avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="chainescaracteres.htm#length"><b>length</b></a> . Par l'application qui suit de la fonction <code>quotemeta</code> sur <code>$texte_normal</code> les signes plus sont masqu&eacute;s. La valeur renvoy&eacute;e par la fonction est sauvegard&eacute;e dans une nouvelle scalaire nomm&eacute;e  <code>$texte_quotemeta</code>. La longueur de celle-ci est &eacute;galement recherch&eacute;e avec <code>length</code>. Pour le contr&ocirc;le, le script sort toutes les donn&eacute;es trouv&eacute;es. La version masqu&eacute;e compte 6 caract&egrave;res suppl&eacute;mentaires &eacute;tant donn&eacute; que chaque signe plus a &eacute;t&eacute; masqu&eacute;.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="return">return - quitter un sous-programme en renvoyant une valeur</a></h2>

<p>Renvoie une valeur &agrave; l'instruction qui a appel&eacute; le  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/sousroutines.htm"><b>sous-programme</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> (facultatif) une valeur qui doit &ecirc;tre renvoy&eacute;e. Il peut s'agir d'un nombre, d'une cha&icirc;ne de caract&egrave;res ou d'une variable quelconque (m&ecirc;me d'une liste compl&egrave;te ou d'un hash. Si aucun param&egrave;tre n'est transmis, la sous-routine est simplement quitt&eacute;e et selon le dernier contexte ex&eacute;cut&eacute;, c'est une liste vide ou une scalaire avec la valeur <code>undefined</code> qui est renvoy&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $sortie = gras(&quot;une affaire importante&quot;);
print &quot;&lt;p&gt;$sortie&lt;/p&gt;\n&quot;;
$sortie = italique(&quot;une affaire plus importante encore&quot;);
$sortie = gras($sortie);
print &quot;&lt;p&gt;$sortie&lt;/p&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;

sub gras {
  my $caracteres_gras = &quot;&lt;b&gt;$_[0]&lt;/b&gt;&quot;;
  return $caracteres_gras;
}

sub italique {
  my $texte_italique = &quot;&lt;i&gt;$_[0]&lt;/i&gt;&quot;;
  return $texte_italique;
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple contient deux sous-programmes nomm&eacute;s <code>gras</code> et <code>italique</code>. Dans les deux sous-programmes la transmission d'un param&egrave;tre est attendue; celui-ci figure dans la liste pr&eacute;d&eacute;finie pour les param&egrave;tres transmis (<code>@_</code>) en premi&egrave;re place (<code>$_[0]</code>). Le param&egrave;tre transmis est plac&eacute; dans des rep&egrave;res HTML pour caract&egrave;res gras et pour italique. Les scalaires <code>$caracteres_gras</code> ou bien <code>$texte_italique</code>, qui sauvegardent cette construction sont ensuite renvoy&eacute;es avec  <code>return</code> .<br>
Le script envoie du code HTML au navigateur. Pendant la sortie, il appelle les deux sous-programmes. La valeur renvoy&eacute;e est sauvegard&eacute;e respectivement dans la scalaire <code>$sortie</code>. Dans le deuxi&egrave;me cas, ce sont m&ecirc;me les deux sous-programmes qui sont appel&eacute;s l'un apr&egrave;s l'autre. Ce qui fait que le texte transmis est d'abord en italique puis en caract&egrave;res gras, donc finalement en caract&egrave;res gras et en italique. Pour le contr&ocirc;le, les constructions HTML sont sorties.</p>

<h3 class="xpl">Attention:</h3>

<p>Les sous-programmes renvoient aussi quelque chose, m&ecirc;me s'ils ne sont pas quitt&eacute;s avec <code>return</code>. Si par exemple vous appelez un sous-programme comme suit:<br>
<code>$sortie = Test();</code><br>
et que le sous programme ressemble &agrave; ceci:<br>
<code>sub Test { $x = 1; }</code><br>
alors est sauvegard&eacute;e ensuite dans  <code>$sortie</code> la valeur <code>1</code>.</p>


<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="scalar">scalar - &eacute;valuer une expression dans un contexte scalaire</a></h2>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une expression quelconque. Il peut s'agir d'une variable, d'un appel de fonction, d'un calcul, d'une affectation etc....</p>

<p>Renvoie la valeur que donne l'expression transmise dans un contexte scalaire.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $singulier = &quot;une table&quot;;
my @pluriel = (&quot;une table&quot;,&quot;encore une table&quot;);
my $sortie_1 = scalar($singulier);
my $sortie_2 = scalar(@pluriel);
my $sortie_3 = scalar(time() &gt; 900000000 ? 1 : 0);
print &quot;sortie 1: $sortie_1&lt;br&gt;\n&quot;;
print &quot;sortie 2: $sortie_2&lt;br&gt;\n&quot;;
print &quot;sortie 3: $sortie_3\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple envoie du code HTML au navigateur. Ce faisant, il d&eacute;finit une scalaire nomm&eacute;e <code>$singulier</code> et une liste nomm&eacute;e <code>@pluriel</code>. Sur l'une et l'autre, la fonction <code>scalar</code> est appliqu&eacute;e. La valeur scalaire renvoy&eacute;e est sauvegard&eacute;e dans les scalaires <code>$sortie_1</code> et <code>$sortie_2</code>. Par ailleurs est d&eacute;finie une troisi&egrave;me scalaire <code>$sortie_3</code>, &agrave; laquelle le contexte scalaire d'une instruction plus complexe est renvoy&eacute;. Dans l'instruction est recherch&eacute; si la valeur renvoy&eacute;e par la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="dateheure.htm#time"><b>time</b></a> est plus grande que 900000000. Si c'est le cas 1 est renvoy&eacute;, sinon, c'est 0 qui est renvoy&eacute;. Finalement, le script sort les 3 valeurs trouv&eacute;es.<br>
<code>$sortie_1</code> sort simplement le contenu de la scalaire <code>$singulier</code>, donc <code>une table</code>. Que l'expression &eacute;valu&eacute;e soit une scalaire ne change rien dans un contexte scalaire &agrave; la valeur renvoy&eacute;e.<br>
<code>$sortie_2</code> sort un nombre, &agrave; savoir 2. La raison en est que l'interpr&eacute;tation scalaire d'une liste, dans l'exemple la liste <code>@pluriel</code>, trouve le nombre d'&eacute;l&eacute;ments qui sont contenus dans cette liste.<br>
<code>$sortie_3</code> sort 1 ou 0, selon la valeur retourn&eacute;e par <code>time</code>. &Eacute;tant donn&eacute; que 1 et 0 sont des valeurs distinctes normales, le contexte scalaire est d&eacute;j&agrave; observ&eacute;.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="wantarray">wantarray - v&eacute;rifier si le contexte de listes est attendu</a></h2>

<p>N'attend aucun param&egrave;tre</p>

<p>Renvoie <code>1</code> ou <code>TRUE</code>, si le programme appelant ou le sous-programme appelant attend un contexte de liste et  <code>0</code> ou <code>FALSE</code>, si un contexte scalaire est attendu. Renvoie <code>undef</code>, quand absolument aucun contexte n'est attendu (ce qu'on appelle en anglais <i>void context</i>).</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

my @nombres = (1,2,3,4,5);

my $somme_normale = rechercher_somme(@nombres);
print &quot;La somme normale de 1,2,3,4,5 est &lt;b&gt;$somme_normale&lt;/b&gt;&lt;br&gt;\n&quot;;

my @somme_cumulee = rechercher_somme(@nombres);
print &quot;Die somme_cumulee von 1,2,3,4,5 sind &lt;b&gt;@somme_cumulee&lt;/b&gt;&lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;


sub rechercher_somme {
   if(wantarray) {
     my @somme = @_;
     my $valeur;
     foreach my $somme (@somme) {
        $somme = $valeur += $somme;
     }
     return @somme;
   }
   else {
     my $valeur;
     foreach my $somme (@_) {
        $valeur += $somme;
     }
     return $valeur;
   }
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple contient un sous-programme nomm&eacute; <code>rechercher_somme</code>. La fonction attend une liste de nombres comme param&egrave;tre pour lesquels une requ&ecirc;te peut &ecirc;tre faite par la liste de param&egrave;tres <code>@_</code>. &Agrave; l'int&eacute;rieur de la fonction, il est demand&eacute; avec <code>if(wantarray)</code>, si l'instruction qui appelle le sous-programme attend une liste ou une scalaire comme valeur renvoy&eacute;e. Si une liste est attendue c'est l'embranchement <code>if</code> qui est ex&eacute;cut&eacute;. Si une scalaire est attendue, c'est l'embranchement <code>else</code>. Dans l'embranchement <code>if</code> est not&eacute; un algorithme qui recherche les sommes cumul&eacute;es des nombres transmis. Les sommes cumul&eacute;es sont tenues dans une liste nomm&eacute;e <code>@somme</code>. Cette liste est renvoy&eacute;e &agrave; la fin. Dans l'embranchement <code>else</code> par contre, la fonction ne recherche que la somme des nombres transmis et tient le r&eacute;sultat dans la scalaire <code>$valeur</code> qu'elle retourne &agrave; la fin.<br>
Dans le programme principal, l'exemple envoie du code HTML au navigateur. Ce faisant, le sous-programme <code>rechercher_somme</code> est appel&eacute; en tout deux fois. Une fois, la valeur renvoy&eacute;e est sauvegard&eacute;e dans une scalaire nomm&eacute;e <code>$somme_normale</code>, et la deuxi&egrave;me fois dans une liste nomm&eacute;e <code>@somme_cumulee</code>. Ainsi lors du premier appel du sous-programme c'est l'embranchement <code>else</code> qui est ex&eacute;cut&eacute; et lors du deuxi&egrave;me appel, l'embranchement <code>if</code>. Pour le contr&ocirc;le le script sort les r&eacute;sultats respectivement obtenus.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="warn">warn - sortir des avertissements</a></h2>

<p>&Eacute;crit des avertissements sur la sortie standard d'erreur <code>STDERR</code>, sans mettre fin au script (&agrave; la diff&eacute;rence de <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#die"><b>die</b></a>). Pour le port CGI d'un serveur WWW la sortie standard d'erreur est la plupart du temps un fichier Log, dans lequel ces messages d'erreur sont r&eacute;unis. Recherchez le cas &eacute;ch&eacute;ant dans la documentation du serveur Web o&ugrave; et comment les messages d'erreur sont recens&eacute;s.</p>

<p>Attend comme param&egrave;tre:<br>
<b>1.</b> Une liste avec les avertissements qui doivent &ecirc;tre &eacute;crits sur la sortie standard d'erreur <code>STDERR</code>.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $Daten = $ENV{'QUERY_STRING'};

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

if(! -e &quot;/usr/web/temp/idx.txt&quot;) {
  warn(&quot;idx.txt non trouv�. fichier cr�� � nouveau pour cette raison\n&quot;);
  open(FILE,&quot;&gt;/usr/web/temp/idx.txt&quot;);
  print FILE &quot;$donnees\n&quot;;
}
else {
  open(FILE,&quot;&gt;&gt;/usr/web/temp/idx.txt&quot;);
  print FILE &quot;$donnees\n&quot;;
}
print &quot;&lt;b&gt;inscrits dans le fichier:&lt;/b&gt; $donnees\n&quot;;
close(FILE);

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script attend lors de son appel la transmission d'un param&egrave;tre qui est not&eacute; par l'URI derri&egrave;re un point d'interrogation. Le param&egrave;tre transmis consiste en un nom d'utilisateur. Par l'estimation de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/variablesenvironnement.htm"><b>variable d'environnement CGI</b></a> <code>$ENV{'QUERY_STRING'}</code> le script acc&egrave;de aux donn&eacute;es transmises.<br>
Le script envoie du code HTML au navigateur. Pendant ce temps, il essaie avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="entreesortie.htm#open"><b>open</b></a> d'ouvrir un fichier nomm&eacute; <code>/usr/web/temp/idx.txt</code>, pour y &eacute;crire &agrave; la fin les donn&eacute;es transmises. Au cas o&ugrave; le fichier n'existe pas, il est &agrave; nouveau cr&eacute;&eacute; dans l'embranchement <code>if</code> (au cas tout au moins o&ugrave; le r&eacute;pertoire <code>/usr/web/temp</code> existe d&eacute;j&agrave;), mais un avertissement correspondant est &eacute;crit avec <code>warn</code> sur la sortie standard d'erreur. Pour le contr&ocirc;le, il est encore transmis au navigateur quelles donn&eacute;es ont &eacute;t&eacute; &eacute;crites dans le fichier.<br>
La requ&ecirc;te <code>if</code> v&eacute;rifie avec l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="gestionfichiers.htm#test_fichier"><b>op&eacute;rateur de test fichier pour fichiers et r&eacute;pertoires</b></a> <code>-e</code>, si le fichier existe d&eacute;j&agrave;. C'est ce qui va conditionner la r&eacute;action du script.</p>











<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="dateheure.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="dateheure.htm"><b>Fonctions pour les date et heure</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="hashlistes.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="calculs.htm"><b>Fonctions pour les calculs</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
