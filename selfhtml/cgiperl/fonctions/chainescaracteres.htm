<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / Fonctions Perl / Fonctions pour les cha&icirc;nes de caract&egrave;res</title>
<meta name="description"    content="Quelles sont en Perl, les fonctions pour manipuler des cha&icirc;nes de caract&egrave;res, par exemple en extraire des fragments, inverser la casse, la scinder en plusieurs parties etc...">
<meta name="keywords"       content="SELFHTML, Perl, fonctions, fonctions Perl, cha&icirc;nes de caract&egrave;res, Strings, chomp, chop, chr, crypt, index, lc, lcfirst, length, ord, pack, pos, reverse, split, substr, uc, ucfirst, unpack">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/fonctions/chainescaracteres.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // Fonctions Perl == index.htm">
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">



<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Fonctions pour les cha&icirc;nes de caract&egrave;res</h2></td>
</tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#generalites"><b>G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#chomp"><b>chomp</b></a> - &ocirc;ter le dernier caract&egrave;re s'il s'agit d'un s&eacute;parateur<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#chop"><b>chop</b></a> - &ocirc;ter le dernier caract&egrave;re<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#chr"><b>chr</b></a> - rechercher le caract&egrave;re correspondant &agrave; une valeur ASCII<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#crypt"><b>crypt</b></a> - crypter une cha&icirc;ne de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#index"><b>index</b></a> - rechercher la premi&egrave;re occurrence d'une sous-cha&icirc;ne dans une cha&icirc;ne de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#lc"><b>lc</b></a> - changer tous les signes d'une cha&icirc;ne de caract&egrave;res en minuscules<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#lcfirst"><b>lcfirst</b></a> - changer le premier signe d'une cha&icirc;ne de caract&egrave;res en minuscule<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#length"><b>length</b></a> - rechercher le nombre de signes d'une cha&icirc;ne de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#ord"><b>ord</b></a> - rechercher la valeur ASCII d'un caract&egrave;re<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#pack"><b>pack</b></a> - cr&eacute;er des donn&eacute;es binaires<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#pos"><b>pos</b></a> - rechercher l'application de m/[regexp]/g sur  une cha&icirc;ne de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#reverse"><b>reverse</b></a> - inverser l'ordre d'une cha&icirc;ne de caract&egrave;res de l'arri&egrave;re vers l'avant<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#split"><b>split</b></a> - scinder une cha&icirc;ne de caract&egrave;res en plusieurs cha&icirc;nes de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#substr"><b>substr</b></a> - Extraire une sous-cha&icirc;ne de caract&egrave;res d'une cha&icirc;ne de caract&egrave;res<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#uc"><b>uc</b></a> - changer tous les signes d'une cha&icirc;ne de caract&egrave;res en majuscules<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#ucfirst"><b>ucfirst</b></a> - changer le premier signe d'une cha&icirc;ne de caract&egrave;res en majuscule<br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#unpack"><b>unpack</b></a> - r&eacute;soudre des donn&eacute;es binaires<br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>





<h2 class="Sh2"><a class="an" name="generalites">G&eacute;n&eacute;ralit&eacute;s sur ces fonctions</a></h2>

<p>Pour comprendre les fonctions r&eacute;unies ici, vous devez conna&icirc;tre les remarques g&eacute;n&eacute;rales sur les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/chainescaracteres.htm"><b>Cha&icirc;nes de caract&egrave;res (Strings)</b></a> en Perl.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="chomp">chomp - &ocirc;ter le dernier caract&egrave;re s'il s'agit d'un s&eacute;parateur</a></h2>

<p>Retire le dernier signe du cha&icirc;ne de caract&egrave;res. Cela peut &ecirc;tre int&eacute;ressant avant tout pour continuer &agrave; travailler sur des cha&icirc;nes de caract&egrave;res qui comprennent un signe de fin, en r&egrave;gle g&eacute;n&eacute;rale un signe de retour &agrave; la ligne <code>\n</code>. &Agrave; la diff&eacute;rence de la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#chop"><b>chop</b></a>, qui retire le dernier caract&egrave;re dans tous les cas, peu importe de quoi il s'agit, la fonction <code>chomp</code> ne retire que les signes qui sont contenus dans la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/predefini.htm"><b>Variable pr&eacute;d&eacute;finie en Perl</b></a> <code>$/</code>. Par d&eacute;faut, seul le signe de passage &agrave; la ligne <code>\n</code> est sauvegard&eacute; dans cette variable. Si une cha&icirc;ne de caract&egrave;res ne se terminait pas par ce caract&egrave;re de contr&ocirc;le, l'application de <code>chomp</code> n'aurait aucun effet &agrave; l'inverse de <code>chop</code>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la liste de cha&icirc;nes de caract&egrave;res sur lesquelles la fonction doit &ecirc;tre appliqu&eacute;e. Au lieu d'une liste, une cha&icirc;ne de caract&egrave;res distincte ou une scalaire avec une cha&icirc;ne de caract&egrave;res peut &ecirc;tre transmise.</p>

<p>Renvoie le nombre de signes ayant &eacute;t&eacute; retir&eacute;s.</p>

<h3 class="xmp">Exemple - Partie 1 (fichier <var>autoexec.bat</var>):</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
mode con codepage prepare=((850) C:\WINDOWS\COMMAND\ega.cpi)
mode con codepage select=850
keyb gr,,C:\WINDOWS\COMMAND\keyboard.sys
SET PATH=d:\PERL\BIN;&quot;%PATH%&quot;
</pre></td></tr></table>
<h3 class="xmp">Exemple - Partie 2 (script CGI complet en Perl):</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

open(AUTOEXEC, &quot;&lt;c:/autoexec.bat&quot;) || die &quot;Erreur survenue: $!&quot;;
my @lignes = &lt;AUTOEXEC&gt;;
close(AUTOEXEC);
chomp(@lignes);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;pre&gt;\n&quot;;
print &quot;@lignes&quot;;
print &quot;&lt;/pre&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre dans la premi&egrave;re partie un exemple de fichier texte typique avec des lignes, ici le fichier autoexec.bat, tel qu'on le trouve sur les ordinateurs DOS/Windows. Dans le script CGI le fichier est lu et copi&eacute; dans la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/listes.htm"><b>liste</b></a> <code>@lignes</code>. Ensuite la fonction <code>chomp</code> est appliqu&eacute;e &agrave; la liste <code>@lignes</code>. cela permet de retirer de chaque ligne, le signe de passage &agrave; la ligne qui la termine. Pour le contr&ocirc;le, le script sort &agrave; la fin le code HTML dans le navigateur. &Agrave; l'int&eacute;rieur d'un passage <code>&lt;pre&gt;</code> o&ugrave; tout est sortie comme not&eacute;, la liste <code>@lignes</code> est sortie. Comme tous les signes de passage &agrave; la ligne ont &eacute;t&eacute; retir&eacute;s, les &eacute;l&eacute;ments de la liste n'apparaissent plus comme des lignes distinctes mais comme une suite de caract&egrave;res.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="chop">chop - &ocirc;ter le dernier caract&egrave;re</a></h2>

<p>Retire le dernier signe d'une cha&icirc;ne de caract&egrave;res. &Agrave; la diff&eacute;rence de la fonction  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#chomp"><b>chomp</b></a>,  <code>chop</code> retire le dernier caract&egrave;re dans tous les cas, peu importe de quoi il s'agit.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une variable sur laquelle la fonction doit &ecirc;tre appliqu&eacute;e. Une liste peut aussi &ecirc;tre transmise en alternative. Si une liste est transmise, <code>chop</code> retourne le signe retir&eacute; du dernier &eacute;l&eacute;ment de la liste.</p>

<p>Retourne le signe retir&eacute;.</p>

<h3 class="xmp">Exemple avec explications:</h3>

<p>Vous trouverez de plus amples explications sur la diff&eacute;rence entre <code>chop</code> et <code>chomp</code>, ainsi qu'un exemple complet avec explications dans la description de <code>chomp</code>.</p>








<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="chr">chr - rechercher le caract&egrave;re correspondant &agrave; une valeur ASCII</a></h2>

<p>Recherche le caract&egrave;re correspondant &agrave; une valeur num&eacute;rique. Seuls les signes dont la valeur ASCII est sup&eacute;rieure &agrave; 32 peuvent &ecirc;tre repr&eacute;sent&eacute;s &eacute;tant donn&eacute; que les signes dont la valeur est inf&eacute;rieure &agrave; 32 sont ce qu'on appelle les caract&egrave;res de contr&ocirc;le qui ne peuvent pas, en r&egrave;gle g&eacute;n&eacute;rale, &ecirc;tre repr&eacute;sent&eacute;s &agrave; l'&eacute;cran.<br>
La fonction inverse est <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#ord"><b>ord</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la valeur ASCII d&eacute;sir&eacute;e comme nombre.</p>

<p>Renvoie le caract&egrave;re correspondant.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;table border=\&quot;1\&quot; bgcolor=\&quot;#FFFFE0\&quot;&gt;\n&quot;;
my $valeur_signe = 0;
my $signe_ASCII = &quot;&quot;;
for(my $i=0;$i&lt;16;$i++) {
   print &quot;&lt;tr&gt;\n&quot;;
   for(my $j=0;$j&lt;8;$j++) {
      $signe_ASCII = chr($valeur_signe);
      print &quot;&lt;td&gt;$valeur_signe = $signe_ASCII&lt;/td&gt;\n&quot;;
      $valeur_signe++;
   }
   print &quot;&lt;/tr&gt;\n&quot;;
}
print &quot;&lt;/table&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple &eacute;tablit, dans deux boucles <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#for"><b>boucle for</b></a> imbriqu&eacute;es l'une dans l'autre, un tableau HTML avec 16 rang&eacute;es &agrave; 8 colonnes. Dans chaque cellule ainsi cr&eacute;&eacute;e sont sortis un caract&egrave;re ASCII et sa valeur. Pour cela la fonction <code>chr</code> est appliqu&eacute;e, avant l'&eacute;criture dans la cellule de tableau actuelle, sur la valeur actuelle de la scalaire <code>$valeur_signe</code>, qui est incr&eacute;ment&eacute;e de 1 &agrave; chaque passage de boucle et qui accepte par les deux boucles et dans l'ordre, tous les chiffres entre 0 et 127. La valeur renvoy&eacute;e, donc le caract&egrave;re ASCII, est sauvegard&eacute; &agrave; chaque fois dans la scalaire <code>$signe_ASCII</code>. Les deux scalaires sont ensuite sorties dans chaque cellule du tableau de fa&ccedil;on &agrave; ce que la correspondance entre la valeur ASCII et le caract&egrave;re ASCII soit bien claire.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="crypt">crypt - crypter une cha&icirc;ne de caract&egrave;res</a></h2>

<p>Cette fonction vous permet de crypter une cha&icirc;ne de caract&egrave;res. Pour cela, la cha&icirc;ne de caract&egrave;res elle-m&ecirc;me est n&eacute;cessaire ainsi qu'une deuxi&egrave;me cha&icirc;ne de caract&egrave;res qui sert de  &quot;sel dans la soupe&quot; (en anglais <i>salt</i>).<br>
La fonction  <code>crypt</code> n'effectue le cryptage que dans un sens. Une m&eacute;thode de d&eacute;cryptage correspondante n'est pas connue. <code>crypt</code> ne se pr&ecirc;te pas pour cette raison pour r&eacute;aliser des processus de codage et de d&eacute;codage.<br>
<code>crypt</code> correspond au programme syst&egrave;me du m&ecirc;me nom sous Unix et &agrave; la fonction du m&ecirc;me nom en C. En relation avec les pages Web, <code>crypt</code> est utilis&eacute; par exemple pour la  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../divers/htaccess.htm#protection_repertoire"><b>protection des r&eacute;pertoires et des fichiers avec mot de passe</b></a>, pour sauvegarder de fa&ccedil;on crypt&eacute;e les mots de passe des acc&egrave;s autoris&eacute;s.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res &agrave; crypter.<br>
<b>2.</b> le &quot;sel dans la soupe&quot;, une cha&icirc;ne de caract&egrave;res qui doit comporter deux caract&egrave;res librement choisis.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res crypt&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $Input = $ENV{'QUERY_STRING'};
my ($chaine, $sel) = split(/\+/,$Input);
my $chaine_cryptee = crypt($chaine,$sel);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;la cha�ne de caract�res   &lt;b&gt;$chaine&lt;/b&gt; sous forme cod�e donne: &lt;b&gt;$chaine_cryptee&lt;/b&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script CGI en exemple attend la transmission d'un param&egrave;tre qui, lors de l'appel est not&eacute; par l'URI derri&egrave;re un point d'interrogation. Le param&egrave;tre transmis comprend la cha&icirc;ne de caract&egrave;res &agrave; crypt&eacute;e et le &quot;sel dans la soupe&quot;, s&eacute;par&eacute; par un signe plus. Exemple:<br>
<var>http://localhost/cgi-bin/test.pl?Serge+kn</var>.</p>

<p>Le script  en exemple recherche le param&egrave;tre transmis dans la  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/variablesenvironnement.htm"><b>Variable d'environnement CGI</b></a> <code>QUERY_STRING</code> et en sauvegarde la valeur dans la scalaire <code>$input</code>. Pour s&eacute;parer les param&egrave;tres transmis  au signe plus (ici donc s&eacute;parer la cha&icirc;ne de caract&egrave;res &agrave; crypter et le  &quot;sel dans la soupe&quot; l'une de l'autre), la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#split"><b>split</b></a> est appliqu&eacute;e, et sauvegarde le r&eacute;sultat dans une liste constitu&eacute;e des deux scalaires <code>$chaine</code> et <code>$sel</code>. Enfin la fonction <code>crypt</code> &agrave; laquelle les deux scalaires sont transmises comme param&egrave;tres, est appliqu&eacute;e. La valeur renvoy&eacute;e, donc la cha&icirc;ne de caract&egrave;res crypt&eacute;e est sauvegard&eacute;e dans la scalaire <code>$chaine_cryptee</code>. Pour le contr&ocirc;le, le script sort la cha&icirc;ne &agrave; crypter et le r&eacute;sultat du cryptage.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="index">index - rechercher la premi&egrave;re occurrence d'une sous-cha&icirc;ne dans une cha&icirc;ne de caract&egrave;res</a></h2>

<p>Cette fonction recherche dans une cha&icirc;ne de caract&egrave;res, un fragment de cha&icirc;ne de caract&egrave;res quelconque, sans expression r&eacute;guli&egrave;re toutefois. Vous pouvez donc rechercher <code>Sex-Appeal</code> dans une ligne de texte  mais pas <code>Sex.*</code>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res dans laquelle la recherche doit se faire,<br>
<b>2.</b> la cha&icirc;ne de caract&egrave;res qu'il faut y rechercher,<br>
<b>3.</b> (facultatif) la position du signe &agrave; partir de laquelle la recherche doit commencer, par exemple 8 pour &quot;&agrave; partir du 9 &egrave;me signe&quot;. Si vous ne mentionnez pas le troisi&egrave;me param&egrave;tre, la recherche s'effectue d&egrave;s le d&eacute;but de la cha&icirc;ne de caract&egrave;res.</p>

<p>Renvoie la position du signe o&ugrave; le fragment de cha&icirc;ne de caract&egrave;res d&eacute;sir&eacute; a &eacute;t&eacute; trouv&eacute;. S'il n<br>
n'a pas &eacute;t&eacute; trouv&eacute; <code>-1</code> est renvoy&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;dans cette phrase il est question d'amour.&quot;;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
if(index($phrase,&quot;amour&quot;) &gt;= 0) {
  print &quot;dans cette phrase il est question d'amour\n&quot;;
}
else {
  print &quot;dans cette phrase il n'est malheureusement pas question d'amour\n&quot;;
}
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit une scalaire nomm&eacute;e <code>$phrase</code> et lui affecte une valeur. Le script envoie du code HTML au navigateur appelant. Avec la fonction <code>index</code> il recherche s'il est question d'amour dans la scalaire <code>$phrase</code>. C'est le cas si la valeur renvoy&eacute;e par la fonction est plus grande ou &eacute;gale &agrave; 0. Dans l'exemple ci-dessus, le script aboutit dans l'embranchement if parce que dans la phrase o&ugrave; s'effectue la recherche il est question d'amour.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="lc">lc - changer tous les signes d'une cha&icirc;ne de caract&egrave;res en minuscules</a></h2>

<p>Transforme les majuscules en minuscules en laissant les minuscules et tous les autres signes inchang&eacute;s. La fonction inverse correspondante pour les majuscules est  <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#uc"><b>uc</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res qui doit &ecirc;tre trait&eacute;e.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res apr&egrave;s traitement.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

opendir(DIR, &quot;c:/windows&quot;);
my @elements = readdir(DIR);
closedir(DIR);
foreach my $element (@elements) {
  $element = lc($element);
  $element = $element.&quot;\n&quot;;
}

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;pre&gt;\n&quot;;
print &quot;@elements&quot;;
print &quot;&lt;/pre&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple lit sur l'ordinateur avec un syst&egrave;me d'exploitation Windows le r&eacute;pertoire habituel Windows (les commandes correspondantes pour le faire sont <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="entreesortie.htm#opendir"><b>opendir</b></a>, <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="entreesortie.htm#readdir"><b>readdir</b></a>) et <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="entreesortie.htm#closedir"><b>closedir</b></a>. Dans se r&eacute;pertoire, se trouvent en principe une quantit&eacute; de fichiers et de sous-r&eacute;pertoires qui re&ccedil;oivent indiff&eacute;remment des majuscules et des minuscules, en partie &eacute;galement parce qu'ils font partie des anciens programmes en 16 bits. Sur chaque &eacute;l&eacute;ment de la liste <code>@elements</code>, dans laquelle le contenu du r&eacute;pertoire a &eacute;t&eacute; copi&eacute;, la fonction <code>lc</code> et ensuite appliqu&eacute;e dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#for"><b>boucle for</b></a>. La valeur renvoy&eacute;e est sauvegard&eacute;e dans la m&ecirc;me variable actuelle de boucle <code>$element</code> qui est aussi transmise comme cha&icirc;ne de caract&egrave;res &agrave; traiter.<br>
L'ajout du signe de passage &agrave; la ligne dans la m&ecirc;me boucle <code>for</code> n'est en fait que pour la sortie qui va suivre. La sortie cr&eacute;e la liste compl&egrave;te des &eacute;l&eacute;ments de r&eacute;pertoire lus et trait&eacute;s. Tous les &eacute;l&eacute;ments ne contiennent plus que des minuscules.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="lcfirst">lcfirst - changer le premier signe d'une cha&icirc;ne de caract&egrave;res en minuscule</a></h2>

<p>Transforme le premier signe d'une cha&icirc;ne de caract&egrave;res en minuscule dans la mesure o&ugrave; il s'agit d'une majuscule. La fonction correspondante pour les majuscules est <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#ucfirst"><b>ucfirst</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res qui doit &ecirc;tre trait&eacute;e.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res apr&egrave;s traitement.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $mot = &quot;Roubaix&quot;;
print lcfirst($mot);
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple sort simplement un mot, Avant que le mot ne soit sorti, la fonction <code>lcfirst</code> lui est appliqu&eacute;e. La majuscule du d&eacute;but est ainsi transform&eacute;e en minuscule.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="length">length - rechercher le nombre de signes d'une cha&icirc;ne de caract&egrave;res</a></h2>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res souhait&eacute;e.</p>

<p>Renvoie le nombre de caract&egrave;res constituant la cha&icirc;ne de caract&egrave;res.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $URI = $ENV{'QUERY_STRING'};
my $longueur = length($URI);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;a href=\&quot;$URI\&quot;&gt;$URI&lt;/a&gt; a une longueur de $longueur caract&amp;egrave;s!\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script CGI en exemple attend la transmission d'un param&egrave;tre qui est not&eacute; derri&egrave;re un point d'interrogation lors de l'appel par l'URI. Le param&egrave;tre transmis doit lui-m&ecirc;me contenir une URI. Exemple:<br>
<var>http://localhost/cgi-bin/test.pl?http://www.selfhtml.com.fr/</var>.</p>

<p>L'exemple recherche avec <code>length</code> la longueur de l'adresse transmise et sort du code HTML avec un lien &agrave; l'adresse et mention du nombre de caract&egrave;res.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="ord">ord - rechercher la valeur ASCII d'un caract&egrave;re</a></h2>

<p>Recherche pour une signe la valeur ASCII correspondante entre 0 rt 127.
La fonction inverse est  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#chr"><b>chr</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> le signe d&eacute;sir&eacute;.</p>

<p>Renvoie la valeur ASCII correspondante.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $chiffre_magique = &quot;155&quot;;
my $longueur = length($chiffre_magique);
my $total_horizontal = 0;
for(my $i=0; $i&lt;$longueur; $i++) {
   my $signe = substr($chiffre_magique, $i, 1);
   $total_horizontal = $total_horizontal + int(ord($signe));
}

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;Le total horizontal des valeurs ASCII des signes du nombre  $chiffre_magique s'�l�ve � $total_horizontal\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit un &quot;chiffre magique&quot; 155. &quot;Magique&quot; il l'est pour la simple raison qu'il est constitu&eacute; des signes &quot;1&quot;, &quot;5&quot; et encore &quot;5&quot;, et parce que le total des valeurs ASCII de ces trois signes donne 155. Car le 1 a  49 pour valeur ASCII, le 5 a la valeur ASCII 53, et que 49+53+53 donne 155. Dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#for"><b>boucle for</b></a> le nombre est lu chiffre par chiffre. En Perl, cela marche &agrave; l'aide de la fonction <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#substr"><b>substr</b></a>. Sur chacun des chiffre lus la fonction <code>ord</code> est appliqu&eacute;e. La valeur renvoy&eacute;e, donc la valeur ASCII du signe trait&eacute; est ajout&eacute;e &agrave; chaque passage de boucle &agrave; la valeur de la scalaire <code>$total_horizontal</code>. Le script renvoie pour le contr&ocirc;le un r&eacute;sultat correspondant sous forme de code HTML.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="pack">pack - cr&eacute;er des donn&eacute;es binaires</a></h2>

<p>Cr&eacute;e une structure de donn&eacute;es binaire &agrave; partir d'une ou de plusieurs valeurs. L'entr&eacute;e des donn&eacute;es peut &ecirc;tre elle-m&ecirc;me une cha&icirc;ne de caract&egrave;res mais aussi par exemple une liste. Une mention suppl&eacute;mentaire de formatage sert &agrave; contr&ocirc;ler exactement le format binaire des donn&eacute;es du r&eacute;sultat de la conversion &agrave; cr&eacute;er. Pour la mention de formatage, une syntaxe sp&eacute;ciale existe.<br>
La fonction <code>pack</code> est utilis&eacute;e par exemple pour transmettre des cha&icirc;nes de caract&egrave;res &agrave; une base de donn&eacute;es dans lesquelles la base de donn&eacute;es attend des longueurs de champs fixes. Mais aussi d'autres travaux de formatage puissants sont possibles. Ainsi par exemple les donn&eacute;es peuvent elles &ecirc;tre tr&egrave;s simplement cod&eacute;es d'apr&egrave;s le proc&eacute;d&eacute; UUencode &agrave; l'aide de <code>pack</code>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la mention de formatage,<br>
<b>2.</b> l'entr&eacute;e des donn&eacute;es - une cha&icirc;ne de caract&egrave;res ou une liste.</p>

<p>Renvoie la valeur cr&eacute;&eacute;e.</p>

<h3 class="xmp">Exemple 1 d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @enregistrement_1 = (&quot;Anna&quot;,&quot;Lyse&quot;,&quot;07.07.1977&quot;,&quot;f&quot;,&quot;bat. 21&quot;, &quot;Ch. 280&quot;,&quot;depuis 03/1999 assistante commerciale&quot;);
my @enregistrement_2 = (&quot;Gaston&quot;,&quot;Quinoise&quot;,&quot;29.02.1960&quot;,&quot;m&quot;,&quot;bat. 113&quot;, &quot;Ch. 11&quot;,&quot;Direction  section d�veloppement&quot;);
my $Format = &quot;A10 A14 A10 A1 A7 A7 A*&quot;;
my $sortie_1 = pack($Format, @enregistrement_1);
my $sortie_2 = pack($Format, @enregistrement_2);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;pre&gt;\n&quot;;
print &quot;$sortie_1\n&quot;;
print &quot;$sortie_2\n&quot;;
print &quot;&lt;/pre&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple envoie la sortie HTML suivante au navigateur:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
Anna      Lyse          07.07.1977fbat. 21 Ch. 280 depuis 03/1999 assistante commerciale
Gaston    Quinoise      29.02.1960mbat. 113Ch. 11  Direction section d�veloppement
</pre></td></tr></table>


<p>Dans l'exemple sont d'abord d&eacute;finies deux listes <code>@enregistrement_1</code> et <code>@enregistrement_2</code> avec des donn&eacute;es sur l'employ&eacute; du m&ecirc;me genre. Les champs d'une enregistrement doivent tous &ecirc;tre reli&eacute;s &agrave; une cha&icirc;ne de caract&egrave;res de telle fa&ccedil;on qu'elle puisse &ecirc;tre sortie sur une ligne &agrave; l'&eacute;cran ou &eacute;crite dans un fichier. Ici les champs doivent cependant commencer toujours &agrave; la m&ecirc;me position dans la colonne comme il est repr&eacute;sent&eacute; dans la sortie du r&eacute;sultat. Pour y arriver un cha&icirc;ne de caract&egrave;res nomm&eacute;e <code>$Format</code> est d&eacute;finie. Elle d&eacute;finit les largeurs des diff&eacute;rents champs de l'enregistrement. Pour le faire, elle utilise la syntaxe sp&eacute;ciale pour les mentions de formatage de <code>pack</code> . Vous trouverez ci-dessous un <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#pack_sub1"><b>tableau des mentions de formatage</b></a>. Dans l'exemple est d&eacute;finie pour le premier champ (pr&eacute;nom) une largeur de 10 caract&egrave;res avec <code>A10</code>, pour le deuxi&egrave;me champ (nom de famille) une largeur de 14 caract&egrave;res avec <code>A14</code> , et ainsi de suite pour les autres champs. Le dernier champ, mention descriptive, est d&eacute;fini par l'ast&eacute;risque avec <code>A*</code> comme &quot;aussi large que l'est le contenu du champ&quot;.</p>

<p>Enfin la fonction <code>pack</code> est appliqu&eacute;e deux fois, une fois sur  <code>@enregistrement_1</code> et ensuite sur <code>@enregistrement_2</code>. Dans les deux cas, la m&ecirc;me mention de formatage est utilis&eacute;e, &agrave; savoir <code>$Format</code>. La valeur renvoy&eacute;e est sauvegard&eacute;e respectivement dans les cha&icirc;nes de caract&egrave;res <code>$sortie_1</code> ou bien <code>$sortie_2</code>. Ces deux cha&icirc;nes de caract&egrave;res sont envoy&eacute;es pour contr&ocirc;le comme sortie HTML au navigateur. Il est important ici de fixer la sortie dans un passage <code>&lt;pre&gt;</code>, car il n'y a que l&agrave; que la repr&eacute;sentation en colonnes peut &ecirc;tre vue.</p>


<h3 class="xmp">Exemple 2 d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;� Munich, en Bavi�re, Fran&ccedil;ois boit la bi�re dans la f�te&quot;;
my $phrase_UUE = pack(&quot;u&quot;, $phrase);

print &quot;Content-type: text/plain\n\n&quot;;
print print &quot;La phrase '$phrase' donne apr�s codage UU:\n$phrase_UUE&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit une phrase dans la scalaire <code>$phrase</code>. Sur cette scalaire est appliqu&eacute;e la fonction <code>pack</code>. La mention de formatage transmise est ici <code>u</code>. Ceci provoque un codage d'apr&egrave;s le proc&eacute;d&eacute; UUencode. Le r&eacute;sultat est sauvegard&eacute; dans une nouvelle scalaire <code>$phrase_UUE</code>. Pour le contr&ocirc;le, le r&eacute;sultat correspondant est envoy&eacute; au navigateur. La phrase de l'exemple donne en codage UUencode <code>MP"!-=6YI8V@L(&5N($)A=FGH&lt;F4L($9R86[G;VES(&)O:70@;&$@8FGH&lt;F4@
,9&%N&lt;R!L82!FZG1E

</code>.</p>

<h3 class="inf"><a name="pack_sub1">Tableau des mentions de formatage:</a></h3>

<p>Par la mention de formatage, vous contr&ocirc;lez la fa&ccedil;on dont <code>pack</code> traite l'entr&eacute;e des donn&eacute;es.</p>

<table cellpadding="0" cellspacing="0" border="0" bgcolor="#C0C0C0"><tr><td>
<table cellpadding="3" cellspacing="1" border="0">
<tr>
<th bgcolor="#EEEEEE" class="doc" align="left">Type:</th>
<th bgcolor="#EEEEEE" class="doc" align="left">Signification:</th>
<th bgcolor="#EEEEEE" class="doc" align="left">Exemple:</th>
<th bgcolor="#EEEEEE" class="doc" align="left">Explication:</th>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>a[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">cr&eacute;e une cha&icirc;ne de caract&egrave;res de 8 bits. adapt&eacute; &eacute;galement <b>pour des donn&eacute;es binaires</b>. <code>[n]</code> est le nombre pour la largeur du champ. Les octets inutilis&eacute;s sont remplis avec des  <b>caract&egrave;res ASCII de valeur 0 (Hex-0)</b>. Des contenus de champ trop  longs sont coup&eacute;s. au lieu d'un chiffre, <code>*</code> est &eacute;galement permis. La largeur du champ s'aligne ainsi sur le contenu du champ.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@collaborateur = (&quot;03919&quot;,&quot;Dupont&quot;);<br>$sortie = pack(&quot;a5 a15&quot;, &quot;@collaborateurs&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Un enregistrement de collaborateur compos&eacute; d'un num&eacute;ro de laissez-passer et d'un nom est transform&eacute; en une cha&icirc;ne de caract&egrave;res.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>A[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">cr&eacute;e des caract&egrave;res ASCII (de valeur de signe 0-127) et est adapt&eacute; pour cette raison <b>pour les donn&eacute;es texte</b>. <code>[n]</code> est un nombre pour une largeur de champ. Les octets inutilis&eacute;s sont remplis avec des  <b>espaces  (valeur de signe 32)</b>. Sinon comme <code>a</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$sortie = pack(&quot;A80&quot;, &quot;petite ligne&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Une cha&icirc;ne de caract&egrave;res de 80 caract&egrave;res de large est cr&eacute;&eacute;e, m&ecirc;me si le contenu en texte est sensiblement plus petit. Les caract&egrave;res restants sont des espaces.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>Z[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">cr&eacute;e des caract&egrave;res ASCII (de valeur de signe 0-127) et est adapt&eacute; pour cette raison <b>pour les donn&eacute;es texte</b> . <code>[n]</code> est le nombre pour la largeur du champ. Les octets inutilis&eacute;s sont remplis avec des  <b>caract&egrave;res ASCII de valeur 0 (Hex-0)</b>. En outre, la cha&icirc;ne de caract&egrave;res se terminera dans tous les cas avec z&eacute;ro, c'est &agrave; dire que le dernier signe  a toujours la valeur ASCII 0 (Hex-0). Sinon comme <code>A</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$sortie = pack(&quot;A80&quot;, &quot;petite ligne&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Une cha&icirc;ne des caract&egrave;res de 80 caract&egrave;res de large est cr&eacute;&eacute;e, m&ecirc;me su le contenu en texte est sensiblement plus petit. Les caract&egrave;res restants ont la valeur hexad&eacute;cimale 0.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>b[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">cr&eacute;e une cha&icirc;ne de caract&egrave;res de bits dans l'ordre croissant des bits. Le dernier bit de chaque octet de l'entr&eacute;e donne un bit de la sortie. Ce faisant, le dernier uplet  de 8 bits est rempli avec des z&eacute;ros.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$sortie = pack(&quot;b8&quot;,&quot;Exemple&quot;)</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e une cha&icirc;ne caract&egrave;res de 8 bits, donc d'une longueur d'un octet</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>B[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">cr&eacute;e une cha&icirc;ne de caract&egrave;res de bits dans l'ordre d&eacute;croissant des bits. Travaille exactement comme <code>b</code>, mais en inversant l'ordre.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code><code>$sortie = pack(&quot;B8&quot;,&quot;Exemple&quot;)</code></code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e une cha&icirc;ne caract&egrave;res de 8 bits, donc d'une longueur d'un octet</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>c[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le petit c figure pour <b>signed char</b>, des nombres entiers de 8 bits entre -128 et 127 sont trait&eacute;s. <code>[n]</code> est un nombre pour le nombre de caract&egrave;res. Si vous d&eacute;sirez traiter plusieurs signes en une fois, mentionnez le nombre de signes. Au lieu d'un nombre <code>*</code> est &eacute;galement permis. Utilisez le caract&egrave;re de remplacement quand vous voulez traiter un nombre de caract&egrave;res ind&eacute;termin&eacute;.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs_signes = (65,115,116,114,105,100);<br>$sortie = pack(&quot;c6&quot;, @valeurs_signes);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste avec 6 nombres. Avec <code>c6</code> les 6 nombres sont transform&eacute;s en caract&egrave;res (d'apr&egrave;s le jeu de caract&egrave;res ASCII) et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>C[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le grand C figure pour <b>unsigned char</b>, Des chiffres entiers de 8 bits sans signe qui pr&eacute;c&egrave;de sont trait&eacute;s, donc de 0 &agrave; 255. Sinon comme  <code>c</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs_signes = (65,115,116,114,105,100);<br>$sortie = pack(&quot;C6&quot;, @valeurs_signes);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">voir les explications pour <code>c</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>s[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le petit  s figure pour <b>signed short</b>. Des nombres entiers d'une longueur de 16 bits entre -32768 et 32767 sont ici trait&eacute;s en Perl. Sinon comme <code>c</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (-1000,1000);<br>$sortie = pack(&quot;s2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux nombres. Avec <code>s2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>S[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le grand S figure pour <b>unsigned short</b>. Des nombres entiers d'une longueur de 16 bits entre 0 et 65535 sont ici trait&eacute;s en Perl. Sinon comme <code>s</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (1,1000);<br>$sortie = pack(&quot;S2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux nombres. Avec <code>S2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>i[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le petit i figure pour <b>signed integer</b>.  Des nombres entiers d'une longueur d'au moins 32 bits entre -2147483648 et 2147483647 sont ici trait&eacute;s en Perl (Selon l'environnement, m&ecirc;me des longueurs de bits plus &eacute;lev&eacute;es peuvent &ecirc;tre trait&eacute;s et par l&agrave; m&ecirc;me des nombres plus grands). Sinon comme <code>c</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (-100000,100000);<br>$sortie = pack(&quot;i2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux grands nombres. Avec <code>i2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>I[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le grand I figure pour <b>unsigned integer</b>. Des nombres entiers d'une longueur d'au moins 32 bits entre 0 et 429496729<del>6</del><ins>5</ins> sont ici trait&eacute;s en Perl (Selon l'environnement, m&ecirc;me des longueurs de bits plus &eacute;lev&eacute;es peuvent &ecirc;tre trait&eacute;s et par l&agrave; m&ecirc;me des nombres plus grands). Sinon comme <code>i</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (1,100000);<br>$sortie = pack(&quot;I2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux  nombres. Avec <code>I2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>l[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le petit l figure pour <b>signed long</b>. Des nombres entiers d'une longueur d'exactement 32 bits entre -2147483648 et  2147483647 sont trait&eacute;s. Sinon comme <code>c</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (-100000,100000);<br>$sortie = pack(&quot;l2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux  nombres. Avec <code>l2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>L[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e des caract&egrave;res &agrave; partir de donn&eacute;es num&eacute;riques. Le grand L figure pour <b>unsigned long</b>. Des nombres entiers d'une longueur d'exactement 32 bits entre 0 et 4294967295 sont trait&eacute;s. Sinon comme <code>l</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@valeurs = (1,100000);<br>$sortie = pack(&quot;L2&quot;, @valeurs);<br>print &quot;$sortie&quot;;</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'exemple cr&eacute;e une liste de deux  nombres. Avec <code>L2</code> les nombres sont transform&eacute;s en caract&egrave;res ou combinaisons de caract&egrave;res et rassembl&eacute;s dans la cha&icirc;ne de caract&egrave;res <code>$sortie</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>n[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un enregistrement binaire &agrave; partir d'un nombre dans ce qu'on appelle le <i>Network Byte Order</i> (&eacute;galement: <i>Big Endian Order</i>). Des nombres entiers d'une longueur de 16 bits entre  0 et 65535 sont trait&eacute;s. Quand vous voulez traiter plusieurs nombres en une seule fois, mentionnez leur nombre. Au lieu d'un chiffre <code>*</code> est &eacute;galement permis. . Utilisez le caract&egrave;re de remplacement quand vous voulez traiter un nombre de chiffres ind&eacute;termin&eacute;.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$IP_avec_Port = pack(&quot;Nn&quot;, 0xC19EAAC7,80);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans la scalaire <code>$IP_avec_Port</code> l'adresse IP 193.158.170.199 et le nombre 80, qui doit figurer pour le port du serveur, sont sauvegard&eacute;s. L'adresse IP est trait&eacute;e ici comme nombre de 32 bits sous forme hexad&eacute;cimale avec <code>N</code>, le nombre pour le port, plus petit avec <code>n</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>N[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un enregistrement binaire &agrave; partir d'un nombre dans ce qu'on appelle le <i>Network Byte Order</i> (&eacute;galement: <i>Big Endian Order</i>).Des nombres entiers d'une longueur de 32 bits entre  0 et 4294967295 sont trait&eacute;s. Sinon comme <code>n</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$IP = pack(&quot;N&quot;, 0xC19EAAC7);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans la scalaire <code>$IP</code> l'adresse IP 193.158.170.199 est sauvegard&eacute;e. L'adresse IP est trait&eacute;e ici comme nombre de 32 bits sous forme hexad&eacute;cimale avec <code>N</code>. (d&eacute;cimal=hexad&eacute;cimal: 193=C1, 158=9E, 170=AA, 199=C7).</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>v[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un enregistrement binaire &agrave; partir d'un nombre dans ce qu'on appelle le <i>VAX Byte Order</i> (&eacute;galement: <i>Little Endian Order</i>). Des nombres entiers d'une longueur de 16 bits entre  0 et 65535 sont trait&eacute;s. Sinon comme <code>n</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$valeur = pack(&quot;v&quot;, 0xFFFF);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans la scalaire <code>$valeur</code> la valeur la plus &eacute;lev&eacute;e que <code>v</code> puisse traiter est sauvegard&eacute;e, soit, exprim&eacute;e sous forme hexad&eacute;cimale, <code>FFFF</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>V[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un enregistrement binaire &agrave; partir d'un nombre dans ce qu'on appelle le <i>VAX Byte Order</i> (&eacute;galement: <i>Little Endian Order</i>). Des nombres entiers d'une longueur de 32 bits entre 0 et 4294967295 sont trait&eacute;s. Sinon comme <code>n</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$valeur = pack(&quot;v&quot;, 0xFFFFFFFF);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans la scalaire <code>$valeur</code> la valeur la plus &eacute;lev&eacute;e que <code>v</code> puisse traiter est sauvegard&eacute;e, soit, exprim&eacute;e sous forme hexad&eacute;cimale, <code>FFFFFFFF</code>.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>f[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un nombre &agrave; virgule flottante sauvegard&eacute; en binaire. La fa&ccedil;on exacte de sauvegarder d&eacute;pend du type d'ordinateur. Le petit f figure pour <b>float</b>, &agrave; savoir avec  <i>single precision</i>, donc simple pr&eacute;cision. Sinon comme <code>n</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$valeur = pack(&quot;f&quot;,(1/7));</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans une scalaire <code>$valeur</code>, est sauvegard&eacute; le r&eacute;sultat de la division de 1 par 7 en binaire comme nombre &agrave; virgule flottante.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>d[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un nombre &agrave; virgule flottante sauvegard&eacute; en binaire. La fa&ccedil;on exacte de sauvegarder d&eacute;pend du type d'ordinateur. Le petit d figure pour <b>double float</b>, donc avec <i>double precision</i>, double pr&eacute;cision. Sinon comme <code>n</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$valeur = pack(&quot;d&quot;,(1/7));</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans une scalaire <code>$valeur</code> est sauvegard&eacute; le r&eacute;sultat de la division de 1 par 7 en binaire comme nombre &agrave; virgule flottante avec double pr&eacute;cision.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>p[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Sauvegarde l'adresse de la m&eacute;moire de travail d'une cha&icirc;ne de caract&egrave;res termin&eacute;e par z&eacute;ro, comme elle est courante en C. Si vous voulez traiter plusieurs cha&icirc;nes de caract&egrave;res en une seule fois, mentionnez en le nombre. Utilisez le caract&egrave;re de remplacement quand vous voulez traiter un nombre de cha&icirc;nes de caract&egrave;res ind&eacute;termin&eacute;.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@noms = (&quot;Jean&quot;, &quot;Antoine&quot;, &quot;Serge&quot;);<br>
$nombre = @noms;<br>
$valeurs = pack(&quot;p&quot; x $nombre, @noms );<br>
fonction_quelconque($nombre, $valeurs);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans une scalaire <code>$nombre</code> est sauvegard&eacute; le nombre d'&eacute;l&eacute;ments de <code>@noms</code>. Puis la liste <code>@noms</code> est comprim&eacute;e en une seule cha&icirc;ne de caract&egrave;res d'adresses et sauvegard&eacute;e dans <code>$valeurs</code> .<code>$nombre</code> et <code>$valeurs</code> sont ensuite transmises &agrave; une fonction.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>P[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Sauvegarde l'adresse de la m&eacute;moire de travail d'une structure (struct) avec une longueur en octets invariable. Sinon comme <code>p</code>.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>use C::DynaLib::Struct;<br>
Define C::DynaLib::Struct('Adresse',<br>
&nbsp;&nbsp;'pppi' => [qw(nom lieu rue numero)]);<br>
$sortie = pack( 'P', $struct );</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Dans un premier temps, une structure est &eacute;tablie, comme elle est comprise en C par exemple. Dans la scalaire <code>$sortie</code> l'adresse de la structure est ensuite sauvegard&eacute;e.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>u[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e une cha&icirc;ne de caract&egrave;res encod&eacute;e UU &agrave; partie de donn&eacute;es binaires. UU-Encode est un des proc&eacute;d&eacute;s pour transformer des donn&eacute;es en 8 bits (octets) en un sch&eacute;ma 7 bits. Les pi&egrave;ces jointes de courriels &eacute;taient par exemple autrefois transmises avec le codage UU.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$donneesUU = pack(&quot;u&quot;, 1234);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Le nombre binaire <code>1234</code>, une valeur binaire sur la base de 8 bits est transform&eacute; avec le codage UU en caract&egrave;res sur la base de 7 bits.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>x[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e un octet avec la valeur 0 sans &quot;consommer&quot; pour cela un argument de la liste transmise.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$chaine = pack(&quot;A* x A* x&quot;,&quot;Test&quot;,&quot;exemple&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Cr&eacute;e &agrave; partir des deux cha&icirc;nes de caract&egrave;res <code>Test</code> et <code>exemple</code>, une cha&icirc;ne de caract&egrave;res contenant les deux fragments de cha&icirc;nes termin&eacute;es l'une et l'autre par z&eacute;ro.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>X[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Revient en arri&egrave;re de <code>n</code> octets dans la cha&icirc;ne de r&eacute;sultats et efface ceux-ci.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$Serge = pack(&quot;A* X2&quot;, &quot;Sergent&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'instruction cr&eacute;e dans un premier temps avec <code>A*</code> le r&eacute;sultat &quot;Sergent&quot; et retire ensuite les deux derniers octets. Le r&eacute;sultat final est ensuite &quot;Serge&quot;.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>@[n]</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Ram&egrave;ne la cha&icirc;ne de caract&egrave;res provisoire &agrave; une longueur d'exactement <code>n</code> octets. Si la cha&icirc;ne de caract&egrave;res est trop longue, elle est simplement amput&eacute;e, si elle est trop courte, elle est remplie avec deux octets z&eacute;ro. Ensuite la cha&icirc;ne de caract&egrave;res format&eacute;e continue &agrave; &ecirc;tre trait&eacute;e tout &agrave; fait normalement.</td>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>$complet = pack(&quot;A* @3 A*&quot;,&quot;commode&quot;,&quot;plet&quot;);</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">L'instruction cr&eacute;e dans un premier temps avec <code>A*</code> le r&eacute;sultat provisoire &quot;commode&quot;, qui est ensuite raccourci de trois caract&egrave;res avec <code>@3</code>, donc &quot;com&quot;. Enfin &quot;plet&quot; y est encore accroch&eacute;. Le r&eacute;sultat final est &quot;complet&quot;.</td>
</tr>
</table>
</td></tr></table>
<p>&nbsp;</p>


<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="pos">pos - rechercher l'application de m/[regexp]/g sur une cha&icirc;ne de caract&egrave;res</a></h2>

<p><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/expresreg.htm">Les <b>expressions r&eacute;guli&egrave;res</b></a> du type <code>m/[regexp]/g</code> ou tout simplement <code>/[regexp]/g</code> peuvent rechercher dans des cha&icirc;nes de caract&egrave;res partout o&ugrave; l'expression mentionn&eacute;e convient. La fonction  <code>pos</code> donne la position dans la cha&icirc;ne de caract&egrave;res o&ugrave; il faut rechercher &agrave; laquelle la recherche continuerait si l'expression r&eacute;guli&egrave;re &eacute;tait &agrave; nouveau appel&eacute;e &agrave; chaque fois. Par un agencement adroit dans une boucle, vous pouvez &agrave; l'aide de cette fonction trouver toutes les positions des occurrences dans la cha&icirc;ne de caract&egrave;res. Vous pouvez &eacute;galement modifier cette valeur pour influer sur la recherche.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res o&ugrave; doivent s'effectuer les recherches ou la scalaire dans laquelle elle est sauvegard&eacute;e.</p>

<p>Retourne la prochaine position trouv&eacute;e o&ugrave; la recherche se poursuit. Les caract&egrave;res qui la pr&eacute;c&egrave;dent correspondent au mod&egrave;le de recherche.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;

my $phrase = &quot;il est ce qu'il est&quot;;
my $mot_cherche = &quot;est&quot;;
while($phrase =~ /$mot_cherche/g) {
  my $occurrence = pos($phrase) - 3;
  print &quot;\Le mot cherch� &lt;b&gt;$mot_cherche&lt;/b&gt; est trouv� � la position $occurrence&lt;br&gt;\n&quot;;
}
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Le script en exemple montre comment trouver dans une cha&icirc;ne de caract&egrave;res toutes les occurrences d'un certain mod&egrave;le de recherche et comment les rassembler. Dans l'exemple est d&eacute;finie une cha&icirc;ne de caract&egrave;res o&ugrave; les recherches doivent &ecirc;tre effectu&eacute;es <code>$phrase</code> qui se voit affecter une valeur. Le mod&egrave;le qui doit &ecirc;tre recherch&eacute; dans cette phrase est d&eacute;fini dans la scalaire <code>$mot_cherche</code>. Dans une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#while"><b>boucle while</b></a> la recherche du mod&egrave;le s'effectue dans la phrase. l'option <code>g</code> pour &quot;global&quot; derri&egrave;re l'expression r&eacute;guli&egrave;re est ici importante. L'exemple envoie du code HTML au navigateur. Dans la boucle, la position de chaque occurrence du mod&egrave;le est sortie. Ici la fonction <code>pos</code> est appliqu&eacute;e sur la cha&icirc;ne de caract&egrave;res o&ugrave; les recherches doivent &ecirc;tre effectu&eacute;es <code>$phrase</code>. La valeur renvoy&eacute;e est la premi&egrave;re position apr&egrave;s le mod&egrave;le de recherche trouv&eacute;. &Eacute;tant donn&eacute; que l'exemple recherche un mot d&eacute;termin&eacute; &quot;est&quot; qui comporte 3 lettres, la position de d&eacute;part &agrave; laquelle le mot commence est trouv&eacute;e en soustrayant 3. Le r&eacute;sultat est sauvegard&eacute; &agrave; chaque fois dans la scalaire <code>$occurrence</code>. Dans l'exemple, deux lignes en tout sont sorties, &agrave; savoir des avis o&ugrave; le mod&egrave;le est trouv&eacute; pour les positions  3 et 16. La raison: le mot est plac&eacute; deux fois dans la phrase, et la recherche aboutit deux fois sur la position qui suit, donc sur les positions 6 et 19.</p>



<br>&nbsp;
<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="reverse">reverse - inverser l'ordre d'une cha&icirc;ne de caract&egrave;res de l'arri&egrave;re vers l'avant</a></h2>

<p>Inverse une cha&icirc;ne de caract&egrave;res signe par signe. Au lieu d'une cha&icirc;ne de caract&egrave;res, vous pouvez aussi transmettre une liste, dont les &eacute;l&eacute;ments dont reli&eacute;s &agrave; une cha&icirc;ne de caract&egrave;res avant la transformation.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res ou la liste qui doit &ecirc;tre trait&eacute;e.</p>

<p>Renvoie une cha&icirc;ne de caract&egrave;res trait&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $palindrome = reverse(&quot;�SOPE RESTE �LU PAR CETTE CRAPULE ET SE REPOSE&quot;);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;$palindrome\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple, la phrase classique &quot;&Eacute;SOPE RESTE &Eacute;LU PAR CETTE CRAPULE ET SE REPOSE&quot;, que l'on peut aussi bien lire en arri&egrave;re qu'en avant (palindrome), est utilis&eacute;e pour illustrer. La fonction <code>reverse</code> est appliqu&eacute;e &agrave; cette phrase, et la valeur renvoy&eacute;e est sauvegard&eacute;e dans la scalaire <code>$palindrome</code>. Pour le contr&ocirc;le, du code HTML est envoy&eacute; au navigateur, il sort la cha&icirc;ne de caract&egrave;res apr&egrave;s traitement.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="split">split - scinder une cha&icirc;ne de caract&egrave;res en plusieurs cha&icirc;nes de caract&egrave;res</a></h2>

<p>Cr&eacute;e &agrave; partir d'une cha&icirc;ne de caract&egrave;res, une liste de fragments de cha&icirc;nes de caract&egrave;res, et cela sur la base d'une expression r&eacute;guli&egrave;re, qui d&eacute;finit le symbole de s&eacute;paration s&eacute;parant les diff&eacute;rents fragments. Les symboles de s&eacute;paration peuvent avoir une longueur quelconque et ne sont pas obligatoirement identiques &agrave; chaque occurrence.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/expresreg.htm"><b>expression r&eacute;guli&egrave;re</b></a>, qui d&eacute;finit comment la cha&icirc;ne de caract&egrave;res doit &ecirc;tre scind&eacute;e en diff&eacute;rents fragments,<br>
<b>2.</b> la cha&icirc;ne de caract&egrave;res &agrave; traiter.</p>

<p>Renvoie une liste des fragments extraits de la cha&icirc;ne de caract&egrave;res.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;Donne toi bien le bonjour chaque matin&quot;;
my @mots = split(/ /,$phrase);
my $nombre = @mots;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;La phrase &lt;b&gt;$phrase&lt;/b&gt; comprend $nombre mots\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit une phrase. la fonction <code>split</code> est appliqu&eacute;e &agrave; cette phrase. Ici, une expression r&eacute;guli&egrave;re est transmise comme param&egrave;tre, qui ne convient qu'aux espaces. Le deuxi&egrave;me param&egrave;tre transmis est la scalaire <code>$phrase</code>, dans laquelle la phrase est sauvegard&eacute;e. La fonction scinde la phrase en diff&eacute;rents &eacute;l&eacute;ments s&eacute;par&eacute;s les uns des autres par des espaces - dans l'exemple donc, les diff&eacute;rents mots. Ceux-ci sont sauvegard&eacute;s dans la liste <code>@mots</code>. Dans l'exemple, le nombre de mots doit &ecirc;tre recherch&eacute; pour le contr&ocirc;le, ce qui est fait gr&acirc;ce &agrave; l'instruction <code>$nombre = @mots;</code>. L'exemple envoie ensuite du code HTML au navigateur, en sortant le nombre de mots trouv&eacute;s dans la phrase.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="substr">substr - Extraire une sous-cha&icirc;ne de caract&egrave;res d'une cha&icirc;ne de caract&egrave;res</a></h2>

<p>Recherche une sous-cha&icirc;ne de caract&egrave;res &agrave; partir d'une cha&icirc;ne de caract&egrave;res &agrave; une certaine position et la remplace le cas &eacute;ch&eacute;ant par une autre.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res de laquelle il faut extraire,<br>
<b>2.</b> la position du premier signe de la sous-cha&icirc;ne de caract&egrave;res souhait&eacute;e (la position du premier signe dans une cha&icirc;ne de caract&egrave;res est 0, la deuxi&egrave;me est 1 etc...),<br>
<b>3.</b> (facultatif) le nombre de signes que doit comprendre la sous-cha&icirc;ne de caract&egrave;res souhait&eacute;e,<br>
<b>4.</b> (facultatif) une cha&icirc;ne de caract&egrave;res de remplacement</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;Carpe diem!&quot;;
my $longueur_phrase = length($phrase);
my @signes;
for(my $i=0; $i&lt;$longueur_phrase; $i++) {
  $signes[$i] = substr($phrase,$i,1);
}

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
for(my $i=0; $i&lt;$longueur_phrase; $i++) {
  print &quot;Le signe $i est: $signes[$i]&lt;br&gt;\n&quot;;
}
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple, la fonction <code>substr</code> est utilis&eacute;e pour sauvegarder les diff&eacute;rents signes d'une cha&icirc;ne de caract&egrave;res dans une liste. Car il manque en Perl le traitement typique pour C de cha&icirc;ne de caract&egrave;res en tableau de signes. &Agrave; la diff&eacute;rence de C qui ne sauvegarde des cha&icirc;nes de caract&egrave;res que sous forme de tableau, les diff&eacute;rents caract&egrave;res d'une cha&icirc;ne de caract&egrave;res ne peuvent pas &ecirc;tre adress&eacute;s directement en Perl. L'exemple montre une m&eacute;thode - m&ecirc;me si elle est un peu compliqu&eacute;e - qui par la r&eacute;p&eacute;tition des diff&eacute;rents signes de la cha&icirc;ne de caract&egrave;res, traite donc cette derni&egrave;re signe par signe.<br>
Dans l'exemple, une scalaire <code>$phrase</code> est d&eacute;finie avec une valeur. La longueur de la phrase est sauvegard&eacute;e dans la scalaire <code>$longueur_phrase</code>  (par l'application de <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#length"><b>length</b></a>). Enfin, la phrase est copi&eacute;e caract&egrave;re par caract&egrave;re dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../langage/boucles.htm#for"><b>boucle for</b></a> dans la liste  <code>@signes</code>. Pour ce faire, la fonction <code>substr</code> est appliqu&eacute;e de telle fa&ccedil;on qu'un signe de la phrase est &quot;extrait&quot; &agrave; chaque fois. Pour le contr&ocirc;le le script envoie du code HTML au navigateur dans lequel les diff&eacute;rents signes de la phrase sont list&eacute;s l'un sous l'autre.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="uc">uc - changer tous les signes d'une cha&icirc;ne de caract&egrave;res en majuscules</a></h2>

<p>Change les minuscules en majuscules en laissant les majuscules et tous les autres signes inchang&eacute;s. La fonction inverse correspondante pour les majuscules est <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#lc"><b>lc</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la cha&icirc;ne de caract&egrave;res qui doit &ecirc;tre trait&eacute;e.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res apr&egrave;s traitement.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;J'ai envie de crier!&quot;;
$phrase = uc($phrase);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;$phrase\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit une phrase &eacute;crite normalement. Mais chaque passionn&eacute; d'Internet sait que l'on doit utiliser des majuscules quand on a envie de crier &agrave; quelqu'un. Pour cette raison, la fonction <code>uc</code> est appliqu&eacute;e &agrave; la phrase et sauvegarde la valeur renvoy&eacute;e dans cette m&ecirc;me scalaire qui lui a &eacute;t&eacute; transmise en param&egrave;tre. Pour le contr&ocirc;le, du code HTML est envoy&eacute; au navigateur et sort la phrase trait&eacute;e.</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="ucfirst">ucfirst - changer le premier signe d'une cha&icirc;ne de caract&egrave;res en majuscule</a></h2>

<p>change le premier signe d'une cha&icirc;ne de caract&egrave;res en majuscule dans la mesure o&ugrave; il s'agit d'une minuscule. La fonction inverse correspondante pour les majuscules est <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#lcfirst"><b>lcfirst</b></a>.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b>  la cha&icirc;ne de caract&egrave;res qui doit &ecirc;tre trait&eacute;e.</p>

<p>Renvoie la cha&icirc;ne de caract&egrave;res apr&egrave;s traitement.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
my $mot = &quot;serge&quot;;
print ucfirst($mot);
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple sort simplement un mot. Avant que le mot soit sorti, la fonction <code>ucfirst</code> y est &agrave; vrai dire appliqu&eacute;e. La minuscule au d&eacute;but est alors transform&eacute;e en majuscule et change ainsi la signification du mot.</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="unpack">unpack - r&eacute;soudre des donn&eacute;es binaires</a></h2>

<p>R&eacute;tablit (presque) tout ce qui a &eacute;t&eacute; transform&eacute; en donn&eacute;es binaires avec la fonction <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#pack"><b>pack</b></a>, ou des donn&eacute;es binaires cr&eacute;es autrement qui correspondent &agrave; l'un des formats correspondants.</p>

<p><p>Attend comme param&egrave;tre:<br>
<b>1.</b> la mention de formatage, voir <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#pack_sub1"><b>Tableau des mentions de formatage</b></a>,<br>
<b>2.</b> l'entr&eacute;e des donn&eacute;es.</p>

<p>Renvoie la liste des valeurs correspondantes.</p>


<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>
<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;Beam me up, Scotty&quot;;
my @signes = unpack(&quot;C*&quot;, $phrase);
my $total_horizontal = 0;
foreach(@signes) {
   $total_horizontal += int($_);
}

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;Le total horizontal des valeurs ASCII des signes de la phrase  &lt;b&gt;$phrase&lt;/b&gt; est &lt;b&gt;$total_horizontal&lt;/b&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>La mention de formatage <code>C</code> cr&eacute;e pour la fonction <code>pack</code> &agrave; partir de donn&eacute;es num&eacute;riques, les valeurs de signes correspondantes. Pour <code>unpack</code> c'est le contraire. Ici la fonction cr&eacute;e &agrave; partir d'une suite d'octets, qui correspond &agrave; la cha&icirc;ne de caract&egrave;res du codage de signes utilis&eacute; lors de l'entr&eacute;e, une liste de valeurs num&eacute;riques. Dans l'exemple, ceci est utilis&eacute; pour rechercher  le total horizontal de toutes les valeurs ASCII de la phrase. L'exemple envoie du code HTML au navigateur  en sortant le r&eacute;sultat.<br>
Pour de plus amples d&eacute;tails sur les possibilit&eacute;s complexes de cette fonction voir <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#pack"><b>pack</b></a>.</p>






<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="hashlistes.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="hashlistes.htm"><b>Fonctions pour les listes et les hashes</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="../langage/typiquecgi.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../langage/typiquecgi.htm"><b>Travaux CGI typiques en Perl</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Fonctions Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
