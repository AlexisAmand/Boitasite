<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / &Eacute;l&eacute;ments de langage Perl / R&eacute;f&eacute;rences ou pointeurs (Variables)</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Ce que sont les r&eacute;f&eacute;rences ou pointeurs en Perl, comment les d&eacute;clarer et comment s'en servir.">
<meta name="keywords"       content="SELFHTML, Perl, r&eacute;f&eacute;rences, pointeurs">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/langage/references.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // &Eacute;l&eacute;ments de langage Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>R&eacute;f&eacute;rences ou pointeurs (Variables)</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#generalites"><b>G&eacute;n&eacute;ralit&eacute;s sur les r&eacute;f&eacute;rences en Perl</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_scalaires"><b>R&eacute;f&eacute;rences &agrave; des scalaires</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_tableaux"><b>R&eacute;f&eacute;rences &agrave; des tableaux</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_hashes"><b>R&eacute;f&eacute;rences &agrave; des Hashes</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_sousprogrammes"><b>R&eacute;f&eacute;rences &agrave; des sous-programmes</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_descripteurs"><b>R&eacute;f&eacute;rences &agrave; des descripteurs de fichier</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#a_des_references"><b>R&eacute;f&eacute;rences &agrave; des r&eacute;f&eacute;rences</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="generalites">G&eacute;n&eacute;ralit&eacute;s sur les r&eacute;f&eacute;rences en Perl</a></h2>

<p>Si vous vous y connaissez dans le langage C, vous savez ce que sont les pointeurs, et combien ils rendent la programmation efficace. Les r&eacute;f&eacute;rences sont des pointeurs sur d'autres contenus par exemple des variables d&eacute;finies auparavant (peu importe qu'il s'agisse de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="scalaires.htm"><b>scalaires</b></a>, de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>listes</b></a> ou bien de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="hashes.htm"><b>Hashes</b></a>). Par des r&eacute;f&eacute;rences, vous pouvez adresser le contenu d'une variable scalaire simple, d'une liste ou d'un Hash exactement comme par le nom d'origine. De plus. vous pouvez poser des r&eacute;f&eacute;rences &agrave; des  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programmes</b></a>. Les r&eacute;f&eacute;rences sont des scalaires qui ne sauvegardent cependant aucune &quot;valeur exploitable&quot;, mais uniquement des adresses de la m&eacute;moire de travail d'autres variables ou de sous-programmes.</p>

<p>Pour des d&eacute;butants il n'est pas d'abord bien clair &agrave; quoi peuvent servir ces r&eacute;f&eacute;rences ou pointeurs. Car les avantages des r&eacute;f&eacute;rences r&eacute;sident d'une part dans un domaine que Perl &eacute;pargne autrement - &agrave; savoir la gestion efficace de la m&eacute;moire de travail. Cela exige moins de m&eacute;moire de travail et de charge de calcul de transmettre &agrave; une fonction, non pas une cha&icirc;ne de caract&egrave;res avec plusieurs milliers de caract&egrave;res, mais seulement une r&eacute;f&eacute;rence &agrave; cette cha&icirc;ne de caract&egrave;res. D'autre part, les r&eacute;f&eacute;rences sont tout indiqu&eacute;es quand il s'agit d'&eacute;laborer des structures de donn&eacute;es complexes.</p>

<p>Les r&eacute;f&eacute;rences sont &eacute;galement mises en &#339;uvre avant tout dans la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="objets.htm"><b>programmation orient&eacute;e sur l'objet </b></a>, qui est &eacute;galement possible avec Perl depuis la version 5 de l'interpr&eacute;teur Perl. Ainsi, l'acc&egrave;s aux m&eacute;thodes (fonctions et sous-programmes) et aux propri&eacute;t&eacute;s (variables) a lieu par les r&eacute;f&eacute;rences. Il y a m&ecirc;me beaucoup de modules modernes qui utilisent cette technique et utiliser ces modules revient &agrave; dire travailler avec des r&eacute;f&eacute;rences. C'est pourquoi, il est avantageux de toutes fa&ccedil;ons de travailler avec des r&eacute;f&eacute;rences.</p>

<p>La mani&egrave;re de travailler des r&eacute;f&eacute;rences en Perl est diff&eacute;rente par exemple de celle du langage C classique. Les &quot;pointeurs abandonn&eacute;s&quot; de mauvaise r&eacute;putation, donc les r&eacute;f&eacute;rences dont la dur&eacute;e de vie est plus longue que ce sur quoi elles pointent et qui peut conduire en C &agrave; des &eacute;tats incontr&ocirc;l&eacute;s du programme, n'existent pas en Perl.. L&agrave;, la valeur sur laquelle pointe la r&eacute;f&eacute;rence est conserv&eacute; en m&eacute;moire  aussi longtemps que subsiste une r&eacute;f&eacute;rence &agrave; cette valeur.<br>
C'est pour cette raison entre autres qu'une arithm&eacute;tique des pointeurs (effectuer des calculs avec des pointeurs), telle qu'elle est souvent pratiqu&eacute;e en C n'est pas possible en Perl.
</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_scalaires">R&eacute;f&eacute;rences &agrave; des scalaires</a></h2>

<p>Vous pouvez cr&eacute;er un pointeur sur une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="scalaires.htm"><b>scalaire</b></a> et acc&eacute;der par ce pointeur &agrave; la scalaire et &agrave; la valeur qui y est sauvegard&eacute;e.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $phrase = &quot;HTML - How To Make Love&quot;;
my $pointeur_phrase = \$phrase;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;Type de variable et adresse m�moire de \$phrase: $pointeur_phrase&lt;br&gt;\n&quot;;
print &quot;Contenu de \$phrase: ${$pointeur_phrase}\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit d'abord une scalaire habituelle nomm&eacute;e <code>$phrase</code> d&eacute;clar&eacute;e et initialis&eacute;e avec une valeur. Ensuite est d&eacute;clar&eacute;e une r&eacute;f&eacute;rence &agrave; cette scalaire. La r&eacute;f&eacute;rence re&ccedil;oit dans l'exemple le nom <code>$pointeur_phrase</code>. Il s'agit ici du point de vue syntaxe, visiblement d'une scalaire. Ce qui fait de cette scalaire une r&eacute;f&eacute;rence c'est la valeur qui lui est attribu&eacute;e lors de son initialisation. La valeur affect&eacute;e <code>\$phrase</code> signale &agrave; Perl, par la barre oblique invers&eacute;e qui la pr&eacute;c&egrave;de, que dans <code>$pointeur_phrase</code> doit &ecirc;tre sauvegard&eacute;e la r&eacute;f&eacute;rence &agrave; <code>$phrase</code>. Si la barre oblique invers&eacute;e manquait, <code>$pointeur_phrase</code> se verrait simplement affecter une copie de la valeur de <code>$phrase</code>.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant. Ici, il sort deux informations: d'une part le contenu de <code>$pointeur_phrase</code> (afin que l'on voit ce qui est sauvegard&eacute; dans une telle r&eacute;f&eacute;rence - la valeur sortie contient  quelque chose comme <code>SCALAR(0xb67d20)</code>), et d'autre part le contenu de <code>$phrase</code>, cependant pas par <code>$phrase</code> m&ecirc;me, mais &agrave; l'aide de la r&eacute;f&eacute;rence <code>$pointeur_phrase</code>. Le code sorti dans l'exemple contient en outre une autre petite emb&ucirc;che qui peut d&eacute;concerter: &agrave; l'endroit o&ugrave; <code>\$phrase</code> est plac&eacute; dans l'instruction <code>print</code>, la barre oblique invers&eacute;e a une autre signification qu'auparavant lors de l'initialisation de la r&eacute;f&eacute;rence! &Agrave; cet endroit la barre oblique invers&eacute;e sert &agrave;  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="chainescaracteres.htm#maskierung"><b>masquer</b></a> le signe <code>$</code>. En le masquant on obtient qu'&agrave; cet endroit la cha&icirc;ne de caract&egrave;res  <code>$phrase</code> soit sortie et non pas par exemple la valeur sauvegard&eacute;e dans <code>$phrase</code>.</p>

<p>Pour pouvoir acc&eacute;der avec une r&eacute;f&eacute;rence &agrave; la valeur sauvegard&eacute;e, vous devez utiliser la syntaxe comme montr&eacute; dans l'exemple avec <code>${$pointeur_phrase}</code>. La r&eacute;f&eacute;rence dans le cas de <code>$pointeur_phrase</code>, est not&eacute;e ici entre parenth&egrave;ses <b>accolades</b>, et pr&eacute;c&eacute;dant imm&eacute;diatement la parenth&egrave;se accolade d'ouverture est encore not&eacute; un signe dollar. <code>${$pointeur_phrase}</code> donne donc dans l'exemple <code>HTML - How To Make Love</code>.</p>

<h3 class="inf">Attention:</h3>

<p>La syntaxe pour d&eacute;r&eacute;f&eacute;rencer avec les parenth&egrave;ses accolades est la variante qui fonctionne dans tous les cas. Perl propose aussi la possibilit&eacute; d'abr&eacute;ger la notation. au lieu de <code>${$pointeur_phrase}</code> vous pouvez &eacute;galement noter <code>$$pointeur_phrase</code>, si &ccedil;a ne pr&ecirc;te pas &agrave; confusion dans le contexte.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_tableaux">R&eacute;f&eacute;rences &agrave; des tableaux</a></h2>

<p>Vous pouvez cr&eacute;er un pointeur sur un  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>Array</b></a> et acc&eacute;der par ce pointeur &agrave; tous ses &eacute;l&eacute;ments.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @phrases = ( &quot;HTML - How To Make Love. &quot;,
               &quot;XHTML - Extended How To Make Love. &quot;,
               &quot;XML - Extended Making Love.&quot; );
my $pointeur_phrases = \@phrases;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;Type de variable et adresse m�moire de \@phrases: $pointeur_phrases&lt;br&gt;\n&quot;;
print &quot;contenu de \@phrases: @{$pointeur_phrases} &lt;br&gt;\n&quot;;
print &quot;contenu de \$phrases[2]: $pointeur_phrases-&gt;[2] &lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple est d'abord d&eacute;clar&eacute; un tableau nomm&eacute; <code>@phrases</code> et initialis&eacute; avec des valeurs de d&eacute;part. Ensuite est d&eacute;clar&eacute;e une r&eacute;f&eacute;rence &agrave; ce tableau, nomm&eacute;e <code>$pointeur_phrases</code>. La r&eacute;f&eacute;rence proprement dite est une scalaire, ce qu'on remarque au signe dollar qui le pr&eacute;c&egrave;de. Une r&eacute;f&eacute;rence au tableau est affect&eacute;e &agrave; cette scalaire par la valeur affect&eacute;e  <code>\@phrases</code>. La barre oblique invers&eacute;e signale &agrave; Perl qu'il s'agit d'une r&eacute;f&eacute;rence. Si la barre oblique invers&eacute;e manquait,  <code>$pointeur_phrases</code> ne sauvegarderait d'ailleurs que le nombre des &eacute;l&eacute;ments de tableau de <code>@phrases</code>!</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant et sort ici diff&eacute;rentes donn&eacute;es. Dans la premi&egrave;re instruction <code>print</code> est sortie pour une meilleure compr&eacute;hension, la valeur sauvegard&eacute;e de la r&eacute;f&eacute;rence <code>$pointeur_phrases</code>  - il s'agit de quelque chose comme <code>ARRAY(0xb65b28)</code>.<br>
La deuxi&egrave;me instruction <code>print</code> sort le contenu complet du tableau. il est acc&eacute;d&eacute; au tableau, comme un tout par la r&eacute;f&eacute;rence avec la syntaxe <code>@{$pointeur_phrases}</code>. La r&eacute;f&eacute;rence figure donc dans des parenth&egrave;ses accolades pr&eacute;c&eacute;d&eacute;e imm&eacute;diatement d'un signe &quot;chez&quot; <code> @</code> qui d&eacute;signe la liste.<br>
Dans la troisi&egrave;me instruction <code>print</code> est sortie un &eacute;l&eacute;ment d&eacute;termin&eacute; de  <code>@phrases</code> &agrave; savoir le troisi&egrave;me &eacute;l&eacute;ment de la liste. Not&eacute; directement, cet &eacute;l&eacute;ment pourrait &ecirc;tre adress&eacute; avec <code>$phrases[2]</code>. Dans l'exemple cependant, il est adress&eacute; avec la r&eacute;f&eacute;rence et la syntaxe est ici <code>$pointeur_phrases-&gt;[2]</code>. La r&eacute;f&eacute;rence est donc not&eacute;e suivie de l'op&eacute;rateur fl&egrave;che <code>-&gt;</code> et de l'&eacute;l&eacute;ment de liste d&eacute;sir&eacute; entre crochets. Il est important ici que dans ce contexte (donc &agrave; l'int&eacute;rieur de cha&icirc;nes de caract&egrave;res, ) aucun espace ne soit plac&eacute; &agrave; l'int&eacute;rieur de <code>$pointeur_phrases-&gt;[2]</code>.</p>

<p>Les barres obliques invers&eacute;es devant <code>\@phrases</code> et <code>\$phrases[2]</code> dans les instructions <code>print</code> n'ont, comme dans l'exemple sur les scalaires, rien &agrave; voir avec les r&eacute;f&eacute;rences, mais servent &agrave;  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="chainescaracteres.htm#masquer"><b>masquer des signes dans des cha&icirc;nes de caract&egrave;res</b></a>.</p>

<h3 class="inf">Attention:</h3>

<p>Comme pour les r&eacute;f&eacute;rences de scalaires. Perl vous propose aussi diff&eacute;rentes possibilit&eacute;s de notation. Ainsi vous pouvez &eacute;galement noter <code>@$pointeur_phrases</code> au lieu de <code>@{$pointeur_phrases}</code> et au lieu de <code>$pointeur_phrases-&gt;[2]</code> vous pouvez &eacute;galement noter la variante &quot;des  origines&quot; <code>${$pointeur_phrases}[2]</code> ou bien employer la variante <code>$$pointeur_phrases[2]</code>.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_hashes">R&eacute;f&eacute;rences &agrave; des Hashes</a></h2>

<p>Vous pouvez cr&eacute;er un pointeur sur un  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="hashes.htm"><b>Hash</b></a> et acc&eacute;der par cette r&eacute;f&eacute;rence au hash en tant que tout ainsi qu'&agrave; ses cl&eacute;s et valeurs.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %langages = ( HTML =&gt; &quot;How To Make Love. &quot;,
                 XHTML =&gt; &quot;Extended How To Make Love. &quot;,
                 XML =&gt; &quot;Extended Making Love. &quot; );
my $pointeur_langages = \%langages;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;Type de variable et adresse m�moire de %langages: $pointeur_langages&lt;br&gt;\n&quot;;
print &quot;Contenu de  %langages: &quot;, %{$pointeur_langages},&quot; &lt;br&gt;\n&quot;;
print &quot;Signification de XML: $pointeur_langages-&gt;{XML} &lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple est d'abord d&eacute;clar&eacute; un hash nomm&eacute; <code>%langages</code> qui est initialis&eacute; avec des valeurs de d&eacute;part. Ensuite est d&eacute;clar&eacute;e une r&eacute;f&eacute;rence &agrave; ce hash nomm&eacute;e <code>$pointeur_langages</code>. La r&eacute;f&eacute;rence elle m&ecirc;me est une scalaire, qui devient r&eacute;f&eacute;rence par la valeur <code>\%langages</code> qui lui est affect&eacute;e. La barre oblique invers&eacute;e devant le signe pourcentage signale la r&eacute;f&eacute;rence au hash.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant et sort ici diff&eacute;rentes donn&eacute;es. Dans la premi&egrave;re instruction <code>print</code> est sortie pour une meilleure compr&eacute;hension, la valeur sauvegard&eacute;e de la r&eacute;f&eacute;rence <code>$pointeur_langages</code> - il s'agit de quelque chose comme <code>HASH(0xb65b28)</code>.<br>
La deuxi&egrave;me instruction <code>print</code> sort le contenu complet du hash. Il est acc&eacute;d&eacute; au hash, comme un tout par la r&eacute;f&eacute;rence avec la syntaxe <code>%{$pointeur_langages}</code>. La r&eacute;f&eacute;rence figure donc dans des parenth&egrave;ses accolades pr&eacute;c&eacute;d&eacute;e imm&eacute;diatement d'un signe &quot;chez&quot; <code>@</code> qui d&eacute;signe le hash.<br>
Dans la troisi&egrave;me instruction <code>print</code> l'&eacute;l&eacute;ment du hash est adress&eacute; directement avec la cl&eacute; <code>XML</code>. Not&eacute; directement, cet &eacute;l&eacute;ment pourrait &ecirc;tre adress&eacute; avec <code>$langages{XML}</code>. Dans l'exemple cependant, il est adress&eacute; par la r&eacute;f&eacute;rence et la syntaxe pour le faire est <code>$pointeur_langages-&gt;{XML}</code>. La r&eacute;f&eacute;rence est donc not&eacute;e suivie de l'op&eacute;rateur fl&egrave;che <code>-&gt;</code> et de la cl&eacute; du hash souhait&eacute;e entre parenth&egrave;ses accolades. &agrave; l'int&eacute;rieur de <code>$pointeur_langages-&gt;{XML}</code> aucun espace ne peut &ecirc;tre plac&eacute; dans ce contexte (donc &agrave; l'int&eacute;rieur de cha&icirc;nes de caract&egrave;res).</p>

<h3 class="inf">Attention:</h3>

<p>Comme pour les r&eacute;f&eacute;rences de tableaux, Perl vous propose aussi diff&eacute;rentes possibilit&eacute;s de notation. Ainsi vous pouvez &eacute;galement noter <code>%$pointeur_langages</code> au lieu de <code>%{$pointeur_langages}</code>, et au lieu de <code>$pointeur_langages->{XML}</code> vous pouvez &eacute;galement employer les variantes <code>${$pointeur_langages}{XML}</code> ou bien <code>$$pointeur_langages{XML}</code>.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_sousprogrammes">R&eacute;f&eacute;rences &agrave; des sous-programmes</a></h2>

<p>Vous pouvez fixer une r&eacute;f&eacute;rence &agrave; un  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programme</b></a> et appeler le sous-programme par cette r&eacute;f&eacute;rence.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

sub valeur_hasard {
 return int(rand(1000) + 1);
}

my $resultat = valeur_hasard();
my $pointeur_sousprogramme = \&amp;valeur_hasard;
my $Referenzergebnis = &amp;{$pointeur_sousprogramme}();

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;R�sultat: $resultat&lt;br&gt;\n&quot;;
print &quot;Pointeur sur le sousprogramme: $pointeur_sousprogramme&lt;br&gt;\n&quot;;
print &quot;R�sultat de la r�f�rence: $resultat_reference&lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple est not&eacute; un sous-programme nomm&eacute; <code>valeur_hasard</code>. Ce sous-programme recherche &agrave; l'aide des fonctions Perl <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/calculs.htm#rand"><b>rand</b></a> et <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/calculs.htm#int"><b>int</b></a> un nombre al&eacute;atoire entre 1 et 1000 et retourne le nombre trouv&eacute; avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/controle.htm#return"><b>return</b></a> .</p>

<p>Avec l'instruction <code>my $resultat = &amp;valeur_hasard();</code> le sous-programme est appel&eacute;. La valeur renvoy&eacute;e, donc le nombre al&eacute;atoire trouv&eacute;, est sauvegard&eacute; dans la scalaire <code>resultat</code>.<br>
Avec l'instruction <code>my $pointeur_sousprogramme = \&amp;valeur_hasard;</code> n'est d&eacute;clar&eacute;e par contre qu'une r&eacute;f&eacute;rence au sous-programme <code>valeur_hasard</code>. La fonction <b>n</b>'en est <b>pas</b> pour autant appel&eacute;e! La syntaxe <code>\&amp;valeur_hasard</code> lors de l'affectation de valeur fait en sorte qu'il s'agisse d'une r&eacute;f&eacute;rence. La barre oblique invers&eacute;e signale la r&eacute;f&eacute;rence et le &quot;ET&quot; commercial <code>&amp;</code> un sous-programme. Derri&egrave;re suit le nom du sous-programme.<br>
Avec l'instruction <code>my $resultat_reference = &amp;{$pointeur_sousprogramme}();</code> le sous-programme <code>valeur_hasard</code> est &agrave; nouveau appel&eacute;. Cette fois cependant pas directement comme dans la premi&egrave;re instruction mais par la r&eacute;f&eacute;rence d&eacute;finie auparavant. La syntaxe est telle ici que la r&eacute;f&eacute;rence figure entre parenth&egrave;ses accolades et qu'elle est pr&eacute;c&eacute;d&eacute;s du &quot;ET&quot; commercial <code>&amp;</code>.<br>
Les parenth&egrave;ses normales vides derri&egrave;re le nom ne sont pas absolument n&eacute;cessaires. La valeur renvoy&eacute;e par le deuxi&egrave;me appel de <code>valeur_hasard</code> est sauvegard&eacute;e dans la scalaire <code>$resultat_reference</code>.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant en sortant les trois valeurs de <code>$resultat</code>, <code>$pointeur_sousprogramme</code> et <code>$resultat_reference</code>. Tandis que les deux scalaires  <code>$resultat</code> et <code>$resultat_reference</code> contiennent un nombre al&eacute;atoire entre 1 et 1000, le contenu de <code>$pointeur_sousprogramme</code> n'est que le type de pointeur et l'adresse m&eacute;moire, par exemple quelque chose comme <code>CODE(0xb65b28)</code>.</p>

<h3 class="inf">Attention:</h3>
<p>
Perl vous offre aussi pour d&eacute;r&eacute;f&eacute;rencer les r&eacute;f&eacute;rences de code diff&eacute;rentes possibilit&eacute;s de notation. Ainsi vous pouvez, de fa&ccedil;on analogue aux r&eacute;f&eacute;rences de scalaires et de tableaux noter &eacute;galement <code>&$pointeur_sousprogramme()</code> ou bien <code>$pointeur_sousprogramme->()</code> au lieu de <code>&{$pointeur_sousprogramme}()</code>.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_descripteurs">R&eacute;f&eacute;rences &agrave; des descripteurs de fichier</a></h2>

<p>Avec les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm"><b>Fonctions pour l'entr&eacute;e/sortie et pour la lecture/&eacute;criture de donn&eacute;es</b></a> Perl vous avez beaucoup &agrave; faire avec les descripteurs de fichier. Les descripteurs de fichier ne se comportent pas autrement que des variables ordinaires. Ainsi vous ne pouvez pas leur affecter de valeur directe, mais seulement utiliser les valeurs affect&eacute;es par l'interpr&eacute;teur Perl lui-m&ecirc;me, en cas de besoin au descripteur de fichier. Les valeurs contiennent des informations internes &agrave; Perl sur le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#generalites"><b>canal d'entr&eacute;e/sortie</b></a>, et auxquelles vous acc&eacute;dez par le descripteur de fichier. Pour vous en tant qu'utilisateur, seul est int&eacute;ressant le nom du descripteur, et l'interpr&eacute;teur Perl s'occupe lui-m&ecirc;me du reste.<br>
Vous pouvez de la m&ecirc;me fa&ccedil;on poser une r&eacute;f&eacute;rence &agrave; un tel descripteur de fichier. Il y a ici une autre particularit&eacute; par rapport aux variables habituelles en Perl: Vous n'avez pas besoin pour utiliser ce descripteur de fichier de d&eacute;r&eacute;f&eacute;rencer explicitement cette r&eacute;f&eacute;rence. Cela est r&eacute;gl&eacute; par l'interpr&eacute;teur Perl automatiquement quand c'est n&eacute;cessaire.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

open(FICHIER, &quot;&lt;/tmp/server.cfg&quot;) || die &quot;pas trouv�&quot;;
my $reference_descripteur = \*FICHIER;
my @lignes = &lt;$reference_descripteur&gt;;
my $nombre_lignes = @lignes;
my $nom_descripteur = *{$reference_descripteur};
close($reference_descripteur);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;Lignes lues: $nombre_lignes&lt;br&gt;\n&quot;;
print &quot;$reference_descripteur&lt;br&gt;\n&quot;;
print &quot;$nom_descripteur&lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple ouvre un fichier avec la fonction Perl <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#open"><b>open</b></a>. Ici <code>FICHIER</code> est le nom pour le descripteur de fichier par lequel il est acc&eacute;d&eacute; au fichier. Ce nom peut &ecirc;tre choisi librement dans le cadre des <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="intro.htm#attribution_nom"><b>r&egrave;gles pour l'attribution de noms</b></a>, cependant vous <b>ne</b> devez <b>pas</b> par convention utiliser de minuscules. Quand vous utilisez l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="intro.htm#appel"><b>option w</b></a> de l'interpr&eacute;teur Perl, vous recevez un avertissement quand le nom est mal choisi. Normalement le contenu du fichier pourrait &ecirc;tre lu avec une instruction telle que <code>my&nbsp;@lignes&nbsp;=&nbsp;&lt;FICHIER&gt;;</code>. Dan l'exemple ci-dessus cependant la lecture est effectu&eacute;e indirectement par une r&eacute;f&eacute;rence.<br>
Avec l'instruction <code>my $reference_descripteur = \*FICHIER;</code> un pointeur sur le nom  <code>FICHIER</code> est d&eacute;clar&eacute; (ou plut&ocirc;t sur l'enregistrement dans le tableau des symboles internes &agrave; Perl). La barre oblique invers&eacute;e au d&eacute;but de l'affectation indique la r&eacute;f&eacute;rence et l'ast&eacute;risque <code>*</code> un enregistrement dans le tableau des symboles (ce qu'on appelle un  Typeglob). Derri&egrave;re suit le nom du descripteur.<br>
Avec <code>my @lignes = &lt;$reference_descripteur&gt;;</code> le contenu du fichier peut maintenant &ecirc;tre lu par la r&eacute;f&eacute;rence au descripteur de fichier. Au lieu de <code>&lt;FICHIER&gt;</code> est donc simplement not&eacute; <code>&lt;$reference_descripteur&gt;</code>. La r&eacute;f&eacute;rence au descripteur est r&eacute;solue par l'interpr&eacute;teur Perl lui-m&ecirc;me.<br>
L'instruction <code>my $nombre_lignes = @lignes;</code> ne recherche simplement que le nombre de lignes pour une sortie de contr&ocirc;le ult&eacute;rieure.<br>
Dans l'instruction <code>my $nom_descripteur = *{$reference_descripteur};</code> la r&eacute;f&eacute;rence au descripteur de fichier est d&eacute;r&eacute;f&eacute;renc&eacute;e encore une fois explicitement. Dans cette notation, donc dans les parenth&egrave;ses accolades et avec l'ast&eacute;risque qui pr&eacute;c&egrave;de, le <b>nom</b>  du descripteur sauvegard&eacute; dans <code>$reference_descripteur</code> est recherch&eacute;, dans l'exemple il s'agit donc de  <code>FICHIER</code>. Ce faisant, l'espace de nommage actuel (package) est bien s&ucirc;r &eacute;galement trouv&eacute; (voir aussi &agrave; ce sujet la fonction Perl <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/modules.htm#package"><b>package</b></a>). La valeur effectivement trouv&eacute;e dans l'exemple ci-dessus est <code>*main::FICHIER</code>. Ici <code>main</code> est simplement l'espace de nommage par d&eacute;faut de Perl quand - comme dans l'exemple &eacute;galement ici - aucun autre espace de nommage n'a &eacute;t&eacute; mentionn&eacute;. <code>main::FICHIER</code> est d&eacute;sign&eacute; comme <b>nom pleinement qualifi&eacute;</b> , &eacute;tant donn&eacute; qu'il exprime exactement dans quel espace de nommage peut &ecirc;tre trouv&eacute; <code>FICHIER</code>.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant et sort les valeurs trouv&eacute;es. La valeur de <code>$reference_descripteur</code> est quelque chose comme <code>GLOB(0xb67968)</code> o&ugrave; <code>GLOB</code> figure pour le type de r&eacute;f&eacute;rence &quot;Typeglob&quot;.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="a_des_references">R&eacute;f&eacute;rences &agrave; des r&eacute;f&eacute;rences</a></h2>


<p>De prime abord, travailler avec des r&eacute;f&eacute;rences &agrave; des r&eacute;f&eacute;rences peut para&icirc;tre un pur exercice de style th&eacute;orique. Il peut s'av&eacute;rer tout &agrave; fait judicieux cependant  pour des structures de donn&eacute;es complexes de mettre en &#339;uvre de telles r&eacute;f&eacute;rences. Pour l'acc&egrave;s &agrave; des donn&eacute;es distinctes d'une telle structure de donn&eacute;es complexe justement, Perl atteint dans la notation une beaut&eacute; assur&eacute;ment classique.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $maison = &quot;maison particuli�re pr�fabriqu�e&quot;;
my @voitures = (&quot;Citr&amp;euml;n&quot;,&quot;Peugeot&quot;,&quot;Renault&quot;,&quot;Porsche&quot;);
my %famille = (femme =&gt; &quot;Fanny&quot;, fille =&gt; &quot;Anne&quot;, fils =&gt; &quot;Florian&quot;);
my %pointeur_hash = (pointeur_maison =&gt; \$maison, pointeur_voiture =&gt; \@voitures, pointeur_famille =&gt; \%famille);
my $Zeiger = \%pointeur_hash;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;(1.) $pointeur-&gt;{pointeur_maison}&lt;br&gt;\n&quot;;
print &quot;(2.) ${$pointeur-&gt;{pointeur_maison}}&lt;br&gt;\n&quot;;
print &quot;(3.) $pointeur-&gt;{pointeur_voiture}&lt;br&gt;\n&quot;;
print &quot;(4.) @{$pointeur-&gt;{pointeur_voiture}}&lt;br&gt;\n&quot;;
print &quot;(5.) $pointeur-&gt;{pointeur_voiture}-&gt;[2]&lt;br&gt;\n&quot;;
print &quot;(6.) $pointeur-&gt;{pointeur_voiture}[3]&lt;br&gt;\n&quot;;
print &quot;(7.) $pointeur-&gt;{pointeur_famille}&lt;br&gt;\n&quot;;
print &quot;(8.)&quot;, %{$pointeur-&gt;{pointeur_famille}},&quot;&lt;br&gt;\n&quot;;
print &quot;(9.) $pointeur-&gt;{pointeur_famille}-&gt;{femme}&lt;br&gt;\n&quot;;
print &quot;(10.) $pointeur-&gt;{pointeur_famille}{fils}&lt;br&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;clare tout d'abord une scalaire <code>$maison</code>, un tableau <code>@voitures</code> et un hash <code>%famille</code>. Ensuite, des pointeurs ou r&eacute;f&eacute;rences &agrave; ces variables sont d&eacute;finies. &Eacute;tant donn&eacute; cependant qu'il s'agit d'une s&eacute;rie de pointeurs, ils ne sont pas d&eacute;clar&eacute;s s&eacute;par&eacute;ment comme scalaires mais dans un hash nomm&eacute; <code>%pointeur_hash</code>. Chaque &eacute;l&eacute;ment d'un hash ou d'une liste peut certes sauvegarder une scalaire et, &eacute;tant donn&eacute; que les r&eacute;f&eacute;rences sont des scalaires, il n'y a aucun probl&egrave;me &agrave; cr&eacute;er des hashes ou des listes de r&eacute;f&eacute;rences. Le hash de l'exemple contient par exemple comme affectation une cl&eacute; nomm&eacute;e <code>pointeur_maison</code>, avec laquelle une r&eacute;f&eacute;rence &agrave; la scalaire  <code>maison</code> est li&eacute;e, ce qu'on peut voir &agrave; la barre oblique qui pr&eacute;c&egrave;de <code>\$maison</code>. Il en va de m&ecirc;me pour les autres r&eacute;f&eacute;rences dans le hash.</p>

<p>Maintenant, on pourrait bien acc&eacute;der par la variable hash <code>%pointeur_hash</code> au r&eacute;f&eacute;rences et &agrave; leurs valeurs. Dans l'exemple pourtant est encore d&eacute;clar&eacute;e une scalaire nomm&eacute;e <code>$pointeur</code>, qui est une r&eacute;f&eacute;rence au hash <code>%pointeur_hash</code>, ce qu'on peut voir &agrave; la  notation <code>\%pointeur_hash</code> pour l'affectation. <code>$pointeur</code> est ainsi une r&eacute;f&eacute;rence au hash constitu&eacute; de r&eacute;f&eacute;rences.</p>

<p>L'exemple de script r&eacute;unit ainsi toutes sortes de donn&eacute;es et peut lors de la sortie de code HTML au navigateur envoyer les donn&eacute;es les plus diverses. Pour la clart&eacute;, les sorties sont num&eacute;rot&eacute;es:</p>

<p>
(1.) donne quelque chose comme: <code>SCALAR(0xb65b7c)</code>, car <code>$pointeur-&gt;{pointeur_maison}</code> &eacute;quivaut &agrave; la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_maison</code>, qui est la r&eacute;f&eacute;rence &agrave;  <code>\$maison</code>.<br>
(2.) sort: <code>maison particuli&egrave;re pr&eacute;fabriqu&eacute;e</code>, car <code>${$pointeur-&gt;{pointeur_maison}}</code> &eacute;quivaut &agrave; la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_maison</code>, donc la valeur de la r&eacute;f&eacute;rence  <code>\$maison</code>. Pour rechercher la valeur de la valeur, l'expression du  (1.) est simplement plac&eacute;e encore une fois entre parenth&egrave;ses accolades et pr&eacute;c&eacute;d&eacute;e d'un <b>signe dollar</b>.<br>
(3.) donne quelque chose comme: <code>ARRAY(0xb65b4c)</code>, car <code>$pointeur-&gt;{pointeur_voiture}</code> &eacute;quivaut &agrave; la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_voiture</code>, et c'est la r&eacute;f&eacute;rence <code>\@Auto</code>.<br>
(4.) sort: <code>Citr&euml;n Peugeot Renault  Porsche</code>, car <code>@{$pointeur-&gt;{pointeur_voiture}}</code> &eacute;quivaut &agrave; la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_voiture</code>, donc en fin de compte la valeur de la r&eacute;f&eacute;rence <code>\@voitures</code>, et c'est la liste compl&egrave;te <code>@voitures</code>. Pour rechercher la valeur de la valeur, l'expression du  (3.) est simplement plac&eacute;e encore une fois entre parenth&egrave;ses accolades et pr&eacute;c&eacute;d&eacute;e d'un signe <b>&quot;chez&quot;</b> <code>@</code>.<br>
(5.) sort: <code>Renault</code>, car <code>$pointeur-&gt;{pointeur_voiture}-&gt;[2]</code>  &eacute;quivaut &agrave; la valeur du troisi&egrave;me &eacute;l&eacute;ment de la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_voiture</code>, donc finalement la troisi&egrave;me valeur de la r&eacute;f&eacute;rence <code>\@voitures</code>, et il s'agit du troisi&egrave;me &eacute;l&eacute;ment de <code>@voitures</code>.<br>
(6.) sort: <code>Porsche</code>. C'est une notation abr&eacute;g&eacute;e pour le m&ecirc;me r&eacute;sultat que pour (5.). Il suffit de noter le premier op&eacute;rateur fl&egrave;che <code>-&gt;</code>.<br>
(7.) donne quelque chose comme: <code>HASH(0xb65b58)</code>, car <code>$pointeur-&gt;{pointeur_famille}</code> &eacute;quivaut &agrave; la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_famille</code>, et c'est la r&eacute;f&eacute;rence <code>\%famille</code>.<br>
(8.) sort: <code>filsFlorianfilleAnnefemmeFanny</code>, car <code>%{$pointeur-&gt;{pointeur_famille}}</code> &eacute;quivaut &agrave; la valeur de la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_famille</code>, donc en fin de compte la valeur de la r&eacute;f&eacute;rence <code>\%famille</code>, et c'est le hash complet <code>%famille</code>. Pour rechercher la valeur de la valeur, l'expression du (7.) est simplement plac&eacute;e encore une fois entre parenth&egrave;ses accolades et pr&eacute;c&eacute;d&eacute;e d'un <b>signe pourcentage</b>.<br>
(9.) sort: <code>Fanny</code>, car <code>$pointeur-&gt;{pointeur_famille}-&gt;{femme}</code> &eacute;quivaut &agrave; la valeur de  l'&eacute;l&eacute;ment hash avec le nom de cl&eacute; <code>femme</code> de la valeur de l'&eacute;l&eacute;ment hash avec la cl&eacute; <code>pointeur_famille</code>.<br>
(10.) sort: <code>Florian</code>. C'est une notation abr&eacute;g&eacute;e pour le m&ecirc;me r&eacute;sultat que pour (9.) et pour la m&ecirc;me raison que pour (6.).</p>




<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="predefini.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="predefini.htm"><b> Variables pr&eacute;d&eacute;finies en Perl</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="hashes.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="hashes.htm"><b> Hashes (Variables)</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>


</body>
</html>
