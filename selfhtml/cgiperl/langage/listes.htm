<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / &Eacute;l&eacute;ments de langage Perl /  Listes ou Arrays (Variables)</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Ce que sont les tableaux et  Arrays en Perl, comment les arrays sont d&eacute;clar&eacute;s et comment les employer.">
<meta name="keywords"       content="SELFHTML, Perl, tableaux, listes, Arrays">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/langage/listes.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // &Eacute;l&eacute;ments de langage Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Listes ou Arrays (Variables)</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#declaration_valeurs"><b>D&eacute;clarer des listes ou arrays et affecter des valeurs</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#acces_elements"><b>Acc&eacute;der &agrave; des &eacute;l&eacute;ments distincts de la liste</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#plusieurs_dimensions"><b>Tableaux &agrave; plusieurs dimensions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#fonctions_operations"><b>Fonctions et op&eacute;rations pour manipuler les listes ou arrays</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="declaration_valeurs">D&eacute;clarer des listes ou arrays et affecter des valeurs</a></h2>

<p>Les <b>listes</b> sont des valeurs distinctes reli&eacute;es ensemble. Quand vous voulez sauvegarder quelque chose qui forme un tout comme &quot;tous les noms des &eacute;l&eacute;ments HTML&quot; ou bien toutes les lignes d'un fichier&quot;, Vous pouvez le faire &agrave; l'aide de listes. Le type de variable en Perl dans lequel des listes peuvent &ecirc;tre sauvegard&eacute;es s'appelle <b>Array</b>.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @donnees = (&quot;Jeanne&quot;,23,&quot;Marseille&quot;,&quot;Bachot&quot;);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;&lt;pre&gt;@donnees&lt;/pre&gt;&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple un tableau (array) nomm&eacute; <code>@donnees</code> est d&eacute;clar&eacute;. La &quot;d&eacute;claration&quot; signifie pour les tableaux la m&ecirc;me chose que pour les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="scalaires.htm"><b>scalaires</b></a>. Un tableau est introduit en Perl par le signe &quot;chez&quot; <code>@</code>. Derri&egrave;re suit le nom du tableau. Lors de la d&eacute;claration d'un tableau vous pouvez affecter des valeurs de d&eacute;part ou non. Dans l'exemple ci-dessus, des valeurs de d&eacute;part ont &eacute;t&eacute; affect&eacute;es. Les diff&eacute;rentes valeurs sont incluses entre parenth&egrave;ses comme il est montr&eacute; et s&eacute;par&eacute;es les unes des autres par des virgules. Si vous ne voulez pas affecter de valeurs de d&eacute;part, notez simplement quelque chose comme <code>my @donnees;</code> comme instruction. &Agrave; la diff&eacute;rence de la d&eacute;claration de scalaire sans affectation de valeur, la liste n'est pas &quot;ind&eacute;finie&quot; mais simplement vide.</p>

<p>Un Array en Perl ne peut contenir que des scalaires pour les diff&eacute;rentes valeurs. Dans l'exemple ci-dessus, les diff&eacute;rentes valeurs telles que  <code>Jeanne</code>, <code>Marseille</code> et <code>Bachot</code> sont des cha&icirc;nes de caract&egrave;res tandis que <code>23</code> est un nombre.</p>

<p>Le script d'exemple envoie du code HTML au navigateur appelant, en sortant simplement la liste.</p>

<h3 class="inf">Attention:</h3>

<p>Les scalaires, les listes et les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="hashes.htm"><b>Hashes</b></a> ont diff&eacute;rents espaces de nommage. Les variables comme <code>$name</code>, <code>@name</code> et <code>%name</code> peuvent donc cohabiter sans probl&egrave;me dans le m&ecirc;me script.</p>

<p>&Agrave; la place de donn&eacute;es constantes, vous pouvez &eacute;galement ins&eacute;rer d'autres variables dans une liste. Ensuite la valeur avec la variable correspondante est prise dans la liste. Par exemple:<br>
<code>my $age = 23;</code><br>
<code>my @donnees = (&quot;Jeanne&quot;,$age,&quot;Marseille&quot;,&quot;Bachot&quot;);</code></p>

<p>Quand vous voulez cr&eacute;er une liste avec des nombres ou des lettres dans un ordre croissant ou d&eacute;croissant, il existe &agrave; cette fin une syntaxe sp&eacute;ciale:<br>
<code>my @Liste = (1..10);</code> cr&eacute;e une liste avec 10 &eacute;l&eacute;ments, &agrave; savoir les nombres de 1 &agrave; 10.<br>
<code>my @Liste = (&quot;A&quot;..&quot;Z&quot;);</code> cr&eacute;e une liste avec 26 &eacute;l&eacute;ments, &agrave; savoir les lettres de A &agrave; Z.</p>

<p>Quand vous voulez cr&eacute;er une liste avec des &eacute;l&eacute;ments qui ne contient aucun espace, il existe &agrave; cette fin &eacute;galement une syntaxe sp&eacute;ciale:<br>
<code>my @donnees = qw(Jeanne 23 Marseille Bachot);</code> cr&eacute;e un Array avec les &eacute;l&eacute;ments <code>&quot;Jeanne&quot;</code>, <code>23</code>, <code>&quot;Marseille&quot;</code> et <code>&quot;Bachotr&quot;</code>. Avec cette syntaxe sp&eacute;ciale, vous ne pouvez cependant pas ins&eacute;rer de variable dans la liste.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="acces_elements">Acc&eacute;der &agrave; des &eacute;l&eacute;ments distincts de la liste</a></h2>

<p>Le type de variable pour une valeur distincte en Perl est une scalaire. Si vous voulez acc&eacute;der dans cette liste aux diff&eacute;rentes valeurs qui y sont sauvegard&eacute;es, Utilisez donc un &quot;contexte scalaire&quot;. Ce qui s'exprime aussi dans la syntaxe de Perl.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @donnees = (&quot;Jeanne&quot;,23,&quot;Marseille&quot;,&quot;Bachot&quot;);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;$donnees[0] a $donnees[1] ans, habite � $donnees[2] et a son $donnees[3]\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans le script est encore d&eacute;clar&eacute; le tableau <code>@donnees</code> et initialis&eacute; avec quatre valeurs. Le script envoie &agrave; nouveau du code HTML au navigateur appelant et sort les donn&eacute;es. Cette fois-ci pourtant, il est acc&eacute;d&eacute; aux diff&eacute;rentes valeurs de la liste sauvegard&eacute;e dans le tableau <code>@donnees</code>. Avec <code>$donnees[0]</code> Il est acc&eacute;d&eacute; au premier &eacute;l&eacute;ment de la liste, donc &agrave; la valeur <code>Jeanne</code>. Avec <code>$donnees[1]</code> au deuxi&egrave;me &eacute;l&eacute;ment, donc <code>23</code> etc... L'important est de commencer le comptage &agrave; 0. Le nombre qui mentionne le num&eacute;ro d'ordre de l'&eacute;l&eacute;ment, doit figurer entre crochets. Les crochets font partie dans ce contexte (&agrave; l'int&eacute;rieur de cha&icirc;nes de caract&egrave;res) du nom de variable et doivent &ecirc;tre accol&eacute;s directement derri&egrave;re le nom du tableau (aucun espace n'est permis).</p>

<p>La syntaxe <code>$donnees[0]</code> montre avec le signe dollar plac&eacute; devant, que l'acc&egrave;s &agrave; l'&eacute;l&eacute;ment de tableau r&eacute;clame une scalaire, car les scalaires sont toujours reconnaissables au signe dollar qui les pr&eacute;c&egrave;de.</p>



<h3 class="inf">Attention:</h3>

<p>Quand vous avez un tableau nomm&eacute; <code>@donnees</code>, vous pouvez gr&acirc;ce &agrave; la notation <code>$#donnees</code> rechercher le num&eacute;ro d'ordre le plus &eacute;lev&eacute;, donc le dernier &eacute;l&eacute;ment de la liste sans savoir combien la liste contient d'&eacute;l&eacute;ments. Supposons que la liste <code>@donnees</code> ait 15 &eacute;l&eacute;ments: alors  <code>$#donnees</code> donnerait la valeur 14 . Avec une notation telle que <code>$donnees[$#donnees]</code> vous pouvez donc rechercher la valeur du dernier &eacute;l&eacute;ment de la liste <code>@donnees</code>.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="plusieurs_dimensions">Tableaux &agrave; plusieurs dimensions</a></h2>


<p>Si vous connaissez d'autres langages de programmation, vous avez peut-&ecirc;tre d&eacute;j&agrave; rencontr&eacute; des tableaux &agrave; plusieurs dimensions. Ce sont des tableaux qui sauvegardent des donn&eacute;es sous forme de matrice. Le plus simple &agrave; imaginer est un tableau &agrave; deux dimensions. Vous pouvez vous imaginer les donn&eacute;es qui y sont sauvegard&eacute;es comme un tableau. Pour adresser un &eacute;l&eacute;ment d&eacute;termin&eacute;, on va dans une ligne d&eacute;termin&eacute;e du tableau pour rejoindre une colonne d&eacute;termin&eacute;e.</p>

<p>Perl ne conna&icirc;t pas les tableaux &agrave; plusieurs dimensions dans cette acception du terme mais ne conna&icirc;t que des listes qui elles-m&ecirc;mes peuvent &agrave; leur tour contenir des (r&eacute;f&eacute;rences &agrave; des ) listes. Ici sont permises les imbrications aussi profondes soient elles. Repr&eacute;sentez vous chaque sous-liste d'une liste comme une dimension.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my @Liste_1 = (&quot;Mulhouse&quot;,&quot;Mont�limar&quot;,&quot;Mallemort&quot;);
my @Liste_2 = (&quot;Marseille&quot;,&quot;Montpellier&quot;,@Liste_1);
my @Liste_3 = (&quot;Marseille&quot;,&quot;Montpellier&quot;,[@Liste_1]);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;&lt;b&gt;Liste_2:&lt;/b&gt;&lt;pre&gt;@Liste_2&lt;/pre&gt;\n&quot;;
print &quot;&lt;b&gt;Liste_2[4]:&lt;/b&gt;&lt;pre&gt;$Liste_2[4]&lt;/pre&gt;\n&quot;;

print &quot;&lt;b&gt;Liste_3&lt;/b&gt;&lt;pre&gt;@Liste_3&lt;/pre&gt;&quot;;
print &quot;&lt;b&gt;Liste_3[2][1]:&lt;/b&gt;&lt;pre&gt;$Liste_3[2][1]&lt;/pre&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple sont d&eacute;clar&eacute;es trois listes au total, initialis&eacute;es avec des valeurs de d&eacute;part. Les listes <code>@Liste_2</code> et <code>@Liste_3</code> sont particuli&egrave;rement int&eacute;ressantes ici. Toutes deux contiennent chacune comme dernier &quot;&eacute;l&eacute;ment&quot; la liste <code>@Liste_1</code> compl&egrave;te qu'elles ont re&ccedil;ue en affectation (il faut veiller ici &agrave; ne pas placer le nom du tableau entre guillemets). La syntaxe ne diff&egrave;re ici que l&eacute;g&egrave;rement: Dans l'affectation pour <code>@Liste_2</code> est simplement not&eacute; <code>@Liste_1</code>, tandis que pour l'affectation pour <code>@Liste_3</code> s'ajoutent encore des crochets. Ce qui donne <code>[@Liste_1]</code>. Cette petite diff&eacute;rence a des cons&eacute;quences: Alors en effet que pour <code>@Liste_2</code> les diff&eacute;rentes valeurs de  <code>@Liste_1</code> sont simplement ajout&eacute;es, une nouvelle sous-liste est ouverte gr&acirc;ce aux crochets pour <code>@Liste_3</code>.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant, ce qui met en lumi&egrave;re la diff&eacute;rence. <code>@Liste_2</code> comprend maintenant simplement cinq &eacute;l&eacute;ments, &agrave; savoir <code>Marseille Montpellier Mulhouse Mont&eacute;limar Mallemort</code>. Une notation comme <code>$Liste_2[4]</code> acc&egrave;de au cinqui&egrave;me &eacute;l&eacute;ment, donc &agrave; la valeur <code>Mallemort</code>. <code>Liste_3</code> comprend par contre &agrave; pr&eacute;sent trois &eacute;l&eacute;ments pour lesquels le dernier &eacute;l&eacute;ment constitue une nouvelle liste avec ses propres &eacute;l&eacute;ments. Avec une instruction telle que <code>print&nbsp;&quot;@Liste_3&quot;;</code> Perl sortira comme troisi&egrave;me &eacute;l&eacute;ment quelque chose comme par exemple <code>ARRAY(0xb658ac)</code>. C'est tout simplement une r&eacute;f&eacute;rence <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="references.htm"><b>r&eacute;f&eacute;rence</b></a> &agrave; la sous-liste. Pour acc&eacute;der aux &eacute;l&eacute;ments de la deuxi&egrave;me dimension, vous devez utiliser des crochets doubles, un crochet par dimension. Une notation telle que <code>$Liste_2[2][1]</code> acc&egrave;de par <code>[2]</code> au troisi&egrave;me &eacute;l&eacute;ment de <code>@Liste_2</code>  et ensuite encore par <code>[1]</code> au deuxi&egrave;me sous-&eacute;l&eacute;ment de ce troisi&egrave;me &eacute;l&eacute;ment qui est une liste. Dans l'exemple il est donc acc&eacute;d&eacute; &agrave; la valeur <code>Mont&eacute;limar</code>.</p>

<p>L'exemple montre &eacute;galement que vous pouvez m&eacute;langer &agrave; souhait dans une liste diff&eacute;rentes valeurs avec d'autres listes. Vous acc&eacute;dez au deuxi&egrave;me &eacute;l&eacute;ment de <code>Liste_3</code> avec <code>Liste_3[1]</code>. La mention d'une autre paire de crochets n'est pas n&eacute;cessaire ici, &eacute;tant donn&eacute; que l'&eacute;l&eacute;ment n'est pas une sous-liste.</p>

<h3 class="inf">Attention:</h3>

<p>Vous pouvez &eacute;tablir &agrave; tout moment si un tableau est &agrave; une dimension ou s'il est pluridimensionnel, donc s'il contient des sous-listes. Si par exemple, vous avez d&eacute;clar&eacute; avec l'instruction <code>my @tableau;</code> un tableau tout d'abord ind&eacute;fini, vous pouvez noter ensuite sans probl&egrave;me une instruction comme <code>$tableau[1][4]&nbsp;=&nbsp;27;</code>. Ainsi le tableau <code>@tableau</code> re&ccedil;oit automatiquement deux &eacute;l&eacute;ments (avec les num&eacute;ros <code>0</code> et <code>1</code>). L'&eacute;l&eacute;ment <code>0</code> re&ccedil;oit la valeur ind&eacute;finie (<code>undef</code>), et l'&eacute;l&eacute;ment <code>1</code> se voit affecter la r&eacute;f&eacute;rence &agrave; une liste de cinq &eacute;l&eacute;ments  (<code>0</code> &agrave; <code>4</code>), dont les quatre premiers &eacute;l&eacute;ments re&ccedil;oivent la valeur <code>undef</code> et le cinqui&egrave;me &eacute;l&eacute;ment la valeur <code>27</code> que vous lui affectez.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="fonctions_operations">Fonctions et op&eacute;rations pour manipuler les listes ou arrays</a></h2>

<p>Il existe une quantit&eacute; de fonctions Perl &agrave; l'aide desquelles vous pouvez influencer les listes. Quelques possibilit&eacute;s importantes doivent &ecirc;tre nomm&eacute;es ici avec des liens &agrave; la description de la fonction concern&eacute;e.</p>

<p><b>Scinder des cha&icirc;nes de caract&egrave;res dans des listes</b>:<br>
Quand vous avez des cha&icirc;nes de caract&egrave;res qui contiennent certains signes revenant r&eacute;guli&egrave;rement, vous pouvez traiter ces signes comme signes de s&eacute;paration et transmettre la cha&icirc;ne de caract&egrave;res dans une liste (par exemple des valeurs s&eacute;par&eacute;es par des virgules).
Pour ce faire existe en Perl la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/chainescaracteres.htm#split"><b>split</b></a>.</p>

<p><b>Relier des listes &agrave; une cha&icirc;ne de caract&egrave;res</b>:<br>
Quelquefois, vous voudrez faire le contraire. On dispose de donn&eacute;es dans une liste mais on voudrait pourtant les reconstituer en cha&icirc;ne de caract&egrave;res.
Pour ce faire existe en Perl la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#join"><b>join</b></a>.</p>

<p><b>Modifier des &eacute;l&eacute;ments de la liste</b>:<br>
Par une instruction telle que <code>$Liste[12]&nbsp;=&nbsp;&quot;Olivier&quot;;</code> vous affectez au treizi&egrave;me &eacute;l&eacute;ment de la liste une valeur. Au cas o&ugrave; une valeur &eacute;tait d&eacute;j&agrave; sauvegard&eacute;e dans cet &eacute;l&eacute;ment, elle est remplac&eacute;e par la nouvelle valeur.</p>

<p><b>Ajouter des &eacute;l&eacute;ments &agrave; la liste</b>:<br>
Pour ajouter des &eacute;l&eacute;ments &agrave; des listes, Perl dispose de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#push"><b>push</b></a>.</p>

<p><b>Effacer des &eacute;l&eacute;ments &agrave; la liste</b>:<br>
Vous pouvez noter &agrave; tout moment quelque chose comme <code>$Liste[12]&nbsp;=&nbsp;&quot;&quot;;</code>. Ce faisant, la valeur est effac&eacute;e (ou plut&ocirc;t &eacute;cras&eacute;e pat une cha&icirc;ne de caract&egrave;res vide), Mais l'&eacute;l&eacute;ment subsiste. Vous ne pouvez vraiment effacer dans une liste qu'au d&eacute;but et &agrave; la fin. Pour effacer vraiment des &eacute;l&eacute;ments d'un tableau , Perl dispose de trois fonctions. La fonction  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#pop"><b>pop</b></a> efface &agrave; la fin, donc respectivement le dernier &eacute;l&eacute;ment d'une liste. La fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#shift"><b>shift</b></a> efface au d&eacute;but, donc respectivement le premier &eacute;l&eacute;ment d'une liste, et tous ceux qui suivent sont d&eacute;cal&eacute;s d'un num&eacute;ro d'index vers l'avant. Ce qui donc &eacute;tait auparavant <code>$Liste[7]</code>, devient apr&egrave;s <code>$Liste[6]</code>. La fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#splice"><b>splice</b></a> permet d'effacer des &eacute;l&eacute;ments &agrave; souhait dans un tableau, que ce soit au d&eacute;but ou &agrave; la fin ou m&ecirc;me au milieu. Comme avec  <code>shift</code> les num&eacute;ros d'index qui suivent sont d&eacute;cal&eacute;s en cons&eacute;quence. Avec <code>splice</code> vous pouvez m&ecirc;me remplacer toute une liste partielle d'un tableau par une autre liste ou ins&eacute;rer une nouvelle liste dans un tableau.</p>

<p><b>Trier les &eacute;l&eacute;ments d'une liste et inverser l'ordre du tri</b>:<br>
Vous pouvez r&eacute;organiser compl&egrave;tement une liste en triant ses &eacute;l&eacute;ments par ordre alphab&eacute;tique ou num&eacute;rique. Perl dispose pour le faire de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#sort"><b>sort</b></a>. Une fonction int&eacute;ressante qui compl&egrave;te cette possibilit&eacute; est aussi <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#reverse"><b>reverse</b></a>, qui inverse simplement les &eacute;l&eacute;ments de la liste. Le premier &eacute;l&eacute;ment devient le dernier, le deuxi&egrave;me l'avant dernier etc... En triant et en appliquant ensuite le fonction <code>reverse</code> on peut donc par exemple avoir un ordre alphab&eacute;tique d&eacute;croissant.</p>

<p><b>Rechercher le nombre d'&eacute;l&eacute;ments d'une liste</b>:<br>
La longueur de la liste peut &ecirc;tre recherch&eacute; tr&egrave;s simplement en Perl car la liste est interpr&eacute;t&eacute;e dans le contexte scalaire. Cela sonne compliqu&eacute;, c'est n&eacute;anmoins tr&egrave;s simple. Un exemple:<br>
<code>my $longueur = @Liste;</code><br>
Ici est sauvegard&eacute; dans la scalaire <code>$longueur</code> le nombre d'&eacute;l&eacute;ments du  tableau <code>@Liste</code>.</p>





<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="hashes.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="hashes.htm"><b>Hashes (Variables)</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="scalaires.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="scalaires.htm"><b>Scalaires (Variables)</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table>

 <p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
