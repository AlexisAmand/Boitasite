<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / &Eacute;l&eacute;ments de langage Perl / Hashes (variables)</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Ce que sont les Hashes en Perl, comment les d&eacute;clarer et comment les utiliser.">
<meta name="keywords"       content="SELFHTML, Perl, Hashes">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/langage/xxxxxx.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // &Eacute;l&eacute;ments de langage Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2> Hashes (variables)</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#definir"><b>D&eacute;clarer les Hashes et affecter des valeurs</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#acces"><b>Acc&eacute;der &agrave; diff&eacute;rentes cl&eacute;s et valeurs</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#fonctions_operations"><b>Fonctions et op&eacute;rations pour manipuler les Hashes</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="definir">D&eacute;clarer les Hashes et affecter des valeurs</a></h2>

<p>Les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>listes</b></a> habituelles ou tableaux sont constitu&eacute;es d'une s&eacute;rie de valeurs adressables par des num&eacute;ros d'index commen&ccedil;ant &agrave; 0. Le 8&egrave;me &eacute;l&eacute;ment d'une liste nomm&eacute;e <code>@liste_noms</code> sera donc adressable par <code>$liste_noms[7]</code>. Une liste associative, d&eacute;sign&eacute;e en Perl par &quot;Hash&quot;, sauvegarde par contre deux valeurs par &eacute;l&eacute;ment de liste: un nom et une valeur. Les valeurs dans un Hash n'ont pas besoin de num&eacute;ros d'index pour &ecirc;tre adress&eacute;s: elles sont &quot;associ&eacute;es&quot; au nom correspondant. Le nom est d&eacute;sign&eacute; pour cette raison en tant que &quot;cl&eacute;&quot;. Par cette cl&eacute;, il est possible d'acc&eacute;der aux donn&eacute;es ainsi reli&eacute;es.</p>


<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %donnees = (&quot;Nom&quot;,&quot;Jeanne&quot;,&quot;age&quot;,23,&quot;ville&quot;,&quot;Marseille&quot;);
my %meilleures_donnees = (Nom =&gt; &quot;Jeanne&quot;, age =&gt; 23, ville =&gt; &quot;Marseille&quot;);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;&lt;pre&gt;&quot;,%donnees,&quot;&lt;/pre&gt;\n&quot;;
print &quot;&lt;pre&gt;&quot;,%meilleures_donnees,&quot;&lt;/pre&gt;\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple sont d&eacute;clar&eacute;s deux  Hashes nomm&eacute;s <code>%donnees</code> et <code>%meilleures_donnees</code>. La &quot;d&eacute;claration&quot; signifie la m&ecirc;me chose pour les Hashes que pour les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>Arrays</b></a>. Un Hash est introduit par le signe pourcentage <code>%</code>. Derri&egrave;re suit le nom du Hash. Pour la d&eacute;claration d'un hash, vous pouvez attribuer des valeurs de d&eacute;part ou non. Dans les deux exemples ci-dessus sont affect&eacute;es des valeurs de d&eacute;part. ici, il y a deux notations diff&eacute;rentes, dont celle qui est appliqu&eacute;es pour <code>%meilleures_donnees</code> est la plus claire et donc celle qui est recommand&eacute;e. Soit vous notez les valeurs comme montr&eacute; dans le premier Hash. L&agrave; tout est not&eacute; comme dans une liste avec des virgules pour s&eacute;parer. Le premier, troisi&egrave;me, cinqui&egrave;me etc... &eacute;l&eacute;ment d&eacute;signent toutefois un nom, et le deuxi&egrave;me, quatri&egrave;me, sixi&egrave;me etc... &eacute;l&eacute;ment la valeur correspondante. Dans la notation recommand&eacute;e, ceci appara&icirc;t plus clairement. L&agrave; les paires de nom et valeur sont s&eacute;par&eacute;es par l'op&eacute;rateur indicatif <code>=&gt;</code> (souvent d&eacute;sign&eacute; comme 'fat comma' ), et les virgules ne sont not&eacute;es qu'entre les paires. Pour la notation avec l'op&eacute;rateur <code>=&gt;</code> (qui repr&eacute;sente un synonyme pour la virgule, ce pourquoi il est aussi d&eacute;sign&eacute; comme <i>fat comma</i>) les guillemets pour les noms, donc les cl&eacute;s, peuvent &ecirc;tre omis, s'ils satisfont aux  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="intro.htm#attribution_nom"><b>r&egrave;gles pour l'attribution de noms</b></a>. Pour l'autre notation avec s&eacute;paration avec des virgules entre la cl&eacute; et la valeur, les guillemets par contre s'imposent m&ecirc;me pour les cl&eacute;s. Les deux exemples de Hashes montrent cette diff&eacute;rence.</p>

<p>Comme pour les scalaires et les listes, vous pouvez d&eacute;clarer des hashes vides. Une instruction telle que <code>my %donnees;</code> d&eacute;clare un hash qui est toutefois tout d'abord vide.</p>

<p>Comme les listes, les hashes ne peuvent aussi contenir pour les diff&eacute;rentes valeurs que des  scalaires, donc des cha&icirc;nes de caract&egrave;res et des nombres que vous pouvez ici &eacute;galement m&ecirc;ler &agrave; souhait. Dans l'exemple ci-dessus les valeurs distinctes <code>Jeanne</code> et <code>Marseille</code> sont des cha&icirc;nes de caract&egrave;res, tandis que  <code>23</code> est un nombre.</p>

<p>Le script en exemple envoie du code HTML au navigateur appelant et sort simplement le contenu des deux hashes.</p>

<h3 class="inf">Attention:</h3>

<p>Les scalaires, les listes et les hashes ont des espaces de nommage diff&eacute;rents. Des variables comme <code>$nom</code>, <code>@nom</code> et <code>%nom</code> peuvent donc cohabiter sans probl&egrave;me dans le m&ecirc;me script.</p>

<p>Des hashes complets, donc qui commencent avec le signe pourcentage, ne sont pas interpr&eacute;t&eacute;s quand ils sont plac&eacute;s entre guillemets dans les instructions <code>print</code>. Pour sortir compl&egrave;tement un hash comme dans l'exemple ci-dessus, vous devez utiliser  la technique de sortir plusieurs valeurs distinctes avec  <code>print</code> , valeurs s&eacute;par&eacute;es par des virgules, comme dans l'exemple ci-dessus.</p>

<p>&Agrave; la place de donn&eacute;es constantes, vous pouvez &eacute;galement ins&eacute;rer d'autres variables dans un hash. Par exemple :<br>
<code>my $age = 23;</code><br>
<code>my %donnees = (Name =&gt; &quot;Jeanne&quot;, age =&gt; $age);</code></p>

<p>Les hashes peuvent &ecirc;tre employ&eacute;s tr&egrave;s judicieusement avec les scripts CGI. Il est ainsi possible par exemple, . Par exemple, le flux de donn&eacute;es d'un formulaire HTML rempli par un utilisateur peut &ecirc;tre lu directement dans un hash en sauvegardant comme nom-cl&eacute; du hash &agrave; chaque fois le nom de champ d'un &eacute;l&eacute;ment de formulaire du fichier HTML, et comme valeur, celle que l'utilisateur a entr&eacute;e ou choisie pour l'&eacute;l&eacute;ment consid&eacute;r&eacute;.</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="acces">Acc&eacute;der &agrave; diff&eacute;rentes cl&eacute;s et valeurs</a></h2>

<p>Exactement comme pour les listes, vous acc&eacute;dez &agrave; une scalaire quand vous lisez les diff&eacute;rentes valeurs sauvegard&eacute;es d'un hash ou affectez des valeurs. Pour l'acc&egrave;s, utilisez la cl&eacute;.</p>

<h3 class="xmp">Exemple d'un script CGI complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my %donnees = (Nom =&gt; &quot;Jeanne&quot;, age =&gt; 23, ville =&gt; &quot;Marseille&quot;, formation =&gt; &quot;Bachot&quot;);

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Sortie du test&lt;/title&gt;\n&quot;;
print &quot;&lt;/head&gt;&lt;body&gt;\n&quot;;

print &quot;$donnees{'Nom'} a $donnees{'age'} ans, habite � $donnees{'ville'} et a son  $donnees{'formation'}\n&quot;;

print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans le script le hash <code>%donnees</code> est &agrave; nouveau d&eacute;clar&eacute; et initialis&eacute; avec quatre valeurs (cette fois tout de suite dans la meilleure notation). Le script envoie du code HTML au navigateur appelant et sort les donn&eacute;es. Cette fois ci cependant, il est acc&eacute;d&eacute; aux diff&eacute;rentes valeurs du hash <code>%donnees</code>. Avec <code>$donnees{'Nom'}</code> il est acc&eacute;d&eacute; &agrave; l'&eacute;l&eacute;ment du hash qui a pour <b>cl&eacute;</b> <code>Nom</code>. Vous n'avez pas besoin de conna&icirc;tre la place de l'&eacute;l&eacute;ment dans le hash. Il suffit de mentionner la cl&eacute;. Gr&acirc;ce &agrave; elle il sera acc&eacute;d&eacute; &agrave; la valeur correspondante. <code>$donnees{'Nom'}</code> acc&egrave;de donc dans l'exemple &agrave; la valeur <code>Jeanne</code>. Il est important que la cl&eacute; soit plac&eacute;e dans des parenth&egrave;ses <b>accolades</b>. Les parenth&egrave;ses font partie dans ce contexte (&agrave; l'int&eacute;rieur de cha&icirc;nes de caract&egrave;res) du nom de variable et doivent &ecirc;tre not&eacute;es derri&egrave;re le nom du hash (aucun espace permis).</p>

<p>La syntaxe comme dans <code>$donnees{'Nom'}</code> montre avec le signe dollar qui pr&eacute;c&egrave;de, qu'il s'agit bien d'une scalaire pour une valeur du hash.</p>

<h3 class="inf">Attention:</h3>

<p>&Agrave; la place d'une notation comme  <code>$donnees{'Nom'}</code> vous pouvez &eacute;galement noter <code>$donnees{Name}</code>, donc sans apostrophes.  Dans la mesure o&ugrave; rien d'autre qu'une cl&eacute; distincte ne figure dans les parenth&egrave;ses, et qu'elle satisfait aux <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="intro.htm#attribution_nom"><b>r&egrave;gles pour l'attribution de noms</b></a>, les apostrophes peuvent &ecirc;tre omises.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="fonctions_operations">Fonctions et op&eacute;rations pour manipuler les Hashes</a></h2>


<p>Beaucoup de fonctions Perl, s'appliquent aux <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm"><b>Listes et Hashes</b></a>, quelques unes d'entre elles seulement aux Hashes, &eacute;tant donn&eacute; que la manipulation de hashes pr&eacute;sente quelques particularit&eacute;s. Quelques possibilit&eacute;s importantes doivent &ecirc;tre nomm&eacute;es ici avec des liens &agrave; la description de la fonction concern&eacute;e.</p>

<p><b>Travailler avec des cl&eacute;s inconnues</b>:<br>
Quand vous initialisez un hash avec des valeurs, vous connaissez &eacute;galement les noms de cl&eacute;. Mais quand vous lisez les donn&eacute;es - par exemple des donn&eacute;es de formulaire HTML dans un script CGI - alors il est fr&eacute;quent que vous ne sachiez pas tout ce qui se trouve dans le hash qui a enregistr&eacute; les donn&eacute;es. Pour avoir d'abord un r&eacute;capitulatif des cl&eacute;s qui ont &eacute;t&eacute; lues dans le hash, vous pouvez utiliser la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#keys"><b>keys</b></a>. Ensuite vous aurez une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>liste</b></a> avec tous les noms ou cl&eacute;s du hash. Supposons que vous ayez un hash <code>%donnees</code> avec des cl&eacute;s et valeurs qui vous sont tout d'abord inconnues. Alors vous pouvez avec une instruction telle que <code>@clefs&nbsp;=&nbsp;keys(%donnees);</code> rechercher les cl&eacute;s. Vous pouvez ensuite acc&eacute;der par exemple par <code>$donnees{$clefs[0]}</code> &agrave; la valeur du hash qui est associ&eacute;e au nom qui peut &ecirc;tre trouv&eacute; maintenant trouv&eacute; dans <code>$clefs[0]</code> sans conna&icirc;tre explicitement la cl&eacute;.</p>

<p><b>Modifier ou ajouter des valeurs</b>:<br>
Par une instruction comme <code>$donnees{prenom}&nbsp;=&nbsp;&quot;Olivier&quot;;</code> vous affectez &agrave; l'int&eacute;rieur du hash <code>%donnees</code> une valeur &agrave; l'&eacute;l&eacute;ment avec la cl&eacute;  <code>prenom</code>. Au cas o&ugrave; une cl&eacute; <code>prenom</code> existe d&eacute;j&agrave; dans le hash, la valeur qui y &eacute;tait sauvegard&eacute;e jusqu'alors est remplac&eacute;e par la nouvelle valeur affect&eacute;e. Si par contre, la cl&eacute; n'existe pas encore, la paire cl&eacute;-valeur sera simplement ajout&eacute;e au hash. Modifier se fait donc en affectant une valeur &agrave; une cl&eacute; existante, et ajouter en affectant une valeur &agrave; une cl&eacute; qui n'existe pas encore.</p>

<p><b>Effacer la paire cl&eacute;-valeur</b>:<br>
Pour effacer une paire cl&eacute;-valeur compl&egrave;te, Perl dispose de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#delete"><b>delete</b></a> .</p>

<p><b>Traiter et trier les valeurs du hash dans l'ordre</b>:<br>
En interne, les hashes sont sauvegard&eacute;s dans une structure de donn&eacute;es, qui assure l'efficacit&eacute; lors des acc&egrave;s en &eacute;criture et en lecture. En raison de cet &eacute;tat de faits l'ordre est la cl&eacute; comme il a &eacute;t&eacute; livr&eacute; par exemple par la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#keys"><b>keys</b></a>, (apparemment) plus ou moins al&eacute;atoire et ne correspond que tr&egrave;s rarement avec l'ordre dans lequel vous avez d&eacute;clar&eacute; le hash. Vous n'avez aucune possibilit&eacute; de modifier cet ordre. Rien ne vous emp&ecirc;che par contre, de parcourir les &eacute;l&eacute;ments du hash dans un certain ordre par exemple avec une boucle. Ainsi vous pouvez par exemple avec <code>@tri_clefs = sort keys %donnees</code> trier alphab&eacute;tiquement les cl&eacute;s du hash <code>%donnees</code> et affecter cette liste tri&eacute;e de cl&eacute;s au tableau <code>@tri_clefs</code>. Vous pouvez enfin utiliser une telle liste tri&eacute;e des cl&eacute;s (avec une boucle par exemple) pour traiter les diff&eacute;rents &eacute;l&eacute;ments du hash dans cet ordre alphab&eacute;tique qui vient d'&ecirc;tre obtenu. Ici vous avez le choix entre le tri d'apr&egrave;s les cl&eacute;s ou d'apr&egrave;s les valeurs. Pour cela vous devez appliquer de toutes fa&ccedil;ons quelques fonctions Perl telles que une boucle. Dans la partie sur les boucles, vous trouverez une description sur le th&egrave;me <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="boucles.htm#hashes_boucles"><b>Boucles pour les hashes</b></a>.</p>

<p><b>Rechercher le nombre de paires cl&eacute;-valeur d'un hash</b>:<br>
Vous pouvez &eacute;galement r&eacute;soudre ceci par la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#keys"><b>keys</b></a>. Avec une instruction telle que <code>$nombre = keys(%donnees);</code> vous sauvegardez dans la scalaire <code>$nombre</code> le nombre de cl&eacute;s existantes dans <code>%donnees</code>, ce qui donne le nombre de paires cl&eacute;-valeur. Car la fonction <code>keys</code> retourne, quand elle est appel&eacute;e dans un contexte scalaire le nombre des cl&eacute;s.</p>





<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="references.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="references.htm"><b>R&eacute;f&eacute;rences ou pointeurs (Variables)</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="listes.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="listes.htm"><b>Listes ou Arrays (Variables)</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
