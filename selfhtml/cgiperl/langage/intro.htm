<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / &Eacute;l&eacute;ments de langage Perl / G&eacute;n&eacute;ralit&eacute;s sur Perl</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Wie der Perl-Interpreter aufgerufen wird, wie Perl-Scripts grunds&auml;tzlich aussehen m&uuml;ssen, wie Anweisungen notiert werden, was bei der Namensvergabe zu beachten ist, und aus welchen logischen Teilen ein Perl-Script bestehen kann.">
<meta name="keywords"       content="SELFHTML, Perl, Perl-Interpreter, Anweisungen, Anweisungsbl&ouml;cke, Kommentare, Namensvergabe, Programmierstil, shebang-Anweisung, Shebang-Anweisung">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/langage/intro.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // &Eacute;l&eacute;ments de langage Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>G&eacute;n&eacute;ralit&eacute;s sur Perl</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#appel"><b>Possibilit&eacute;s d'appel de l'interpr&eacute;teur Perl</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#premiere_ligne"><b>Premi&egrave;re ligne d'un script Perl</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#instructions"><b>Noter des instructions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#blocs_instructions"><b>Noter des blocs d'instructions</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#commentaires"><b>Commentaires en Perl</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#attribution_nom"><b>R&egrave;gles pour l'attribution de noms </b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#style_programmation"><b>Style de programmation propre</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="appel">Possibilit&eacute;s d'appel de l'interpr&eacute;teur Perl</a></h2>

<p>Pour ex&eacute;cuter et tester vos propres scripts Perl, vous devez avoir  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/ordiperl.htm"><b>install&eacute; un interpr&eacute;teur Perl</b></a>. Pour mettre en oeuvre Perl comme langage pour les scripts CGI, il faut en outre <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/ordiserveurweb.htm"><b>installer un serveur Web</b></a>.</p>

<p>Pour les scripts CGI, le navigateur Web r&eacute;clame un fichier du serveur Web par HTTP que le serveur Web reconna&icirc;t comme script ex&eacute;cutable. Pour savoir que le fichier r&eacute;clam&eacute; par le navigateur est un script CGI ex&eacute;cutable, le serveur Web v&eacute;rifie diff&eacute;rents crit&egrave;res:</p>

<ul>
<li>Le script se trouve dans un r&eacute;pertoire qui, pour le serveur Web est d&eacute;fini comme r&eacute;pertoire possible pour les scripts CGI (par exemple. <var>cgi-bin</var> et ses sous-r&eacute;pertoires).</li>
<li>Pour le fichier script, les droits pour la lecture et l'ex&eacute;cution sont fix&eacute;s de telle fa&ccedil;on que le serveur Web a le droit d'ex&eacute;cuter le fichier. Ceci s'applique avant tout aux syst&egrave;mes bas&eacute;s sur Unix.</li>
<li>Le fichier script a une extension de fichier, reconnue par le syst&egrave;me comme extension de scripts Perl, par exemple <var>.pl</var> ou bien <var>.cgi</var>.</li>
<li>La premi&egrave;re ligne du script Perl contient ce qu'on appelle une instruction &quot;Shebang&quot;  (argot, &agrave; prononcer <i>schib&auml;ng</i>). Cette instruction est une remarque pour le programme qui lit, sur le programme qui doit &ecirc;tre appel&eacute; pour interpr&eacute;ter le texte source de ce fichier script. voir aussi <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#premiere_ligne"><b>Premi&egrave;re ligne d'un script Perl</b></a>.</li>
</ul>

<p>Ces facteurs font en sorte que si le navigateur appelle un fichier script dans le r&eacute;pertoire CGI, le serveur Web r&eacute;agisse en cons&eacute;quence et n'envoie pas purement et simplement le texte source du script au navigateur, mais au contraire appelle l'interpr&eacute;teur Perl avec le script CGI.</p>

<p>Perl n'est toutefois pas uniquement pr&eacute;vu pour les scripts CGI. Les scripts Perl peuvent se charger d'innombrables t&acirc;ches sur un ordinateur par exemple organiser des sauvegardes, analyser la charge de l'ordinateur, rechercher quelque chose dans les fichiers et remplacer par autre chose etc... Pour ex&eacute;cuter des scripts Perl, qui ne sont pas mis en &#339;uvre comme scripts CGI, vous devez avoir acc&egrave;s &agrave; une console (shell) ou d'une ligne d'invite de commande sur l'ordinateur. Sur un ordinateur personnel local et sous  MS Windows vous pouvez ouvrir une fen&ecirc;tre DOS. Ensuite, vous pouvez appeler l'interpr&eacute;teur Perl &agrave; partir de l'invite DOS. Pour des syst&egrave;mes bas&eacute;s sur Unix, vous avez besoin d'un acc&egrave;s utilisateur. Apr&egrave;s vous &ecirc;tre annonc&eacute;, vous recevez un shell. &agrave; savoir une ligne de commande propre &agrave; l'utilisateur. De l&agrave;, vous pouvez appeler l'interpr&eacute;teur Perl, &agrave; condition que vous ayez les droits pour le faire. Si vous voulez ex&eacute;cuter des scripts Perl par la ligne d'invite de commande d'un ordinateur &eacute;loign&eacute;, donc par exemple sur un serveur public o&ugrave; vous avez lou&eacute; de la place Web, alors il vous faut un acc&egrave;s Telnet ou SSH &agrave; cet ordinateur. Par ailleurs, il vous faut un programme telnet ou SSH (dans l'offre en ligne de l'index des liens de SELFHTML, vous trouverez des <img src="../../src/serverdoc.gif" width="15" height="10" border="0" alt="Page d'information: connexion exig&eacute;e">&nbsp;<a target="_top" href="http://www.selfhtml.com.fr/links/telnet_ssh_programme.htm"><b>liens WWW &agrave; des programmes Telnet et SSH</b></a>). Avec un tel programme, vous pouvez de loin, vous annoncer aupr&egrave;s d'un ordinateur et recevoir une console pour entrer des commandes. Demandez le cas &eacute;ch&eacute;ant &agrave; votre fournisseur d'acc&egrave;s, si vous avez un acc&egrave;s Telnet ou SSH au serveur!</p>

<p>&Agrave; partir de la ligne de commande, vous pouvez appeler l'interpr&eacute;teur Perl avec un script Perl, &agrave; savoir un fichier avec du code Perl. De tels fichiers ont pour extension de fichier standard <var>.pl</var>. L'interpr&eacute;teur Perl est normalement lanc&eacute; simplement en entrant <kbd>perl</kbd>. Si vous avez par exemple un script Perl nomm&eacute; <var>hellomonde.pl</var>, vous pouvez lancer ce script avec <kbd>perl hellomonde.pl</kbd> Le cas &eacute;ch&eacute;ant, il vous faut appeler aussi bien l'interpr&eacute;teur Perl que le script Perl avec le nom de chemin correct, sous  DOS/Windows donc par exemple <kbd>c:\www\bin\perl.exe c:\scripts\perl\hellomonde.pl</kbd>, sous les syst&egrave;mes bas&eacute;s sur Unix par exemple <kbd>/usr/bin/perl /scripts/perl/hellomonde.pl</kbd>.</p>

<p>Par ailleurs, il y a bon nombre d'options en plus du nom de fichier, pour l'appel de l'interpr&eacute;teur Perl. Les options suivent imm&eacute;diatement le nom du fichier programme et pr&eacute;c&egrave;dent donc le nom du script Perl, donc par exemple <kbd>perl -c test.pl</kbd>. Vous pouvez aussi mettre plusieurs options &agrave; la suite. Notez simplement pour le faire un signe moins suivi de toutes les lettres d'options d&eacute;sir&eacute;es par exemple <kbd>perl -cwT test.pl</kbd></p>

<p>La liste suivante contient quelques options pour l'appel de l'interpr&eacute;teur Perl.</p>

<table cellpadding="0" cellspacing="0" border="0" bgcolor="#C0C0C0"><tr><td>
<table cellpadding="3" cellspacing="1" border="0">
<tr>
<th bgcolor="#EEEEEE" class="doc" align="left" nowrap>Option</th>
<th bgcolor="#EEEEEE" class="doc" align="left" nowrap>Signification</th>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-c</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">le script Perl n'est pas ex&eacute;cut&eacute; mais seulement compil&eacute; dans une arborescence syntaxique interne &agrave; Perl et sa syntaxe est ainsi seulement contr&ocirc;l&eacute;e.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-d</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">le script Perl est ex&eacute;cut&eacute; en mode d&eacute;bogage. Ce mode permet de tester syst&eacute;matiquement le script Perl. Dans le mode d&eacute;bogage, figurent de nombreuses commandes pour contr&ocirc;ler et v&eacute;rifier le d&eacute;roulement du script.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-h</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Si vous appelez Perl avec cette option sans mention d'un script, l'interpr&eacute;teur Perl sort un r&eacute;capitulatif de toutes les options disponibles.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-S</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Le script n'a besoin d'&ecirc;tre mentionn&eacute; que comme nom de fichier, sans mention du chemin. S'il se trouve dans un des r&eacute;pertoires qui sont nomm&eacute;s dans la variable  <var>PATH</var> du syst&egrave;me d'exploitation, l'interpr&eacute;teur Perl trouvera &eacute;galement le script sans mention de chemin.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-T</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">Le script est ex&eacute;cut&eacute; dans ce qu'on appelle le mode &quot;tainted&quot;. Ce qui veut dire que toutes les donn&eacute;es que le script Perl re&ccedil;oit de l'ext&eacute;rieur sont marqu&eacute;es de fa&ccedil;on particuli&egrave;res par l'interpr&eacute;teur Perl et doivent subir un traitement particulier du script, pour des op&eacute;rations critiques, avant de pouvoir &ecirc;tre utilis&eacute;es.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-v</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">donne la version et l'&eacute;tat exact de l'interpr&eacute;teur Perl.</td>
</tr>
<tr>
<td class="code" bgcolor="#FFFFE0" valign="top" nowrap><code>-w</code></td>
<td class="tabxpl" bgcolor="#E4EEFF" valign="top">fait en sorte que l'interpr&eacute;teur Perl ne sorte pas seulement les messages d'erreur flagrantes pour les erreurs de syntaxe mais aussi des avertissements pour des erreurs possibles, pour les suites d'instructions dont la logique est douteuse, pour des affectations ind&eacute;finies etc...</td>
</tr>
</table>
</td></tr></table>
<br>&nbsp;


<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="premiere_ligne">Premi&egrave;re ligne d'un script Perl</a></h2>

<p>Dans la premi&egrave;re ligne d'un script Perl, ce qu'on appelle la ligne &quot;Shebang&quot;, doit figurer une instruction qui mentionne o&ugrave; se trouve le fichier ex&eacute;cutable de l'interpr&eacute;teur Perl.</p>

<h3 class="xmp">Exemple d'un script Perl complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl
print &quot;Hello monde\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'instruction concernant l'emplacement de l'interpr&eacute;teur Perl sur l'ordinateur commence par les signes <code>#!</code>, qu'on appelle Shebang - suivis de la mention du chemin et du nom de l'interpr&eacute;teur Perl. &Agrave; partir de la deuxi&egrave;me ligne, vous pouvez noter des  instructions dans le langage Perl - comme dans l'exemple la sortie des deux mots <code>Hello monde</code>.</p>

<p>L'instruction concernant l'emplacement de l'interpr&eacute;teur Perl sur l'ordinateur est &eacute;valu&eacute;e avant tout par les syst&egrave;mes Unix et compatibles Unix et cela si le fichier Perl est fix&eacute; sur le mode &quot;ex&eacute;cutable&quot;. Le fichier peut alors &ecirc;tre appel&eacute; directement et d&eacute;marre l'interpr&eacute;teur Perl. Si vous travaillez sous d'autres environnements que Unix, notez simplement la ligne habituelle avec la mention de chemin habituelle (<code>#!/usr/bin/perl</code>) dans la premi&egrave;re ligne de votre script Perl. Si le script n'&eacute;tait alors pas ex&eacute;cut&eacute;, notez le chemin exact du fichier ex&eacute;cutable de l'interpr&eacute;teur Perl. S&eacute;parez les r&eacute;pertoires pour le faire toujours de simples barres obliques. Une mention typique sous DOS -/Windows est par exemple <code>#!/programmes/perl/bin/perl.exe</code>.</p>

<h3 class="inf">Attention:</h3>

<p>Pour des serveurs Web qui soutiennent CGI, cela d&eacute;pend du logiciel du serveur Web si la ligne pour l'emplacement de l'interpr&eacute;teur Perl est lue. La mention du chemin de l'interpr&eacute;teur Perl fait aussi partie entre temps des  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/ordiserveurweb.htm#reglages_base"><b>r&eacute;glages de base pour un serveur Web</b></a>. Quand, avec le serveur Web en marche, un script Perl est ex&eacute;cut&eacute; par le protocole HTTP, le serveur Web appelle l'interpr&eacute;teur Perl conform&eacute;ment &agrave; sa configuration.</p>

<p>Quand l'interpr&eacute;teur Perl se trouve dans le chemin de recherche pour fichiers ex&eacute;cutables, par exemple sauvegard&eacute; dans la variable d'environnement <var>PATH</var>, alors il suffit de noter dans la premi&egrave;re ligne du script Perl:<br>
<code>#!perl</code></p>

<p>Derri&egrave;re la mention de chemin de l'interpr&eacute;teur Perl, peut encore suivre, s&eacute;par&eacute;e par un espace, une option d'appel telle qu'elles sont d&eacute;crites dans le tableau pour les <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#appel"><b>possibilit&eacute;s d'appel de l'interpr&eacute;teur Perl</b></a>. Vous pouvez ainsi noter par exemple:<br>
<code>#!/usr/bin/perl -w</code><br>
Ce faisant, vous indiquez &agrave; l'interpr&eacute;teur Perl de signaler aussi les avertissements en plus des erreurs. Cette option est volontiers recommand&eacute;e par les programmeurs en Perl (voir aussi <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#style_programmation"><b>Style de programmation propre</b></a>).</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="instructions">Noter des instructions</a></h2>


<p>Perl est constitu&eacute; comme d'autres langages de programmation d'une s&eacute;rie contr&ocirc;l&eacute;e d'instructions. Ce sont des commandes &eacute;valu&eacute;es par l'interpr&eacute;teur Perl et transcrites en code machine, qui est ex&eacute;cutable sur l'ordinateur concern&eacute;.</p>

<p>Il existe des instructions simples et d'autres plus complexes.</p>

<h3 class="xmp">Exemple d'un script Perl complet:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl

$nombre = 42;
$carre = $nombre * $nombre;
print &quot;Le carr� de &quot;, $nombre, &quot; = &quot;, $carre, &quot;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Une instruction en Perl est constitu&eacute;e par une commande qui se termine en principe par un point virgule <code>;</code>.</p>

<p>Une instruction c'est par exemple:</p>
<ul>
<li>quand vous affectez une valeur &agrave; une  variable, comme dans l'exemple l'instruction <code>$nombre = 42;</code>.</li>
<li>quand vous ex&eacute;cutez une op&eacute;ration avec des variables ou des valeurs, comme ci-dessus dans la deuxi&egrave;me instruction.</li>
<li>quand vous appelez une  <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Chapitre: vue d'ensemble">&nbsp;<a href="../fonctions/index.htm"><b>fonction Perl</b></a> comme ci-dessus dans la troisi&egrave;me instruction la fonction <code>print</code>.</li>
</ul>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="blocs_instructions">Noter des blocs d'instructions</a></h2>

<p>Un bloc d'instructions est constitu&eacute; de diff&eacute;rentes <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#instructions"><b>instructions</b></a>, qui figurent &agrave; l'int&eacute;rieur d'une instruction parente . Des blocs d'instructions peuvent ainsi figurer par exemple dans une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="conditions.htm"><b>instruction conditionnelle</b></a> ou dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="boucles.htm"><b>boucle</b></a>. M&ecirc;me toutes les instructions qui figurent dans un <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programme</b></a>, forment un bloc d'instructions.</p>

<h3 class="xmp">Exemple 1:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
if($nombre &gt; 1000) {
  $nombre = 0;
}
</pre></td></tr></table>

<h3 class="xmp">Exemple 2:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my $i = 1;
while($i &lt;= 99) {
  print &quot;Le carr� de &quot;, $i, &quot; est &quot;, $i * $i, &quot;\n&quot;;
  $i = $i + 1;
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Un bloc d'instructions commence par une parenth&egrave;se accolade d'ouverture <code>{</code> et se termine par une parenth&egrave;se accolade de fermeture <code>}</code>.</p>

<p>Pour les instructions conditionnelles (comme dans l'exemple 1) ou pour les boucles (comme dans l'exemple 2) vous devez toujours noter de tels blocs d'instructions, m&ecirc;me si il n'y a qu'une seule instruction &agrave; ex&eacute;cuter pour la condition ou la boucle.</p>

<p>Les blocs d'instructions peuvent &eacute;galement &ecirc;tre imbriqu&eacute;s.</p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="commentaires">Commentaires en Perl</a></h2>

<p>Comme tout bon langage de programmation, Perl permet de noter des commentaires. Les commentaires ne sont pas interpr&eacute;t&eacute;s comme du code et expliquent le script ou rendent le code plus lisible.</p>

<h3 class="xmp">Exemple:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my $i = 1; # ici la variable $i est initialis�e
#=========================================
# Suivent les carr�s des nombres
# de 1 � 99
#=========================================
while($i &lt;= 99) {
  print &quot;Le carr� de &quot;, $i, &quot; est &quot;, $i * $i, &quot;\n&quot;;
  $i = $i + 1;
}
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Les commentaires en Perl commencent par un signe di&egrave;se <code>#</code>. Tout ce qui figure derri&egrave;re le signe di&egrave;se jusqu'&agrave; la fin de la ligne est ignor&eacute; par Perl. Si une ligne commence par le signe di&egrave;se, toute le ligne est un commentaire. Beaucoup de programmeurs en  Perl utilisent &eacute;galement la technique du commentaire pour donner une structure esth&eacute;tique &agrave; leurs scripts. L'exemple ci-dessus montre une telle construction optique avec le signe &eacute;gal.</p>

<h3 class="inf">Attention</h3>

<p>Outre le simple commentaire existe &eacute;galement la possibilit&eacute; de marquer des passages plus importants du script comme documentation. Ces documentations peuvent &ecirc;tre lues s&eacute;par&eacute;ment avec le programme <var>perldoc</var>, qui fait partie de la &quot;liste de colisage&quot; de l'interpr&eacute;teur Perl. Pour des scripts plus complexes, vous pouvez ainsi livrer tout de suite la documentation avec le script. En relation avec les modules est d&eacute;crit dans la partie  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/intro.htm#perldoc"><b>lire les modules de documentation avec perldoc</b></a>, l'aspect que rev&ecirc;tent de telles sections. Les modules qui y sont d&eacute;crits fonctionnent dans tout script Perl.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="attribution_nom">R&egrave;gles pour l'attribution de noms</a></h2>


<p>&Agrave; de nombreuses occasions, vous devez attribuer dans Perl vous m&ecirc;me des noms - par exemple pour les variables telles que les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="scalaires.htm"><b>Scalaires</b></a>, <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>Arrays</b></a> ou les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="hashes.htm"><b>Hashes</b></a>, ainsi que pour les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programmes</b></a>.</p>

<h3 class="xmp">Exemple:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my $donnees = $ENV{'QUERY_STRING'};
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple <code>donnees</code> est un nom attribu&eacute; personnellement. Pour attribuer des noms, les r&egrave;gles suivantes sont &agrave; respecter:</p>
<ul>
<li>ils ne doivent pas contenir d'espace.</li>
<li>ils doivent commencer par une lettre ou un tiret de soulignement <code>_</code>. ils ne peuvent pas commencer par un chiffre ou par un autre signe.</li>
<li>les minuscules et les majuscules sont autoris&eacute;es. Les majuscules et minuscules sont n&eacute;anmoins aussi diff&eacute;renci&eacute;es. Ce qui signifie que deux noms de variables tels aue <code>$user</code> et <code>$User</code> d&eacute;signent des variables diff&eacute;rentes!</li>
<li>ils ne doivent pas contenir de caract&egrave;res avec accent, de c&eacute;dille ou autre caract&egrave;re sp&eacute;cial, seulement les lettres de A &agrave; Z et de a &agrave; z.</li>
<li>Ils peuvent contenir des tirets de soulignement <code>_</code>.</li>
</ul>

<p>Attribuez des noms &eacute;vocateurs et qui vous signaleront, m&ecirc;me six mois apr&egrave;s avoir &eacute;crit le script, leur signification. Cela peut &ecirc;tre des noms en fran&ccedil;ais &agrave; condition de respecter les r&egrave;gles mentionn&eacute;es.</p>

<h3>Attention:</h3>

<p>depuis la version Perl 5.6.0 les scripts Perl peuvent &ecirc;tre &eacute;galement not&eacute;s en Unicode. De la sorte il est possible par exemple d'utiliser des caract&egrave;res avec accent dans les noms de variable. Les scripts Perl doivent alors &ecirc;tre cod&eacute;s UTF-8. Dans un &eacute;diteur qui ne ma&icirc;trise pas cette notation, une variable <code>$localit&eacute;</code> ressemblerait par exemple &agrave;: <code>$localité</code></p>



<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="style_programmation">Style de programmation propre</a></h2>

<p>Il y a certaines choses qu'un script Perl &eacute;crit proprement doit contenir. Sans ces chose, la plupart des scripts Perl fonctionnent tout aussi bien, mais des instructions critiques (&eacute;quivoques) dans le texte source ne sautent alors pas aux yeux et peuvent facilement conduire &agrave; des erreurs. Le petit script Perl qui suit contient quelques petites choses que les programmeurs en Perl recommandent pour une programmation propre.</p>

<h3 class="xmp">Exemple d'un script CGI complet en Perl:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
#!/usr/bin/perl -w

use strict;
use CGI::Carp qw(fatalsToBrowser);

my $headline = &quot;Un script propre!&quot;;

print &quot;Content-type: text/html\n\n&quot;;
print '&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;', &quot;\n&quot;;
print &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&quot;;
print &quot;&lt;h1&gt;$headline&lt;/h1&gt;\n&quot;;
print &quot;&lt;p&gt;on ne renonce ici qu'au module CGI ;-)&lt;/p&gt;\n&quot;;
print &quot;&lt;/body&gt;&lt;/html&gt;\n&quot;;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans les mesures recommand&eacute;es pour un programmation propre, on compte dans tous les cas l'utilisation de l'option d'appel <code>-w</code> dans la premi&egrave;re ligne du script. L'interpr&eacute;teur Perl sortira ainsi les avertissements sur les commandes douteuses avant d'ex&eacute;cuter le script. Certaines maladresses dans le code source sont ainsi reconnues sans engloutir du temps dans la recherche.</p>

<p>Dans le m&ecirc;me esprit, l'instruction <code>use strict;</code> vise le m&ecirc;me objectif. Elle obtient qu'un module sp&eacute;cial <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulesstandard.htm#pragma_module"><b>module Pragma</b></a> soit incorpor&eacute; et fasse en sorte que l'interpr&eacute;teur Perl n'accepte aucune construction douteuse avant qu'il n'ex&eacute;cute le script. Cela peut &ecirc;tre par exemple des variables non d&eacute;finies. De cette fa&ccedil;on &eacute;galement des erreurs, provenant d'une programmation distraite ou chaotique, peuvent &ecirc;tre &eacute;vit&eacute;es qui passent inaper&ccedil;ues lors d'une interpr&eacute;tation tol&eacute;rante du texte source.</p>

<p>L'instruction <code>use CGI::Carp qw(fatalsToBrowser);</code> est vivement recommand&eacute;e par les programmeurs CGI. Elle incorpore un module sp&eacute;cial qui, lors d'une interruption du script en raison d'une erreur de syntaxe ou d'une instruction telle que <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/controle.htm#die"><b>die</b></a>, &eacute;crit l'origine de l'erreur directement sur la sortie standard, &agrave; savoir la transmet au navigateur appelant. De cette fa&ccedil;on les programmeurs CGI s'&eacute;pargnent lors de l'interruption du script, la recherche du message d'erreur dans le fichier Log d'erreurs - la plupart du temps tr&egrave;s long - du serveur Web. Cette instruction ne sert cependant &agrave; rien si des erreurs apparaissent d&eacute;j&agrave;, avant que l'interpr&eacute;teur Perl puisse &ecirc;tre ex&eacute;cut&eacute;, donc par exemple quand la premi&egrave;re ligne du fichier indique un emplacement erron&eacute; pour l'interpr&eacute;teur Perl.</p>

<p>Quand vous mentionnez <code>use strict;</code>, Perl vous impose de d&eacute;clarer toutes vos variables avant la premi&egrave;re utilisation (par exemple avec <code>my</code>). Dans l'exemple ci-dessus, c'est le cas pour l'initialisation de <code>$headline</code>. Ceci a l'avantage de provoquer des erreurs logiques si, dans le reste du script, vous n'avez pas &eacute;crit correctement un nom de variable. L'emploi de my obtient qu'une variable ne soit valable que dans le fichier ou dans le bloc d'instructions actuel. De plus amples d&eacute;tails &agrave; ce sujet dans la description de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/controle.htm#my"><b>my</b></a>.</p>

<p>Comme vous pouvez le voir dans l'exemple ci-dessus, c'est avec un sourire rus&eacute; que le script avoue dans sa sortie &agrave; l'ordinateur appelant, qu'il n'utilise pas le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/cgi.htm"><b>module CGI</b></a>. En effet, vous devez, si vous voulez &eacute;crire des scripts CGI, vous pencher sur ce module et sa syntaxe. Le menace de devoir utiliser ce module a d&eacute;j&agrave; pris des allures de contrainte maladive chez certains, pourtant pour de nombreux scripts CGI, l'utilisation de ce module CGI est en tout cas &agrave; recommander.</p>

<p>En g&eacute;n&eacute;ral, l'acc&egrave;s &agrave; des mesures disponibles et &eacute;prouv&eacute;es fait partie d'un style de programmation propre. Perl n'est pas seulement livr&eacute; tout seul comme interpr&eacute;teur Perl, mais avec toute une s&eacute;rie de module de code tout pr&ecirc;ts. qui facilitent beaucoup de t&acirc;ches de programmation. Apr&egrave;s que vous vous &ecirc;tes familiaris&eacute;  avec les &eacute;l&eacute;ments du langage et les fonctions int&eacute;gr&eacute;es de Perl, vous devez donc &agrave; tout prix vous pencher sur les <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/index.htm"><b>modules Perl</b></a>.</p>

<p>Pour des scripts plus importants, vous devez r&eacute;partir le code source en  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programmes</b></a>. Avec cette technique, vous pouvez d&eacute;finir des blocs d'instructions qui se chargent de certaines t&acirc;ches et qui peuvent &ecirc;tre appel&eacute;s &agrave; partir de diff&eacute;rents emplacements dans le script. De plus, vous pouvez employer la techniques des sous-programmes pour diviser le cours du script en proc&eacute;dures partielles et n'ex&eacute;cuter que certaines parties du script.</p>

<p>Depuis la version 5 de l'interpr&eacute;teur, Perl permet &eacute;galement la <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="objets.htm"><b>programmation orient&eacute;e sur l'objet</b></a>. C'est certes un peu difficile &agrave; comprendre de prime abord pour des n&eacute;ophytes, cependant quand on s'y habitue, des applications plus importantes en Perl sont en fin de compte plus simples &agrave; programmer, et le code appara&icirc;t sensiblement plus lisible.</p>

<p>Finalement les recommandations suivantes font partie d'une &quot;programmation propre&quot;:</p>

<ul>
<li>Faites des <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#commentaires"><b>commentaires en Perl</b></a> pour toutes les instructions ou tous les blocs d'instructions de votre script qui sortent de l'ordinaire. Vous devez cependant veiller &agrave; ne pas trop en faire. Un script dans lequel on compte dix lignes de commentaire pour une ligne de code est &agrave; son tour peu lisible.</li>
<li>Notez le texte source de fa&ccedil;on &agrave; ce qu'il soit clair et a&eacute;r&eacute;. Pour cela, vous disposez des lignes vides entre les parties logiques du script, des retraits qui permettent avant tout de reconna&icirc;tre pour les <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#blocs_instructions"><b>blocs d'instructions</b></a> ce qui en fait partie et ce qui se situe en dehors. Avant tout la parenth&egrave;se accolade de fermeture d'un bloc doit figurer dans la m&ecirc;me colonne de texte que le premier signe du mot qui introduit ce bloc.</li>
<li>Utilisez un sch&eacute;ma homog&egrave;ne pour l'attribution de noms.  Il est pr&eacute;f&eacute;rable de voir une s&eacute;rie de variables portant les noms <code>$nom</code>, <code>$telephone</code>, <code>$courriel</code> et <code>$accueil</code> plut&ocirc;t que s'appelant <code>$nom</code>, <code>$numero_Telephone</code>, <code>$Adresse_electronique</code> et <code>$Homepage</code>.</li>
</ul>





<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="obligatcgi.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="obligatcgi.htm"><b>Instructions CGI n&eacute;cessaires en Perl</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="../introduction/traitementformulaire.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../introduction/traitementformulaire.htm"><b>Formulaires HTML et CGI</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
