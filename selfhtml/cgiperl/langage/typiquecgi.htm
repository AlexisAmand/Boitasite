<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: CGI/Perl / &Eacute;l&eacute;ments de langage Perl / Travaux CGI typiques en Perl</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Comment r&eacute;soudre des travaux CGI typiques avec Perl.">
<meta name="keywords"       content="SELFHTML, Perl, CGI, compteur CGI, formulaire courriel, Counter, Form-Mailer, livre de visites, DBI, application frontale de base de donn&eacute;es">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/cgiperl/langage/typiquecgi.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // CGI/Perl == ../index.htm // &Eacute;l&eacute;ments de langage Perl == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Travaux CGI typiques en Perl</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#solutions"><b>Solutions CGI typiques en Perl</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#compteur"><b>Compteur d'acc&egrave;s (Counter) </b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#formulaire_courriel"><b>Formulaire courriel (Form-Mailer)</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#livre_visites"><b>Livre de visites</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#dbfrontend"><b>Application frontale de bases de donn&eacute;es</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="solutions">Solutions CGI typiques en Perl</a></h2>

<p>Perl diff&egrave;re par exemple de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../introduction/technologies/php.htm"><b>PHP</b></a> ou de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../introduction/technologies/asp.htm"><b>ASP</b></a> en ce qu'il n'est pas con&ccedil;u sp&eacute;cialement pour des applications Web, mais qu'il est un langage de programmation ouvert pour des solutions de toutes sortes bas&eacute;es sur des scripts. Il poss&egrave;de cependant des propri&eacute;t&eacute;s qui le qualifient comme langage pour les scripts CGI: En font partie les puissantes fonctions pour le traitement des cha&icirc;nes de caract&egrave;res et les descripteurs de fichier, mais aussi les nombreuses fonctions sp&eacute;cifiques &agrave; Unix, parmi lesquelles les scripts CGI &eacute;crits en Perl et qui sont mis en &#339;uvre dans des environnements typiques de serveurs Web comme Linux et Apache et dont vous pouvez profiter. Par la conception modulaire de Perl, il existe entre-temps des modules qui se pr&ecirc;tent sp&eacute;cialement &agrave; l'utilisation dans les scripts CGI - avant tout le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/cgi.htm"><b>module CGI</b></a>, dons vous disposez &agrave; chaque installation standard de Perl. Vous devez en tous cas voir de plus pr&egrave;s les possibilit&eacute;s de ce module quand vous &eacute;crivez des scripts CGI.</p>

<p>Si vous manquez encore d'assurance en Perl et ne vous sentez pas de taille pour programmer une application CGI de bout en bout d'apr&egrave;s vos propres id&eacute;es, alors vous pouvez piocher dans les nombreux scripts disponibles sur la toile. Il existe de nombreux fournisseurs qui proposent des scripts en gratuiciel ou en partagiciel. Pour faire tourner un tel script sur votre serveur ou sur un environnement HTTP local et l'adapter &agrave; vos besoins, vous devez toutefois vous attaquer au texte source du script et pouvoir retracer la logique de programmation appliqu&eacute;e par le d&eacute;veloppeur du script. Quand vous avez de la chance, le script de votre choix est bien document&eacute; et il n'est pas difficile de l'adapter &agrave; ses propres besoins. Dans l'index des liens de l'offre en ligne de SELFHTML actuel, vous trouverez un r&eacute;capitulatif de fournisseurs de scripts CGI tout faits en Perl et autres langages:</p>

<p><img src="../../src/serverdoc.gif" width="15" height="10" border="0" alt="Page d'information: connexion exig&eacute;e">&nbsp;<a target="_top" href="http://www.selfhtml.com.fr/liens/cgiperl.htm"><b>Index de liens SELFHTML: CGI/Perl</b></a></p>

<p>Ci-apr&egrave;s, quelques domaines d'application typiques de scripts CGI sont abord&eacute;s. Il est d&eacute;crit &agrave; quoi ressemble le d&eacute;roulement du programme  d'un script correspondant, et quelles composantes de Perl y sont indispensables. Les descriptions contiennent des liens aux endroits o&ugrave; vous trouverez d'autres d&eacute;tails.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="compteur">Compteur d'acc&egrave;s (Counter)</a></h2>

<p>Un compteur d'acc&egrave;s peut &ecirc;tre soit graphique, soit bas&eacute; sur le texte. Pour un compteur graphique, le script CGI  est appel&eacute; en HTML au moyen d'un rep&egrave;re <code>&lt;img&gt;</code> - Exemple (HTML):</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;img src=&quot;/cgi-bin/counter.pl&quot; alt=&quot;Compteur&quot;&gt;
</pre></td></tr></table>

<p>Pour un compteur bas&eacute; sur le texte, cela se fait &agrave; l'aide de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../introduction/ssi.htm"><b>Server Side Includes</b></a> - Exemple (HTML):</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!--#exec cgi=&quot;/cgi-bin/counter.pl&quot;--&gt;
</pre></td></tr></table>

<p>Le script appel&eacute; doit d'abord lire le fichier avec l'&eacute;tat actuel du compteur, incr&eacute;menter le compteur de 1 et &eacute;crire le nouvel &eacute;tat du compteur dans le fichier. Pour cela existent en Perl les  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm"><b>Fonctions pour l'entr&eacute;e et la sortie et la lecture et l'&eacute;criture de donn&eacute;es</b></a>. Quand il s'agit d'un compteur bas&eacute; sur le texte, le script peut envoyer l'&eacute;tat du compteur  par exemple avec un ent&ecirc;te HTTP avec le   <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../divers/typesmime.htm"><b>type Mime</b></a> <code>text/html</code> au navigateur, qui ins&egrave;re le nombre &agrave; l'endroit de l'instruction Server-Side-Include. Pour un compteur graphique, le script doit retourner un graphique du type GIF, PNG ou bien JPEG, &eacute;tant donn&eacute; que le navigateur attend quelque chose d'&eacute;quivalent dans son rep&egrave;re <code>&lt;img&gt;</code>. Les graphiques PNG peuvent &ecirc;tre cr&eacute;&eacute;s de fa&ccedil;on dynamique en Perl par exemple avec le  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulescpan.htm"><b>module CPAN</b></a> nomm&eacute; <code>GD</code>.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="formulaire_courriel">Formulaire courriel (Form-Mailer)</a></h2>

<p>Le formulaire courriel r&eacute;sout le f&acirc;cheux probl&egrave;me <code>mailto</code> pour les formulaires HTML. Un tel script peut traiter un formulaire HTML quelconque et envoyer les donn&eacute;es par courriel &agrave; un destinataire pr&eacute;vu, en r&egrave;gle g&eacute;n&eacute;rale le fournisseur du projet Web. En HTML, le formulaire courriel est simplement mentionn&eacute; comme attribut <code>action</code> dans le formulaire HTML - Exemple:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;form action=&quot;/cgi-bin/formmail.pl&quot; method=&quot;post&quot;&gt;
</pre></td></tr></table>

<p>Le script est appel&eacute; quand un utilisateur envoie le formulaire. Le script doit utiliser le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/cgi.htm#traitement_formulaires"><b>traitement de formulaires avec le module CGI</b></a>, pour lire les donn&eacute;es de formulaire transmises. Ensuite il doit composer un courriel avec les donn&eacute;es du courriel. Pour ce faire sont avant tout importants l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#concatener_chaines"><b>op&eacute;rateur pour concat&eacute;ner des cha&icirc;nes de caract&egrave;res</b></a> et les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/chainescaracteres.htm"><b>fonctions pour les cha&icirc;nes de caract&egrave;res</b></a>, mais aussi des connaissances sur la construction d'un courriel ainsi que sur la fa&ccedil;on d'envoyer un courriel. La suite d'instructions typiques pour le faire est la suivante:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my $Sendmail_Prog = &quot;/usr/lib/sendmail&quot;;
open(MAIL,&quot;|$Sendmail_Prog -t&quot;) || print &quot;Le programme de courrier �lectronique n'a pas pu �tre lanc&amp;eacute;\n&quot;;
print MAIL &quot;To: $mailto\n&quot;;
print MAIL &quot;Subject: $subject\n\n&quot;;
print MAIL &quot;$texte_courriel\n&quot;;
close(MAIL) || print &quot;Erreur lors de l'envoi du courriel!&quot;;
</pre></td></tr></table>

<p>L'important lors de l'application de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#open"><b>open</b></a> est que le programme <code>sendmail</code>, qui envoie les courriels soit aussi effectivement pr&eacute;sent, et cela dans le chemin mentionn&eacute;. Le chemin de l'exemple et la disponibilit&eacute; de <code>sendmail</code> se basent &agrave; des ordinateurs Unix typiques. Demandez le cas &eacute;ch&eacute;ant &agrave; votre fournisseur d'acc&egrave;s! Le courriel lui-m&ecirc;me comme vous pouvez le voir dans l'exemple est &eacute;crit avec des instructions <code>print</code> dans le canal d'entr&eacute;e et sortie du programme <code>sendmail</code> nomm&eacute; avec <code>open</code>  - dans l'exemple, il s'agit du canal nomm&eacute; <code>MAIL</code>. Il est important que le courriel contienne une premi&egrave;re ligne commen&ccedil;ant par <code>To:</code> et une autre commen&ccedil;ant par <code>Subject:</code>. Avant la sortie du texte du courriel, donc des donn&eacute;es du formulaire pr&eacute;par&eacute;es auparavant pour la sortie, deux caract&egrave;res de contr&ocirc;le <code>\n\n</code> doivent &ecirc;tre not&eacute;s, donc une ligne vide. La fa&ccedil;on et le moyen de transmettre les donn&eacute;es peut varier. Consultez de toutes fa&ccedil;ons les instructions et les questions fr&eacute;quemment pos&eacute;s chez votre fournisseur d'acc&egrave;s et le cas &eacute;ch&eacute;ant, les instructions de votre programme de courrier &eacute;lectronique!</p>

<p>Outre l'envoi du courriel, le script doit naturellement aussi envoyer une sortie au navigateur &agrave; l'aide d'une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="obligatcgi.htm"><b>instruction CGI n&eacute;cessaire en Perl</b></a>. Pour un formulaire courriel, il l'agit logiquement d'une page de remerciements qui confirme &agrave; l'utilisateur que son formulaire a bien &eacute;t&eacute; trait&eacute;.</p>

<p>Dans l'offre en ligne de SELFHTML actuel, vous trouverez un  <img src="../../src/serverdoc.gif" width="15" height="10" border="0" alt="Page d'information: connexion exig&eacute;e">&nbsp;<a target="_top" href="http://www.selfhtml.com.fr/articles/cgiperl/form-mail/"><b>article sp&eacute;cialis&eacute;: formulaire courriel simple</b></a>, qui d&eacute;crit un exemple complet d'un formulaire courriel.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="livre_visites">Livre de visites</a></h2>

<p>Il y a plusieurs fa&ccedil;ons de programmer un livre de visites. L'une d'entre elles est d'&eacute;crire les inscriptions du livre de visites dans un fichier HTML statique qui est affich&eacute; quand l'utilisateur appelle le livre de visites. Le fichier pourrait contenir un formulaire dans lequel l'utilisateur peut porter sa propre inscription comme l'ont &eacute;t&eacute; les inscriptions existantes. Le script qui g&egrave;re le livre de visites est alors appel&eacute; quand l'utilisateur envoie le formulaire avec sa propre inscription. Pour ce faire est not&eacute; dans le rep&egrave;re d'ouverture <code>&lt;form&gt;</code> un appel correspondant - Exemple:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;form action=&quot;/cgi-bin/guestbook.pl&quot; method=&quot;post&quot;&gt;
</pre></td></tr></table>

<p>Le script doit utiliser le  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/cgi.htm#formularverarbeitung"><b>traitement de formulaires avec le module CGI</b></a> pour lire les donn&eacute;es de formulaire transmises. Supposons que le formulaire ait deux champs: un pour le nom du visiteur qui &eacute;crit dans le livre de visites (<code>name=&quot;nom_utilisateur&quot;</code>), et un pour le texte  (<code>name=&quot;texte_utilisateur&quot;</code>). Ensuite il serait possible, apr&egrave;s la lecture avec le module CGI en Perl, d'acc&eacute;der au contenu du champ <code>nom_utilisateur</code> avec par exemple une construction telle que <code>$cgi-&gt;param($nom_utilisateur)</code>.</p>

<p>De plus le script doit lire le fichier HTML avec les inscriptions faites jusqu'alors. Avec la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#open"><b>open</b></a> par exemple, le fichier peut &ecirc;tre ouvert et peut ensuite &ecirc;tre lu par exemple dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>liste</b></a>. Chaque &eacute;l&eacute;ment de la liste est alors une ligne du fichier HTML.</p>

<p>Pour que le script s'y retrouve dans le code HTML qu'il lit et sache o&ugrave; il doit ins&eacute;rer les nouvelles donn&eacute;es, le fichier doit contenir, &agrave; l'endroit correspondant sur une ligne distincte, une &quot;marque secr&egrave;te&quot;, ce qui peut &ecirc;tre r&eacute;solu par un commentaire HTML - Exemple:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!-- NOUVEAU --&gt;
</pre></td></tr></table>

<p>Mais il est &eacute;galement judicieux que le fichier HTML mette encore &agrave; la disposition du script une notice interne, sur une ligne distincte avant chaque inscription existante . Cela aussi et possible avec des commentaires. Exemple d'une inscription dans le fichier HTML:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!-- INSCRIPTION [Christian Delacroix] [21.04.2002]--&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;
&lt;th&gt;von:&lt;/th&gt;&lt;td&gt;Christian Delacroix&lt;/td&gt;
&lt;th&gt;am:&lt;/th&gt;&lt;td&gt;21.04.2002&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;Cette page magnifique a tranform� ma vie etc...&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
</pre></td></tr></table>

<p>Cela facilite ensuite pour le script une recherche &eacute;ventuelle dans le fichier. Pour ins&eacute;rer les donn&eacute;es de formulaire que le script s'est vu transmettre et a lues, il doit d'abord composer le code habituel pour une inscription dans le livre de visites et y ins&eacute;rer les donn&eacute;es du formulaire. Dans l'exemple, le script composerait donc un tableau HTML et mettrait dans les cellules pr&eacute;vues &agrave; cet effet, les valeurs des donn&eacute;es du formulaire. Le mieux est que le script d&eacute;clare pour cela une liste et lui affecte pour chaque ligne du code HTML un &eacute;l&eacute;ment avec le code HTML correspondant. &Agrave; la fin de chaque inscription dans une liste doit figurer <code>\n</code> pour  &quot;nouvelle ligne&quot;. Pour le faire, vous avez besoin de la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/hashlistes.htm#push"><b>push</b></a> et de l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#concatener_chaines"><b>op&eacute;rateur pour concat&eacute;ner des cha&icirc;nes de caract&egrave;res</b></a> - Exemple:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my @nouvelle_inscription;
push(@nouvelle_inscription, &quot;&lt;!-- INSCRIPTION [&quot;.$cgi-&gt;param($nom_utilisateur).&quot;] [&quot;.$Datum.&quot;]--&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;table border=\&quot;1\&quot;&gt;&lt;tr&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;th&gt;von:&lt;/th&gt;&lt;td&gt;&quot;.$cgi-&gt;param($nom_utilisateur).&quot;&lt;/td&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;th&gt;le:&lt;/th&gt;&lt;td&gt;&quot;.$Datum.&quot;&lt;/td&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;/tr&gt;&lt;tr&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;td colspan=\&quot;2\&quot;&gt;&quot;.$cgi-&gt;param($texte_utilisateur).&quot;&lt;/td&gt;\n&quot;);
push(@nouvelle_inscription, &quot;&lt;/tr&gt;&lt;/table&gt;\n&quot;);
</pre></td></tr></table>

<p>La date du jour sauvegard&eacute;e dans <code>$Datum</code>  doit naturellement &ecirc;tre d'abord recherch&eacute;e par le script. Pour cela existent les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/dateheure.htm"><b>fonctions pour la date et l'heure</b></a>.</p>

<p>Le script doit maintenant ins&eacute;rer la nouvelle inscription &agrave; l'endroit o&ugrave; dans le fichier &eacute;tabli jusqu'alors, figure la marque pour l'insertion avec <code>&lt;!--&nbsp;NOUVEAU&nbsp;--&gt;</code>. Il y a une variante possible qui consiste &agrave; faire une nouvelle liste, compos&eacute;e des lignes de l'ancien fichier et des lignes de la nouvelle inscription. Pour cela le script peut traiter dans une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="boucles.htm#foreach"><b>boucle foreach</b></a> l liste avec les lignes lues du fichier et &agrave; l'aide d'une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="expresreg.htm"><b>Expression r&eacute;guli&egrave;re</b></a> de chercher <code>/^&lt;!-- NOUVEAU --&gt;$/</code> et d'ins&eacute;rer &agrave; l'endroit correspondant la liste avec la nouvelle inscription. Le code pourrait par exemple ressembler &agrave;:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my @nouvelles_lignes;
my $ligne;
foreach $ligne (@lignes) {               # @lignes = lignes du fichier lues auparavant
  if(/^&lt;!-- NEU --&gt;/) {                  # bien, ins�rer l'inscription ici
    foreach(@nouvelle_inscription) {             # @nouvelle_inscription = lignes HTML compos�es auparavant
      push(@nouvelles_lignes,$_);              # ajouter ligne par ligne
    }
    push(@nouvelles_lignes,&quot;&lt;!-- NOUVEAU --&gt;\n&quot;);  # pour la prochaine fois ...
  }
  else {                                 # chaque ancienne ligne qui ne contient pas /^&lt;!-- NOUVEAU --&gt;/
    push(@nouvelles_lignes,$ligne);            # copier simplement dans la nouvelle liste
  }
}
</pre></td></tr></table>

<p>La nouvelle liste <code>@nouvelles_lignes</code> contient donc ensuite le lignes de la nouvelle version du fichier HTML du livre de visites. Cette liste doit simplement maintenant &ecirc;tre &eacute;crite encore dans le m&ecirc;me fichier qui a &eacute;t&eacute; lu auparavant. Cela marche avec l'ouverture en &eacute;criture avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#open"><b>open</b></a> et l'&eacute;criture dans le descripteur du fichier du fichier ouvert avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#print"><b>print</b></a>.</p>

<p>Pour finir, le script ne doit naturellement pas oublier d'envoyer une sortie au navigateur &agrave; l'aide d'une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="obligatcgi.htm"><b>instruction CGI n&eacute;cessaire en Perl</b></a> . le mieux est bien de sortir simplement un ent&ecirc;te HTTP et <code>@nouvelles_lignes</code>. Ce sont deux commandes <code>print</code>, et d&eacute;j&agrave; l'utilisateur qui a envoy&eacute; le formulaire peut voir le livre de visites avec sa propre inscription.</p>

<p>Il y a bien s&ucirc;r encore beaucoup d'autres choses importantes  que le livre de visites doit r&eacute;gler. Pae exemple, les fichiers qu'un script CGI ouvre doivent &ecirc;tre prot&eacute;g&eacute;s essentiellement contre un acc&egrave;s multiple accidentel - car deux utilisateurs peuvent tr&egrave;s bien en m&ecirc;me temps envoyer un formulaire avec une nouvelle inscription. Alors deux processus avec le m&ecirc;me script se g&ecirc;neraient l'un l'autre. Ce qu'on appelle le verrouillage de fichier pour la protection de l'acc&egrave;s marche avec la fonction <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../fonctions/entreesortie.htm#flock"><b>flock</b></a>. De plus, le script doit r&eacute;agir quand le fichier HTML avec les inscriptions du livre de visites devient trop important. Dans ce cas, le script pourrait &eacute;crire une partie de la liste avec les inscriptions les plus anciennes dans un deuxi&egrave;me fichier et lier ce fichier avec le fichier avec les inscriptions plus r&eacute;centes, c'est &agrave; dire donc poser un lien HTML au deuxi&egrave;me fichier dans le premier fichier.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="dbfrontend">Application frontale de bases de donn&eacute;es</a></h2>

<p>Vous n'avez pas besoin d'une base de donn&eacute;es pour chaque application, avec laquelle un visiteur de pages Web peut demander des donn&eacute;es. Les stocks de donn&eacute;es d'une taille ne d&eacute;passant quelques Megaoctets et qui ne sont pas utilis&eacute;s trop intens&eacute;ment, peuvent tout &agrave; fait se garder aussi dans des fichiers texte (par exemple s&eacute;par&eacute;s par des virgule ou dans une structure <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Autre page d'information">&nbsp;<a href="../../xml/index.htm"><b>XML</b></a>), qui peuvent ensuite &ecirc;tre g&eacute;r&eacute;s avec des scripts CGI en Perl. Vous avez besoin quelque soit le cas de figure d'une  &quot;Application frontale&quot; publique (donc une application  Web) pour les requ&ecirc;tes &agrave; un stock de donn&eacute;es  ou bien d'une application frontale accessible seulement en interne pour la gestion d'un stock de donn&eacute;es (&eacute;galement une application Web qui rend possible l'ajout, la modification et l'effacement d'enregistrements au moyen de formulaire. Vous ne devez ensuite choisir une v&eacute;ritable banque de donn&eacute;es que lorsque le stock de donn&eacute;es n&eacute;cessite une maintenance intensive (beaucoup de modifications dans le stock de donn&eacute;es - un cas pour le &quot;verrouillage de tableaux&quot;), ou bien quand la structure des donn&eacute;es est fortement relationnelle et travaille avec  de nombreuses consultations de tables, ou lorsque le stock de donn&eacute;es est vraiment tr&egrave;s grand et que sa taille approximative d&eacute;passe quelques m&eacute;gaoctets Il faut bien s&ucirc;r que sur le serveur un logiciel de bases de donn&eacute;es correspondant soit install&eacute; - par exemple le produit gratuiciel populaire <b>MySQL</b>. Ce dernier s'est impos&eacute; entre-temps de telle fa&ccedil;on dur la toile qu'il est pratiquement sans concurrence pour des bases de donn&eacute;es relationnelles de taille moyenne. Demandez le cas &eacute;ch&eacute;ant &agrave; votre fournisseur d'acc&egrave;s si vous disposez de MySQL l&agrave; ou vous avez lou&eacute; un emplacement sur le WWW ou plut&ocirc;t prenez ce facteur en compte lors du choix de votre fournisseur d'acc&egrave;s dans la mesure ou vous avez besoin d'une liaison de donn&eacute;es. MySQL est certes utilis&eacute; essentiellement en relation avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../introduction/technologies/php.htm"><b>PHP</b></a>, mais il est tout aussi possible d'&eacute;crire avec Perl des applications frontales de bases de donn&eacute;es pouvant communiquer avec MySQL.</p>

<p>Avant d'&eacute;crire une application frontale  de base de donn&eacute;es en Perl, vous devez d'abord vous attaquer intensivement &agrave; MySQL, aux interfaces de bases de donn&eacute;es et au langage de requ&ecirc;te SQL. Pour cela il y a des documentations et des livres. Dans l'index des liens de l'offre en ligne de  SELFHTML actuel vous trouverez les liens correspondants:</p>

<p><img src="../../src/serverdoc.gif" width="15" height="10" border="0" alt="Page d'information: connexion exig&eacute;e">&nbsp;<a target="_top" href="http://www.selfhtml.com.fr/liens/base_de_donnees.htm"><b>SELFHTML index des liens: Liaison de donn&eacute;es</b></a></p>

<p>Cette partie succincte ne peut ici traiter que quelques d&eacute;tails g&eacute;n&eacute;raux du point de vue de Perl. Dans un script Perl qui doit communiquer avec une base de donn&eacute;es MySQL, il faut y faire figurer au d&eacute;but des lignes analogues &agrave; celles-ci:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
use CGI;
use DBI;

my $DB_NAME = &quot;produits&quot;;
my $DB_DSN = &quot;DBI:mysql:database=$DB_NAME&quot;;
my $DB_USER = &quot;&quot;;
my $DB_PASSWD = &quot;&quot;;

my $dbh = DBI-&gt;connect($DB_DSN, $DB_USER, $DB_PASSWD) or die &quot;Erreur lors de la liaison avec la base de donn�es: $!&quot;;
</pre></td></tr></table>

<p><code>DBI</code> est un  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/modulescpan.htm"><b>module CPAN</b></a>, dont vous avez besoin en r&egrave;gle g&eacute;n&eacute;rale pour pouvoir acc&eacute;der avec Perl aux bases de donn&eacute;es. Il repr&eacute;sente une interface ind&eacute;pendante des bases de donn&eacute;es, aux diff&eacute;rents pilotes sp&eacute;cifiques aux bases de donn&eacute;es. Votre script Perl communique donc avec la base de donn&eacute;es en ce sens qu'il utilise les fonctions et m&eacute;thodes du module DBI.</p>

<p>Dans l'exemple de code, le script d&eacute;clare quelques scalaires, qui sont indispensables pour le module et la liaison avec la base de donn&eacute;es. <code>$DB_NAME</code> est le nom de la base de donn&eacute;es. <code>DB_DSN</code> est une information pour le module DBI concernant le pilote devant &ecirc;tre utilis&eacute; pour la liaison avec la  base de donn&eacute;es (dans l'exemple: <code>mysql</code>), et quelle est la base de donn&eacute;es &agrave; ouvrir (dans l'exemple la base de donn&eacute;es sauvegard&eacute;e dans <code>$DB_NAME</code>). Comme le serveur  SQL de MySQL, qui surveille les acc&egrave;s &agrave; la base de donn&eacute;es et les sorties vers des processus externes appelants, ne l&acirc;che les donn&eacute;es des bases de donn&eacute;es que contre l'identification et le mot de passe de l'utilisateur, ceux-ci sont &eacute;galement &agrave; mentionner lors de la liaison &agrave; la base de donn&eacute;es. Dans l'exemple, les scalaires correspondantes  <code>$DB_USER</code> et <code>$DB_PASSWD</code> se voient affecter un contenu vide. Pour une utilisation autoris&eacute;e de la base de donn&eacute;es, vous devez cependant mentionner ici les donn&eacute;es d'identification.</p>

<p>Avec <code>DBI-&gt;connect(...)</code> la liaison &agrave; la base de donn&eacute;es est &eacute;tablie. La valeur retourn&eacute;e est sauvegard&eacute;e dans une variable du descripteur de la base de donn&eacute;es, dans l'exemple <code>$dbh</code>. Par ce descripteur vous pouvez, dans le d&eacute;roulement ult&eacute;rieur du script  adresser les fonctions ou m&eacute;thodes du module DBI comme dans cet exemple:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my @DB_champs = $dbh-&gt;list_fields('donnees_produits');
$dbh-&gt;disconnect;
</pre></td></tr></table>

<p><code>list_fields</code> recherche les noms de champs d'une certaine table de la base de donn&eacute;es, dans l'exemple, la table  <code>donnees_produits</code>. Avec <code>$dbh-&gt;disconnect</code> une liaison &agrave; la banque de donn&eacute;es est referm&eacute;e &agrave; la fin. La communication proprement dite avec la base de donn&eacute;es a cependant lieu par des commandes SQL appropri&eacute;es. L'exemple qui suit montre comment noter ces commandes dans un script Perl et lancer ensuite une requ&ecirc;te dans la base de donn&eacute;es:</p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
my $SQL_Statement = &quot;SELECT numero, nom, description FROM donnees_produits &quot;.
                    &quot;WHERE donnees_produits.numero &gt;= &quot;.$cgi-&gt;param($de_numero).
                    &quot; AND donnees_produits.numero &lt;= &quot;.$cgi-&gt;param($a_numero).
                    &quot; ORDER BY &quot;.$cgi-&gt;param($champ_tri);

my $requete = $dbh-&gt;prepare($SQL_Statement);
$requete-&gt;execute();

my @Datensatz;
while(@enregistrement = $requete-&gt;fetchrow_array()) {
  traiter_enregistrement(@enregistrement);
}
</pre></td></tr></table>

<p>Pour la requ&ecirc;te dans la base de donn&eacute;es, vous devez former une commande SQL et la sauvegarder dans une scalaire. Pour cela, vous devez conna&icirc;tre la syntaxe SQL. Normalement, il en ira comme dans l'exemple et votre script CGI tirera les param&egrave;tres de la requ&ecirc;te d'un formulaire HTML, que l'utilisateur qui a appel&eacute; le script en envoyant le formulaire, a rempli. Pour cela, le script doit utiliser le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../modules/cgi.htm#traitement_formulaires"><b>traitement de formulaires avec le module CGI</b></a>  pour lire les donn&eacute;es de formulaire transmises. Une construction dynamique d'une commande SQL &agrave; partir des donn&eacute;es de formulaire est alors possible avec l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#concatener_chaines"><b>op&eacute;rateur pour concat&eacute;ner des cha&icirc;nes de caract&egrave;res</b></a>. &Agrave; la fin la commande <code>$requete = $dbh-&gt;prepare($SQL_Statement)</code> fait savoir au module DBI le souhait d'effectuer une requ&ecirc;te. et apr&egrave;s la commande de requ&ecirc;te peut &ecirc;tre lanc&eacute;e avec <code>$requete-&gt;execute()</code>. La base de donn&eacute;es renvoie maintenant dans l'ordre tous les enregistrements trouv&eacute;s. Chaque enregistrement comprend plusieurs champs. Chaque enregistrement est retourn&eacute; s&eacute;par&eacute;ment en tant que <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="listes.htm"><b>liste</b></a>. Dans une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="boucles.htm#while"><b>boucle while</b></a>, qui tourne aussi longtemps que l'appel de <code>$requete-&gt;fetchrow_array()</code> donne un nouvel enregistrement, un <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="sousroutines.htm"><b>sous-programme</b></a> nomm&eacute; <code>traiter_enregistrement</code>  est appel&eacute; dans l'exemple et re&ccedil;oit comme param&egrave;tre, la liste actuelle de l'enregistrement. Ce sous programme pourrait par exemple pr&eacute;parer le code HTML pour la sortie d'un enregistrement. Car il faut qu'ensuite le script envoie une sortie au navigateur &agrave; l'aide d'une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="obligatcgi.htm"><b>instruction CGI n&eacute;cessaire en Perl</b></a>.</p>

<p>Pour la gestion de la base de donn&eacute;es par une application frontale script Perl/formulaire HTML la fa&ccedil;on de proc&eacute;der est tr&egrave;s semblable et ne n&eacute;cessite que des commandes SQL suppl&eacute;mentaires pour l'ajout ou la r&eacute;&eacute;criture d'enregistrements modifi&eacute;s dans la base de donn&eacute;es. Il est important de prot&eacute;ger un tel Front-end pour la maintenance de bases de donn&eacute;es interne contre les acc&egrave;s publics. Cela peut se faire en deux temps: d'un c&ocirc;t&eacute; un tel formulaire d'application frontale ne doit se trouver que dans un r&eacute;pertoire <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../divers/htaccess.htm"><b>htaccess</b></a> prot&eacute;g&eacute; et de l'autre le formulaire doit &eacute;galement contenir des champs pour le nom d'utilisateur et son mot de passe pour un acc&egrave;s en &eacute;criture de la base de donn&eacute;es.</p>




<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="../fonctions/chainescaracteres.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../fonctions/chainescaracteres.htm"><b>Fonctions pour les cha&icirc;nes de caract&egrave;res</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="objets.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="objets.htm"><b>Programmation orient&eacute;e sur l'objet</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>CGI/Perl</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments de langage Perl</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
