<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: JavaScript/DOM / &Eacute;l&eacute;ments du langage JavaScript / Boucles (while/for/do-while)</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="&Agrave; quoi servent les boucles et comment noter ces instructions en JavaScript.">
<meta name="keywords"       content="SELFHTML, JavaScript, while, do-while, for, boucles">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/javascript/langage/boucles.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // JavaScript/DOM == ../index.htm // &Eacute;l&eacute;ments du langage JavaScript == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>JavaScript/DOM</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments du langage JavaScript</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Boucles (while/for/do-while)</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#while"><b> Boucles avec &quot;while&quot;</b></a> <br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#for"><b> Boucles avec &quot;for&quot;</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#dowhile"><b> Boucles avec &quot;do-while&quot;</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#break_continue"><b>Contr&ocirc;le &agrave; l'int&eacute;rieur de boucle - break et continue</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><img src="../../src/js10.gif" width="30" height="30" border="0" alt="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" border="0" alt="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" border="0" alt="MS IE 3.0">&nbsp;<a class="an" name="while">Boucles avec &quot;while&quot;</a></h2>

<p>&Agrave; l'aide de boucles while vous pouvez r&eacute;p&eacute;ter des instructions de programme jusqu'&agrave; ce que la condition formul&eacute;e dans la boucle soit remplie. Ce genre de boucles est indiqu&eacute; quand vous ne savez pas combien de boucles doivent &ecirc;tre ex&eacute;cut&eacute;es.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/signification_html.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var saisie = &quot;&quot;;
 var compteur = 1;
 while(saisie != &quot;how to make love&quot;  && compteur &lt;= 3) {
   saisie = window.prompt(compteur + &quot; Essai: Que signifie 'HTML'?&quot;,&quot;&quot;);
   compteur++;
 }
 if(saisie != &quot;how to make love&quot;)
   document.write(&quot;&lt;big&gt;Commencez par apprendre HTML! ...&lt;\/big&gt;&quot;);
 else
   document.write(&quot;&lt;big&gt;Bien, Vous avez compris de quoi il retourne! ...&lt;\/big&gt;&quot;);
// --&gt;
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple demande &agrave; l'utilisateur dans une boucle while d'entrer la signification de l'abr&eacute;viation HTML jusqu'&agrave; trois fois dans une fen&ecirc;tre de dialogue (<code>window.prompt()</code>). La boucle peut se terminer pour deux raisons: soit l'utilisateur donne la signification exacte de l'abr&eacute;viation ou la variable <code>compteur</code>, qui compte le nombre de tentatives a atteint une valeur sup&eacute;rieure &agrave; 3. Quand la boucle est termin&eacute;e, on ne sait pas laquelle de ces deux causes possibles a mis fin &agrave; la boucle. Pour le savoir, la v&eacute;rification est faite dans l'exemple &agrave; la fin &agrave; l'aide d'une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="condition.htm#if_else"><b>condition si, alors... avec &quot;if&quot;</b></a> pour savoir si la boucle a &eacute;t&eacute; termin&eacute;e parce que l'entr&eacute;e &eacute;tait fausse. Selon le cas si l'entr&eacute;e &eacute;tait correcte ou bien fausse  la phrase correspondante est sortie dans la fen&ecirc;tre d'affichage du navigateur avec <code>document.write</code>.</p>

<p>Une boucle while commence avec le mot  <code>while</code> (<i>while = aussi longtemps que</i>). Suit entre parenth&egrave;ses la condition. Pour formuler une condition, vous avez besoin d' <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#comparaison"><b>op&eacute;rateurs de comparaison</b></a>. Le contenu de la boucle sera r&eacute;p&eacute;t&eacute; jusqu'&agrave; ce que la condition soit vraie.
.</p>

<p>En r&egrave;gle g&eacute;n&eacute;rale une boucle while contient plusieurs instructions &agrave; l'int&eacute;rieur de la boucle. Notez toutes ces instructions &agrave; l'int&eacute;rieur de parenth&egrave;ses <b>accolade</b> <code>{</code> et <code>}</code> (touches Alt 123 et Alt 125), comme dans l'exemple  (voir aussi la partie traitant des  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="regles.htm#blocs_instructions"><b>blocs d'instructions</b></a>).</p>

<h3 class="inf">Attention:</h3>

<p>Veillez toujours pour de telles boucles qu'il y ait au moins une possibilit&eacute; de terminer la boucle apr&egrave;s un laps de temps raisonnable. Autrement, vous cr&eacute;ez ce qu'on appelle une "boucle sans fin", de laquelle l'utilisateur ne peut sortir qu'en interrompant brutalement son navigateur WWW. C'est particuli&egrave;rement irritant au cours de sessions en ligne sur le WWW!</p>

<p>Pour &eacute;viter les boucles sans fin, vous avez besoin de quelque chose qui &agrave; un moment donn&eacute; permette de sortir de la boucle. Le plus souvent est d&eacute;fini &agrave; cette fin un &quot;compteur&quot; - dans notre exemple: la variable <code>compteur</code>. Cette variable a ici une valeur de d&eacute;part de <code>1</code> et sera incr&eacute;ment&eacute;e de 1 &agrave; chaque passage de boucle avec l'instruction <code>compteur++;</code>. Quand dans l'exemple le compteur est &eacute;gal ou sup&eacute;rieur &agrave; 3 la boucle est interrompue.</p>

<p>D'autres possibilit&eacute;s pour interrompre une boucle sont d&eacute;crites  <img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#break_continue"><b>ci-apr&egrave;s</b></a>.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><img src="../../src/js10.gif" width="30" height="30" border="0" alt="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" border="0" alt="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" border="0" alt="MS IE 3.0">&nbsp;<a class="an" name="for">Boucles avec &quot;for&quot;</a></h2>

<p>La condition de boucle d'une boucle for pr&eacute;voit d'embl&eacute;e un compteur et une condition pour l'interruption.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/police.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var sortie = &quot;&quot;;
 for(var i = 10; i &lt;= 36; i++)
   sortie = sortie + &quot;&lt;span style=\&quot;font-size:&quot; + i + &quot;pt\&quot;&gt;�criture avec &quot; + i + &quot; points&lt;\/span&gt;&lt;br&gt;&quot;;
 document.write(sortie);
// --&gt;
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit une variable nomm&eacute;e <code>sortie</code>, qui au cours d'une boucle for re&ccedil;oit toujours plus de contenu pour l'&eacute;crire &agrave; la fin dans la fen&ecirc;tre du navigateur avec  <code>document.write</code>. La boucle for a &eacute;t&eacute; ex&eacute;cut&eacute;e 27 fois, &agrave; savoir autant de fois que le compteur d&eacute;fini dans la variable <code>i</code> et initialis&eacute; avec la valeur <code>10</code> reste plus petit ou &eacute;gal &agrave;  36, sachant qu'&agrave; chaque tour de boucle il est incr&eacute;ment&eacute; de 1 (<code>i++</code>). &Agrave; chaque boucle, la variable <var>sortie</var> avec sa valeur respective est ins&eacute;r&eacute;e dans du code HTML avec la mention de <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Chapitre: vue d'ensemble">&nbsp;<a href="../../css/index.htm"><b>CSS</b></a> <code>font-size</code> (taille de police). La valeur qui est ici attribu&eacute;e &agrave;  <code>font-size</code> , est &agrave; chaque boucle la valeur de  <code>i</code>. Ainsi l'impression est-elle donn&eacute;e que des mentions CSS sont g&eacute;n&eacute;r&eacute;es de  <code>font-size:10pt</code> jusqu'&agrave; <code>font-size:36pt</code>. Le r&eacute;sultat est sorti &agrave; la fin. Pour la compr&eacute;hension des parties constituant <code>sortie</code> voir aussi les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#concatener_chaines"><b>op&eacute;rateurs pour relier des cha&icirc;nes de caract&egrave;res</b></a>.</p>

<p>Une boucle for commence par le mot  <code>for</code>. Suit entre parenth&egrave;ses la condition de la boucle. Pour la boucle for entre en vigueur une syntaxe fixe. &Agrave; l'int&eacute;rieur m&ecirc;me de la condition de la boucle figurent trois instructions. Dans la premi&egrave;re instruction est d&eacute;fini et initialis&eacute; le compteur de boucles. Dans l'exemple, un compteur  <code>i</code> est d&eacute;fini et initialis&eacute; avec la valeur <code>10</code>. La deuxi&egrave;me condition contient la condition &agrave; partir de laquelle la boucle se termine. Pour cela, vous avez besoin d'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="operateurs.htm#comparaison"><b>op&eacute;rateurs de comparaison</b></a>. Dans la troisi&egrave;me instruction, le compteur de boucles est modifi&eacute; de telle fa&ccedil;on qu'&agrave; un moment ou &agrave; un autre il remplira la deuxi&egrave;me condition not&eacute;e.  Dans l'exemple, i est incr&eacute;ment&eacute; de 1 gr&acirc;ce &agrave; <code>i++</code> &agrave; chaque tour de boucle.  &Agrave; cet endroit pourrait aussi figurer quelque chose comme <code>i=i+10</code> (incr&eacute;menter de 10 &agrave; chaque tour de boucle).</p>

<p><a name="for_in"></a>Une variante sp&eacute;ciale de la boucle for est nomm&eacute;e boucle for-in.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/proprietes_objet.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var sortie = &quot;&quot;;
 for (var propriete in document)
   sortie = sortie + &quot;document.&quot; + propriete + &quot;: &quot; + document[propriete] + &quot;&lt;br&gt;&quot;;
 document.write(&quot;&lt;h1&gt;Propri�t�s de l'objet &lt;i&gt; document &lt;\/i&gt;&lt;\/h1&gt;&quot;)
 document.write(sortie);
// --&gt;
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple montre comment &agrave; l'aide d'une boucle for-in vous pouvez en apprendre plus sur les performances JavaScript de votre navigateur. Dans l'exemple, les propri&eacute;t&eacute;s de l'objet  <code>document</code> sont sorties. &Agrave; chaque tour de boucle, la variable  <code>sortie</code> est &eacute;largie d'une propri&eacute;t&eacute; d'objet. La valeur actuelle de la propri&eacute;t&eacute; d'objet peut &ecirc;tre sortie avec <code>nom d'objet[propriete]</code>. La boucle tourne aussi longtemps qu'il reste des propri&eacute;t&eacute;s d'objet - c'est ce que signifie <code>for in</code>.</p>

<h3 class="inf">Attention:</h3>

<p>Si vous voulez faire d&eacute;pende plus d'une instruction de la boucle for, vous devez, comme d'habitude, enfermer ces instructions dans des parenth&egrave;ses accolade.</p>

<p>Vous ne pouvez appliquer la boucle <code>for in</code> avec Opera, que sur des objets ou variables que vous avez d&eacute;finis. Avec les objets pr&eacute;d&eacute;finis, la boucle reste sans effet.</p>

<p>L'explorer Internet MS ne conna&icirc;t ce genre de boucle que depuis la version 4.01.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><a class="an" name="dowhile"><img src="../../src/js12.gif" width="30" height="30" border="0" alt="JavaScript 1.2"><img src="../../src/netsc4.gif" width="30" height="30" border="0" alt="Netscape 4.0"><img src="../../src/msie4.gif" width="30" height="30" border="0" alt="MS IE 4.0">&nbsp;Boucles avec  &quot;do-while&quot;</a></h2>

<p>La boucle do-while est une variante de la  <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#while"><b>boucle while</b></a> normale. La diff&eacute;rence entre les deux r&eacute;side en ce que, pour la boucle while normale la condition de la boucle est v&eacute;rifi&eacute;e <b>avant</b> l'ex&eacute;cution du code tandis que pour la boucle do-while le code est <b>d'abord</b> ex&eacute;cut&eacute; et qu'apr&egrave;s seulement la condition de la boucle est v&eacute;rifi&eacute;e. De cette fa&ccedil;on il vous est possible d'imposer que les instructions de la boucle soient ex&eacute;cut&eacute;es dans tous les cas au moins une fois, m&ecirc;me quand la condition de la boucle s'av&egrave;re fausse d&eacute;s le d&eacute;part.</p>


<h3 class="xmp">Exemple:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
une fois comme ceci:
 &lt;script type=&quot;text/javascript&quot;&gt;
 &lt;!--
 var x = 10;
 do {
   document.write(&quot;&lt;br&gt;x * x = &quot; + (x * x));
   x = x + 1;
 }
 while(x &lt; 10);
// --&gt;
&lt;/script&gt;
et une fois comme cela:
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var x = 10;
 while(x &lt; 10) {
   document.write(&quot;&lt;br&gt;x * x = &quot; + (x * x));
   x = x + 1;
 }
// --&gt;
&lt;/script&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple, deux petits passages JavaScript sont d&eacute;finis. Dans les deux passages une variable <code>x</code> et d&eacute;finie et la valeur <code>10</code> lui est affect&eacute;e. Dans le premier passage, le carr&eacute; de <code>x</code> (incr&eacute;ment&eacute; de 1 &agrave; chaque boucle) est &eacute;crit aussi longtemps que  <code>x</code> est plus petit que <code>10</code>. &Eacute;tant donn&eacute; que <code>x</code> a d&eacute;j&agrave; d&egrave;s le d&eacute;but la valeur <code>10</code>, la condition d'interruption est d&eacute;j&agrave; remplie en somme, d&egrave;s le d&eacute;part. Malgr&eacute; tout, le carr&eacute; de  <code>x</code> est sorti une fois, puisque la v&eacute;rification ne se fait qu'apr&egrave;s l'ex&eacute;cution des instructions plac&eacute;es dans la boucle.<br>
Dans le deuxi&egrave;me passage script sont pos&eacute;es les m&ecirc;mes conditions, mais c'est pourtant une boucle while normale qui y est not&eacute;e. Comme <code>x</code> n'est pas plus petit que <code>10</code> d&egrave;s le d&eacute;part, les instructions de la boucle ne seront pas ex&eacute;cut&eacute;es une seule fois. La v&eacute;rification de la condition de la boucle qui a lieu au d&eacute;but, l'emp&ecirc;che.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>
<h2 class="Sh2"><img src="../../src/js10.gif" width="30" height="30" border="0" alt="JavaScript 1.0"><img src="../../src/netsc2.gif" width="30" height="30" border="0" alt="Netscape 2.0"><img src="../../src/msie3.gif" width="30" height="30" border="0" alt="MS IE 3.0">&nbsp;<a class="an" name="break_continue">Contr&ocirc;le &agrave; l'int&eacute;rieur de boucle - break et continue</a></h2>

<p>Les boucles sont des &quot;facteurs critiques&quot; dans un script. Pour certaines t&acirc;ches plus compliqu&eacute;es, il n'est quelquefois pas simple de programmer une boucle de fa&ccedil;on &agrave; ce qu'elle soit dans chaque cas &agrave; un moment donn&eacute; interrompue. C'est pourquoi il existe des commandes compl&eacute;mentaires pour contr&ocirc;ler ce qui se passe dans une boucle.</p>


<h3 class="xmp">Exemple 1:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var i = 0;
 while (i &lt; 6) {
  if (i == 3) break;
  i++;
 }
 alert(&quot;i = &quot; + i);
// --&gt;
&lt;/script&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Avec <code>break</code>  vous pouvez arr&ecirc;ter une boucle imm&eacute;diatement. Pour cela, il vous faut noter dans le corps de la boucle une demande if  de laquelle d&eacute;pend le mot  <code>break</code> comme instruction. Dans l'exemple la boucle va s'interrompre d&eacute;s que <code>i</code> aura comme valeur 3, bien que d'apr&egrave;s l'instruction de la boucle, i puisse atteindre la valeur 6.</p>

<h3 class="xmp">Exemple 2:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var i = 0;
 while (i &lt; 6) {
  fin:
  if (i == 3) {
    alert(&quot;Et voila, car i a atteint la valeur de  &quot; + i);
        break fin;
   }
  i++;
 }
// --&gt;
&lt;/script&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Ceci est une variante particuli&egrave;re de  <code>break</code>. Vous pouvez noter, avant la question (if) dont vous faites d&eacute;pendre une instruction break, une &quot;&eacute;tiquette&quot;. C'est un nom que vous donnez vous m&ecirc;me suivi de deux points, dans l'exemple  <code>fin:</code>. Derri&egrave;re le mot  <code>break</code> vous pouvez alors mentionner le nom de l'&eacute;tiquette. Ainsi vous vous assurez dans l'exemple que l'instruction break se rapporte &agrave; chaque fois &agrave; la demande if dans laquelle il est demand&eacute; si <code>i</code> est &eacute;gal &agrave; 3. Dans des cas simples comme dans l'exemple ci-dessus, c'est &agrave; vrai dire superflu. Mais conservez cette possibilit&eacute; dans l'esprit au cas o&ugrave; il vous arriverait de programmer des demande if imbriqu&eacute;es dans des boucles et que vous utilisiez l&agrave; aussi des instructions break. Pensez aussi que cette variante de l'instruction break fait partie de JavaScript 1.2 et qu'elle m&egrave;ne &agrave; des messages d'erreur pour des navigateurs plus anciens.</p>

<h3 class="xmp">Exemple 3:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
 var i = 0, j = 0;
 while (i &lt; 6) {
  i++;
  if (i == 3) continue;
  j++;
 }
 alert(&quot;i est �gal � &quot; + i + &quot; et  j est �gal � &quot; + j);
&lt;/script&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Avec <code>continue</code> vous imposez la poursuite imm&eacute;diate du prochain tour de boucle.  <code>i</code> et <code>j</code> sont incr&eacute;ment&eacute;s de 1 &agrave; chaque tour de boucle. Quand  <code>i</code> est &eacute;gal &agrave; 6 la boucle est interrompue. Entre temps  <code>i</code> a aussi la valeur 3. Ce cas de figure est trait&eacute; par la demande if. Quand <code>i</code> est &eacute;gal &agrave; 3, le tour de boucle suivant est d&eacute;marr&eacute; aussit&ocirc;t. L'instruction <code>j++;</code> n'est donc pas ex&eacute;cut&eacute;e dans le tour de boucle o&ugrave; i a la valeur 3. Pour cette raison, <code>i</code> aura &agrave; la fin la valeur 6 alors que <code>j</code> n'aura que la valeur 5.</p>







<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="reserve.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="reserve.htm"><b>Mots r&eacute;serv&eacute;s</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="condition.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="condition.htm"><b>Instructions conditionnelles (if-else/switch)</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>JavaScript/DOM</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>&Eacute;l&eacute;ments du langage JavaScript</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
