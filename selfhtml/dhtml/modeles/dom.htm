<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: HTML dynamique / Les diff&eacute;rents mod&egrave;les DHTML / Le mod&egrave;le DOM (DOM) </title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Wie Sie das Document Object Model (DOM) f&uuml;r HTML dynamique einsetzen k&ouml;nnen">
<meta name="keywords"       content="SELFHTML, HTML dynamique, Dynamic HTML, DHTML, Document Object Model, DOM, W3-Konsortium">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/dhtml/modeles/dom.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // HTML dynamique == ../index.htm //  Les diff&eacute;rents mod&egrave;les DHTML == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>HTML dynamique</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Les diff&eacute;rents mod&egrave;les DHTML</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Le mod&egrave;le DOM (DOM) </h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#generalites"><b>G&eacute;n&eacute;ralit&eacute;s sur le mod&egrave;le DOM</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#contenu_elements"><b>Modifier les contenus d'&eacute;l&eacute;ments de fa&ccedil;on dynamique</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#attributs_html"><b>Modifier les attributs HTML de fa&ccedil;on dynamique</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#proprietes_css"><b>Modifier les propri&eacute;t&eacute;s CSS de fa&ccedil;on dynamique</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#nouveaux_noeuds"><b>Cr&eacute;er des nouveaux n&#339;uds et les ajouter &agrave; l'arborescence</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#event_handling"><b>Gestion d'&eacute;v&eacute;nements dans le mod&egrave;le DOM</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="generalites">G&eacute;n&eacute;ralit&eacute;s sur le mod&egrave;le DOM</a></h2>

<p>Le mod&egrave;le DOM est une norme adopt&eacute;e par le consortium W3 qui d&eacute;crit tout d'abord l'acc&egrave;s des langages script &agrave; des &eacute;l&eacute;ments au choix d'un document dans un langage de marquage. Le mod&egrave;le DOM n'est donc  lui m&ecirc;me ni un langage script distinct, ni limit&eacute; &agrave; HTML. Il d&eacute;finit somme toute des objets, propri&eacute;t&eacute;s et m&eacute;thodes qu'un langage script doit transcrire s'il veut se d&eacute;signer comme interpr&eacute;tant le DOM. Ces objets, propri&eacute;t&eacute;s et m&eacute;thodes doivent pouvoir &ecirc;tre appliqu&eacute;s &agrave; tous les documents qui sont &eacute;crits dans un langage de marquage conforme &agrave; <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Chapitre: vue d'ensemble">&nbsp;<a href="../../xml/index.htm"><b>XML</b></a>. Le consortium W3 insiste bien sur le fait que le mod&egrave;le DOM ne doit pas simplement &ecirc;tre une norme pour &quot;HTML dynamique&quot;. Le mod&egrave;le DOM n'est pas non plus limit&eacute; au c&ocirc;t&eacute; client donc par exemple au navigateur Web. Il peut tout aussi bien &ecirc;tre mis en &#339;uvre dans des scripts c&ocirc;t&eacute; serveur, par exemple dans des scripts <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Chapitre: vue d'ensemble">&nbsp;<a href="../../cgiperl/index.htm"><b>CGI</b></a> pour cr&eacute;er des documents de fa&ccedil;on dynamique.</p>

<p>Quoiqu'il en soit - le mod&egrave;le DOM est la solution salvatrice &eacute;galement pour ce qu'on entend ici par HTML dynamique, &agrave; savoir la modification dynamique a posteriori des contenus d'une page affich&eacute;e dans la fen&ecirc;tre du navigateur. Sorti en 1998 tout d'abord comme recommandation officielle du W3, il a &eacute;t&eacute; impl&eacute;ment&eacute; dans l'Explorer Internet MS 5.0 et dans le navigateur Netscape, enti&egrave;rement reprogramm&eacute; par la communaut&eacute; des d&eacute;veloppeurs de Mozilla que Netscape lui m&ecirc;me propose en tant que version  6.0  (JavaScript Version 1.5). L'impl&eacute;mentation dans les navigateurs actuels n'est pas encore compl&egrave;te. Il arrive sans cesse que l'on soit confront&eacute; en tant que programmeur &agrave; la conduite myst&eacute;rieuse de l'un ou l'autre navigateur. La voie est cependant trac&eacute;e qui indique comment HTML dynamique sera programm&eacute; &agrave; l'avenir.</p>

<p>Un langage de marquage comme HTML ou tout autre langage bas&eacute; sur XML peut &ecirc;tre sch&eacute;matis&eacute; comme une  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../xml/regles/arborescence.htm"><b>arborescence</b></a> hi&eacute;rarchis&eacute;e.
Les diff&eacute;rentes composantes d'une telle arborescence sont d&eacute;sign&eacute;s comme &eacute;tant des <b>n&#339;uds</b>. L'objet central du mod&egrave;le DOM est pour cette raison l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/node.htm"><b>node</b></a> (<i>node = n&#339;ud</i>). Il existe diff&eacute;rents types de n&#339;uds. Dans un document HTML ordinaire existent dans tous les cas trois types de n&#339;ud importants qu'il vous faut distinguer: <b>les n&#339;uds-&eacute;l&eacute;ment, les n&#339;uds-attribut, et les n&#339;uds-texte</b>.</p>

<p>Pour comprendre, examinez la construction HTML simple suivante:<br>
<code>&lt;h1 align=&quot;center&quot;&gt;Hello monde&lt;/h1&gt;</code><br>
Dans cette construction, il y a un n&#339;ud-&eacute;l&eacute;ment, &agrave; savoir le n&#339;ud-&eacute;l&eacute;ment de l'&eacute;l&eacute;ment <code>h1</code>. De plus, il y a un n&#339;ud-attribut, &agrave; savoir celui de l'attribut <code>align</code> , et enfin il y a ce qu'on appelle des &quot;donn&eacute;es en caract&egrave;res&quot;, que l'on trouve &agrave; deux endroits: &agrave; savoir une fois comme contenu de l'&eacute;l&eacute;ment <code>h1</code>, et une fois pour l'affectation de valeur &agrave; l'attribut <code>align</code>. Ces donn&eacute;es en caract&egrave;res repr&eacute;sentent elles-m&ecirc;mes des n&#339;uds, &agrave; savoir des n&#339;uds texte.</p>

<p>Un autre exemple de construction doit aider &agrave; mieux comprendre:<br>
<code>&lt;h1 align=&quot;center&quot;&gt;Hello &lt;i&gt;monde&lt;/i&gt;&lt;/h1&gt;</code><br>
Dans cet exemple est ajout&eacute; le marquage en italique du mot <code>monde</code>. Il est important de comprendre maintenant, &agrave; quoi ressemble la hi&eacute;rarchie des n&#339;uds:<br>
L'&eacute;l&eacute;ment <code>h1</code> est, dans ce petit extrait de structure arborescente le n&#339;ud de sortie. Ce n&#339;ud a d'apr&egrave;s les r&egrave;gles du mod&egrave;le DOM, deux <b>n&#339;uds-enfant</b> et un <b>n&#339;ud associ&eacute;</b>: les n&#339;uds enfant sont d'une part le n&#339;ud texte avec le mot <code>Hello</code> suivi d'un espace ainsi que le n&#339;ud &eacute;l&eacute;ment de l'&eacute;l&eacute;ment <code>i</code>. L'attribut <code>align</code> dans le rep&egrave;re d'ouverture <code>&lt;h1&gt;</code> n'est pas par contre un n&#339;ud-enfant mais un n&#339;ud associ&eacute;. Le n&#339;ud-attribut a toutefois lui-m&ecirc;me un n&#339;ud enfant &agrave; savoir la valeur affect&eacute;e (<code>center</code>). M&ecirc;me la n&#339;ud-&eacute;l&eacute;ment de l'&eacute;l&eacute;ment <code>i</code> a, &agrave; son tour, un n&#339;ud-enfant, &agrave; savoir le n&#339;ud-texte de son contenu de caract&egrave;res, donc le mot <code>monde</code>.</p>

<p>L'arborescence d'une page Web complexe peut avoir, comme on peut le d&eacute;duire de ces exemples simples, des imbrications larges et profondes. Dans un langage script, il doit cependant &ecirc;tre possible d'acc&eacute;der &agrave; des n&#339;uds distincts, le plus vite et le plus efficacement possible. Dans le mod&egrave;le DOM il existe pour cette raison trois m&eacute;thodes importantes de l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/document.htm"><b>document</b></a> pour pouvoir au moins acc&eacute;der directement &agrave; chaque n&#339;ud-&eacute;l&eacute;ment de son choix:<br>
<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/document.htm#get_element_by_id"><b>getElementById()</b></a> peut acc&eacute;der &agrave; des &eacute;l&eacute;ments qui contiennent un attribut <code>id</code> clair et sans ambigu&iuml;t&eacute; pour tout le document par exemple<br>
<code>&lt;p id=&quot;le_paragraphe&quot;&gt;ici se trouve le texte&lt;/p&gt;</code><br>
<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/document.htm#get_elements_by_name"><b>getElementsByName()</b></a>  peut acc&eacute;der &agrave; des &eacute;l&eacute;ments qui poss&egrave;dent un nom (qui n'est pas forc&eacute;ment unique et clair), par exemple<br>
<code>&lt;input name=&quot;champ_saisie&quot; type=&quot;text&quot; size=&quot;40&quot;&gt;</code><br>
<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/document.htm#get_elements_by_name"><b>getElementsByTagName()</b></a> peut acc&eacute;der &agrave; tous les &eacute;l&eacute;ments sous la forme: &quot;donne le 27 &egrave;me &eacute;l&eacute;ment <code>td</code> du document&quot;.</p>

<p>Partant d'un n&#339;ud-&eacute;l&eacute;ment recherch&eacute;, il est rapide ensuite d'acc&eacute;der   &agrave; ses attributs et &agrave; son contenu. Pour cela aussi le mod&egrave;le DOM dispose de propri&eacute;t&eacute;s et de m&eacute;thodes. Ici il y a cependant deux variantes pour les pages bas&eacute;es sur HTML. D'un c&ocirc;t&eacute; vous pouvez utiliser les propri&eacute;t&eacute;s et m&eacute;thodes de l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/node.htm"><b>node</b></a> pour acc&eacute;der aux n&#339;uds-enfants et n&#339;uds associ&eacute;s. De l'autre, vous pouvez &eacute;galement employer les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/elementshtml.htm"><b>objets &eacute;l&eacute;ments HTML</b></a>. Les objets &eacute;l&eacute;ments HTML sont bien appropri&eacute;s avant tout pour acc&eacute;der aux attributs distincts d'un &eacute;l&eacute;ment.</p>

<p>HTML dynamique peut aussi consister &agrave; cr&eacute;er des nouveaux &eacute;l&eacute;ments avec des contenus et formatages sur le temps d'affichage d'une page Web. Le mod&egrave;le Dom dispose &eacute;galement de m&eacute;thodes &agrave; cette fin.</p>

<p>Dans la version 1.0 du mod&egrave;le Dom n'&eacute;tait r&eacute;gl&eacute; que l'acc&egrave;s aux n&#339;uds. L'acc&egrave;s aux propri&eacute;t&eacute;s de style affect&eacute;es et la gestion d'&eacute;v&eacute;nements n'y sont pas encore abord&eacute;s. Dans la version 2.0 du mod&egrave;le DOM de novembre 2000 ces domaines importants pour les pages Web dynamiques sont toutefois &eacute;galement trait&eacute;s. C'est pourquoi il est recommand&eacute; en tous cas, pour de nouvelles page Web &agrave; cr&eacute;er, de se baser sur les techniques r&eacute;gl&eacute;es dans le mod&egrave;le DOM. Les mod&egrave;les plus anciens de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="microsoft.htm"><b>Microsoft</b></a> et de <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="netscape.htm"><b>Netscape</b></a> doivent encore actuellement &ecirc;tre mis en &#339;uvre pour des raisons de compatibilit&eacute; vers l'amont, mais dispara&icirc;tre cependant peu &agrave; peu d&eacute;finitivement &agrave; terme, pour qu'enfin un standard de langage homog&egrave;ne facilite la programmation de pages Web dynamiques.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr></table>
<h2 class="Sh2"><img src="../../src/dom10.gif" width="30" height="30" border="0" alt="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" border="0" alt="JavaScript 1.5"><img src="../../src/netsc6x.gif" width="30" height="30" border="0" alt="Netscape 6.x"><img src="../../src/msie5x.gif" width="30" height="30" border="0" alt="MS IE 5.x">&nbsp;<a class="an" name="contenu_elements">Modifier les contenus d'&eacute;l&eacute;ments de fa&ccedil;on dynamique</a></h2>

<p>Il y a beaucoup de cas d'application indiqu&eacute;s de modification dynamique d'&eacute;l&eacute;ments HTML affich&eacute;s dans un premier temps. L'exemple qui suit en pr&eacute;sente un. Dans l'exemple est sortie une liste num&eacute;rot&eacute;e tri&eacute;e d'abord par ordre alphab&eacute;tique. Sous la liste, l'utilisateur peur n&eacute;anmoins &agrave; l'aide de deux boutons de formulaire alterner l'ordre g&eacute;ographique et l'ordre alphab&eacute;tique.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/villes.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
var tableau_geo = new Array(5,4,6,3,12,11,7,8,2,10,0,1,9);

function ABC() {
 var villes = new Array();
 for(var i = 0; i &lt; document.getElementsByTagName(&quot;li&quot;).length; i++)
   villes.push(document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue);
 villes.sort();
 for(i = 0; i &lt; document.getElementsByTagName(&quot;li&quot;).length; i++)
   document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue = villes[i];
 document.getElementById(&quot;ordre&quot;).firstChild.nodeValue = &quot;alphab�tique de A � Z&quot;;
}

function GEO() {
 var villes = new Array();
 for(var i = 0; i &lt; document.getElementsByTagName(&quot;li&quot;).length; i++)
   villes.push(document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue);
 for(i = 0; i &lt; document.getElementsByTagName(&quot;li&quot;).length; i++)
   document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue = villes[tableau_geo[i]];
 document.getElementById(&quot;ordre&quot;).firstChild.nodeValue = &quot;g�ographique du nord au sud&quot;;
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Grandes villes dans l'ordre &lt;span id=&quot;ordre&quot;&gt;alphab�tique de A � Z&lt;/span&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Aix en Provence&lt;/li&gt;
&lt;li&gt;Biarritz&lt;/li&gt;
&lt;li&gt;Bordeaux&lt;/li&gt;
&lt;li&gt;Brest&lt;/li&gt;
&lt;li&gt;Calais&lt;/li&gt;
&lt;li&gt;Dunkerque&lt;/li&gt;
&lt;li&gt;Lille&lt;/li&gt;
&lt;li&gt;Limoges&lt;/li&gt;
&lt;li&gt;Lyon&lt;/li&gt;
&lt;li&gt;Marseille&lt;/li&gt;
&lt;li&gt;Mont&amp;eacute;limar&lt;/li&gt;
&lt;li&gt;Nantes&lt;/li&gt;
&lt;li&gt;Paris&lt;/li&gt;
&lt;/ol&gt;
&lt;form name=&quot;formulaire&quot; action=&quot;&quot;&gt;
&lt;input type=&quot;button&quot; name=&quot;abc&quot; value=&quot;alphab&amp;eacute;tiquement&quot; onClick=&quot;ABC()&quot;&gt;
&lt;input type=&quot;button&quot; name=&quot;geo&quot; value=&quot;g&amp;eacute;ographiquement&quot; onClick=&quot;GEO()&quot;&gt;
&lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple la liste num&eacute;rot&eacute;e est tout d'abord not&eacute;e dans l'ordre alphab&eacute;tique des noms de villes. Dans le formulaire sous la liste sont not&eacute;s deux boutons pouvant &ecirc;tre cliqu&eacute;s. L'un appelle la fonction <code>ABC()</code>, l'autre la fonction <code>GEO()</code>. Un clic sur <code>ABC()</code> n'apporte bien s&ucirc;r rien, &eacute;tant donn&eacute; que la liste est tri&eacute;e dans l'ordre alphab&eacute;tique d&egrave;s le d&eacute;part. Donc il va de soi de cliquer d'abord sur le bouton portant l'inscription <code>g&eacute;ographiquement</code>. La fonction  <code>GEO()</code>, qu'il appelle, d&eacute;finit d'entr&eacute;e avec <code>var villes = new Array();</code> un nouvel <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/array.htm"><b>Array</b></a> vide. Le but est de remplir ce tableau avec les noms de villes de la liste. Pour ce faire, la fonction acc&egrave;de dans l'ordre dans une boucle <code>for</code> &agrave; tous les &eacute;l&eacute;ments du type <code>li</code> qui sont plac&eacute;s dans le document.<br>

<p>L'acc&egrave;s a lieu avec <code>document.getElementsByTagName(&quot;li&quot;)</code>.</p>

<p>Par <code>document.getElementsByTagName(&quot;li&quot;).length</code> le nombre des &eacute;l&eacute;ments <code>li</code> du document peuvent &ecirc;tre recherch&eacute;s. La fonction a besoin de cette information comme condition d'interruption de la boucle <code>for</code>. Dans la boucle et gr&acirc;ce &agrave; la m&eacute;thode <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/array.htm#push"><b>push</b></a> le contenu de l'&eacute;l&eacute;ment <code>li</code> actuel est ajout&eacute; au tableau.</p>

<p>Avec <code>document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue</code> il est acc&eacute;d&eacute; ici au contenu de chacun des &eacute;l&eacute;ments <code>li</code>. Pour le mod&egrave;le  DOM <code>document.getElementsByTagName(&quot;li&quot;)[i]</code> est un n&#339;ud, &agrave; savoir l'&eacute;l&eacute;ment <code>li</code> plac&eacute; en <code>i</code> &egrave;me position dans le document. <code>firstChild</code> est une propri&eacute;t&eacute; de l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/node.htm"><b>node</b></a>. Par cette propri&eacute;t&eacute;, vous pouvez acc&eacute;der au premier n&#339;ud-enfant d'un n&#339;ud. Le premier n&#339;ud-enfant de tous les &eacute;l&eacute;ments <code>li</code> du document est son contenu en texte, donc le nom de la ville. La propri&eacute;t&eacute; <code>firstChild</code> ne renvoie pas encore le contenu de l'&eacute;l&eacute;ment, mais seulement l'objet du contenu. Pour acc&eacute;der effectivement au contenu, donc au nom concret de la ville, il faut faire appel &agrave; une autre propri&eacute;t&eacute; de l'objet <code>node</code>, &agrave; savoir la propri&eacute;t&eacute; <code>nodeValue</code>. Notez vous bien la combinaison <code>firstChild.nodeValue</code>. Vous utiliserez souvent cette combinaison pour acc&eacute;der au contenu d'un &eacute;l&eacute;ment.</p>

<p>Apr&egrave;s que le tableau est rempli avec les noms de villes, la fonction <code>GEO()</code> fait simplement l'inverse et &eacute;crit le tableau &agrave; nouveau dans la liste - l&agrave; aussi dans une boucle <code>for</code>.<br>
L'expression <code>document.getElementsByTagName(&quot;li&quot;)[i].firstChild.nodeValue</code> figure cette fois &agrave; gauche de l'affectation. C'est ainsi qu'une nouvelle valeur sera affect&eacute;e au contenu de l'&eacute;l&eacute;ment de la liste. Dans l'exemple, il s'agit de la valeur <code>villes[tableau_geo[i]]</code> &agrave; l'aspect quelque peu compliqu&eacute;. Les villes doivent bien &ecirc;tre sorties dans l'ordre g&eacute;ographique. Il n'y a pas ici d'algorithme qui conna&icirc;t la g&eacute;ographie. Tout en haut dans le passage script est not&eacute; &agrave; cet effet un tableau nomm&eacute; <code>tableau_geo</code>. Les nombres avec lesquels ils est initialis&eacute; sont tout simplement les num&eacute;ros d'index des villes dans l'ordre alphab&eacute;tique. Ainsi par exemple <code>tableau_geo[0]</code> a pour valeur <code>6</code>. Gr&acirc;ce &agrave; cette information, la fonction  <code>GEO()</code>, sait que la ville situ&eacute;e le plus au nord est celle qui dans l'ordre alphab&eacute;tique a le num&eacute;ro 5 (Dunkerque). La fonction utilise  <code><code>villes[tableau_geo[i]]</code></code>, donc l'acc&egrave;s &agrave; <code>tableau_geo</code>, comme num&eacute;ro d'index de la ville qui doit &ecirc;tre &eacute;crite dans la liste.</p>

<p>La fonction <code>ABC()</code> marche exactement de la m&ecirc;me fa&ccedil;on que la fonction <code>GEO()</code>. Elle ne se distingue de cette derni&egrave;re qu'en ce que, apr&egrave;s la lecture du tableau <code>villes</code>, la m&eacute;thode objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/array.htm#sort"><b>sort()</b></a> lui soit appliqu&eacute;e pour trier les enregistrements. Ensuite, elle &eacute;crit simplement le tableau tri&eacute; &agrave; nouveau dans la liste.</p>

<p>Un autre &eacute;l&eacute;ment est &eacute;galement encore modifi&eacute; par les deux fonctions: &agrave; savoir l'&eacute;l&eacute;ment  <code>span</code> plac&eacute; dans le titre. &Eacute;tant donn&eacute; que pour cet &eacute;l&eacute;ment est not&eacute;e dans le code HTML une valeur Id avec <code>id=&quot;ordre&quot;</code>, il est commode d'y acc&eacute;der avec <code>document.getElementById(&quot;ordre&quot;)</code>. Avec la syntaxe habituelle <code>firstChild.nodeValue</code> le texte de l'&eacute;l&eacute;ment est adress&eacute; et modifi&eacute; de fa&ccedil;on dynamique.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr></table>
<h2 class="Sh2"><img src="../../src/dom10.gif" width="30" height="30" border="0" alt="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" border="0" alt="JavaScript 1.5"><img src="../../src/netsc6x.gif" width="30" height="30" border="0" alt="Netscape 6.x"><img src="../../src/msie5x.gif" width="30" height="30" border="0" alt="MS IE 5.x">&nbsp;<a class="an" name="attributs_html">Modifier les attributs HTML de fa&ccedil;on dynamique</a></h2>

<p>Par l'ajour, la modification ou l'effacement dynamiques d'attributs HTML, il est possible d'atteindre des effets int&eacute;ressants mais aussi des objectifs utiles. L'exemple suivant montre comment vous pouvez changer des liens de fa&ccedil;on dynamique.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/toplinks.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
var liens_favoris = new Array(
    &quot;http://www.tf1.fr/news/monde/&quot;,
    &quot;http://www.presence-pc.com/&quot;,
    &quot;http://fr.news.yahoo.com/&quot;,
    &quot;http://www.france.diplomatie.fr/actual/&quot;,
    &quot;http://selfforum.selfhtml.com.fr/&quot;
)
var lien_actuel = 0;

function lien_favori() {
  document.getElementsByName(&quot;cible&quot;)[0].href = liens_favoris[lien_actuel];
  document.getElementsByName(&quot;cible&quot;)[0].firstChild.firstChild.nodeValue = liens_favoris[lien_actuel];
  lien_actuel += 1;
  if(lien_actuel &gt;= liens_favoris.length)
    lien_actuel = 0;
}

function fenetre_liens(fenetre) {
  document.getElementsByName(&quot;cible&quot;)[0].target = fenetre;
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;
&lt;p&gt;&lt;a name=&quot;cible&quot; href=&quot;#cible&quot;&gt;&lt;b&gt;Lien pr&amp:eacute;f&amp;eacute;r&amp;eacute;&&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;javascript:lien_favori()&quot;&gt;Lien favori suivant!&lt;/a&gt;&lt;br&gt;
liens_favoris: &lt;a href=&quot;javascript:fenetre_liens('_blank')&quot;&gt;ouvrir dans une nouvelle fen�tre!&lt;/a&gt; oder
&lt;a href=&quot;javascript:fenetre_liens('_self')&quot;&gt;ouvrir dans la fen�tre active!&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple contient dans le passage visible un &quot;lien pr&eacute;f&eacute;r&eacute;&quot;, qui m&egrave;ne d'abord &agrave; lui m&ecirc;me  (<code>name=&quot;cible&quot; href=&quot;#cible&quot;</code>). Au dessous sont not&eacute;s trois autres liens. Le premier annonce le lien favori suivant et les deux autres permettent &agrave; l'utilisateur de fixer comment il veut ouvrir ce lien - s'il veut l'ouvrir dans une nouvelle fen&ecirc;tre ou dans la m&ecirc;me fen&ecirc;tre. Tous les trois appellent des fonctions JavaScript, not&eacute;es dans l'ent&ecirc;te de fichier. Le premier lien qui annonce le lien favori suivant, appelle la fonction <code>lien_favori()</code>.</p>

<p>Cette fonction acc&egrave;de au premier &eacute;l&eacute;ment du document pour lequel est not&eacute; comme attribut <code>name=&quot;cible&quot;</code>. Elle le fait avec <code>document.getElementsByName(&quot;cible&quot;)[0]</code>. C'est le cas dans l'exemple pour le lien qui doit afficher les liens favoris et qui pointe jusque l&agrave; sur lui-m&ecirc;me. Doivent &ecirc;tre modifi&eacute;s pour ce lien aussi bien son attribut <code>href</code> que son lien de texte visible. L'acc&egrave;s &agrave; l'attribut  <code>href</code> est tout simple, parce que, d'apr&egrave;s la syntaxe du mod&egrave;le DOM des  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/elementshtml.htm"><b>objets &eacute;l&eacute;ments HTML</b></a> tout attribut imaginable d'un &eacute;l&eacute;ment HTML repr&eacute;sente simplement une propri&eacute;t&eacute; de l'objet HTML correspondant. Pour acc&eacute;der &agrave; des attributs HTML, vous n'avez donc besoin que d'acc&eacute;der &agrave; l'&eacute;l&eacute;ment d&eacute;sir&eacute; et derri&egrave;re, s&eacute;par&eacute; par un point, de noter le nom d'attribut comme propri&eacute;t&eacute;. Observez ici la distinction particuli&egrave;re entre minuscules et majuscules pour certains attributs comme <code>bgColor</code>, <code>vSpace</code> ou bien <code>cellPadding</code>.<br>
Avec <code>document.getElementsByName(&quot;cible&quot;)[0].href</code> il est donc, dans l'exemple, acc&eacute;d&eacute; directement &agrave; la valeur de l'attribut <code>href</code> du lien d&eacute;sir&eacute;. En lui affectant une valeur, l'attribut est modifi&eacute; de fa&ccedil;on dynamique. Dans l'exemple, une nouvelle valeur de l'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/array.htm"><b>Array</b></a> not&eacute; plus haut dans le script, et nomm&eacute; <code>liens_favoris</code> est affect&eacute;e. Comme compteur d'index, c'est la variable <code>lien_actuel</code> &eacute;galement d&eacute;j&agrave; d&eacute;finie auparavant qui est employ&eacute;e. Celle-ci est enfin incr&eacute;ment&eacute;e de 1 pour qu'au prochain appel de la fonction, ce soit le lien favori suivant dans le tableau qui soit pos&eacute;. Quand la valeur de <code>lien_actuel</code> est trop &eacute;lev&eacute;e pour trouver encore un enregistrement dans le tableau, la variable est fix&eacute;e &agrave; nouveau &agrave; 0 et au prochain clic, c'est &agrave; nouveau le premier enregistrement dans le tableau qui est servi..</p>

<p>L'acc&egrave;s au texte du lien a encore lieu par <code>firstChild.value</code>. Pourtant dans l'exemple est not&eacute; <code>firstChild.firstChild.nodeValue</code>. La raison en est que le texte du lien ne figure pas directement entre <code>&lt;a&gt;</code> et <code>&lt;/a&gt;</code>, mais qu'il est encore inclus dans un &eacute;l&eacute;ment <code>b</code> pour le marquage en caract&egrave;res gras. Du point de vue de l'&eacute;l&eacute;ment <code>a</code>, l'&eacute;l&eacute;ment <code>b</code> est donc le <code>firstChild</code>, et le texte du lien visible n'est donc que le  <code>firstChild</code> de ce dernier.</p>

<p>Les liens qui r&egrave;glent dans quelle fen&ecirc;tre les liens favoris doivent &ecirc;tre ouverts appellent chacun la fonction <code>fenetre_liens()</code> et lui transmettent comme param&egrave;tre le nom de fen&ecirc;tre cible d&eacute;sir&eacute;e <code>_self</code> (ouvrir dans la m&ecirc;me fen&ecirc;tre) ou <code>_blank</code> (ouvrir dans un nouvelle fen&ecirc;tre). La fonction  <code>fenetre_liens()</code> utilise &agrave; nouveau le chemin commode par les objets &eacute;l&eacute;ments HTML, pour acc&eacute;der directement &agrave; la propri&eacute;t&eacute;  <code>target</code> de l'&eacute;l&eacute;ment <code>a</code> et pour fixer l'attribut correspondant. Il n'y a donc aucun probl&egrave;me pour fixer des attributs qui ne sont pas not&eacute;s dans le texte source HTML d'un &eacute;l&eacute;ment.</p>

<p>Au cas o&ugrave; vous voulez effacer un &eacute;l&eacute;ment, vous avez deux possibilit&eacute;s: soit vous fixez sa valeur &agrave; <code>&quot;&quot;</code> (cha&icirc;ne de caract&egrave;res vide), ou bien,  - et c'est plus propre - vous travaillez avec la m&eacute;thode <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/node.htm#remove_attribute"><b>removeAttribute()</b></a> de l'objet <code>node</code>.</p>






<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr></table>
<h2 class="Sh2"><img src="../../src/dom20.gif" width="30" height="30" border="0" alt="DOM 2.0"><img src="../../src/js15.gif" width="30" height="30" border="0" alt="JavaScript 1.5"><img src="../../src/netsc6x.gif" width="30" height="30" border="0" alt="Netscape 6.x"><img src="../../src/msie5x.gif" width="30" height="30" border="0" alt="MS IE 5.x">&nbsp;<a class="an" name="proprietes_css">Modifier les propri&eacute;t&eacute;s CSS de fa&ccedil;on dynamique</a></h2>

<p>Depuis la version 2.0 du mod&egrave;le DOM, il est &eacute;galement r&eacute;gl&eacute; comment acc&eacute;der aux mentions de feuilles de style. Ici on s'est largement inspir&eacute; de l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/style.htm"><b>style</b></a> introduit en son temps par Microsoft.<br>
L'exemple suivant montre comment, &agrave; l'aide de la technique du mod&egrave;le DOM, vous &eacute;crivez du HTML dynamique typique et classique avec d&eacute;placement d'&eacute;l&eacute;ments positionn&eacute;s. &Agrave; cet effet sert la possibilit&eacute; de positionner des &eacute;l&eacute;ments de fa&ccedil;on absolue &agrave; l'aide de propri&eacute;t&eacute;s de feuilles de style.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/tourneautour.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
var pr, pb, moi;
var vitesse_pr = 10, vitesse_pb = 20;
var grade_pr = 0, grade_pb = 0;
var X_pr = 170, Y_pr = 170, X_pb = 170, Y_pb = 170;
var rayon_pr = 150, rayon_pb = 150;

function Init() {
  pr = eval(document.getElementById(&quot;point_rouge&quot;));
  pb = eval(document.getElementById(&quot;point_bleu&quot;));
  moi = eval(document.getElementById(&quot;moi&quot;));
  pr.style.position = &quot;absolute&quot;;
  pr.style.top = 20;
  pr.style.left = 320;
  pb.style.position = &quot;absolute&quot;;
  pb.style.top = 320;
  pb.style.left = 320;
  moi.style.position = &quot;absolute&quot;;
  moi.style.top = 110;
  moi.style.left = 90;
  moi.style.fontFamily = &quot;Courier New,Courier&quot;;
  moi.style.fontSize = &quot;72pt&quot;;
  moi.style.fontWeight = &quot;bold&quot;;
  moi.style.color = &quot;#009900&quot;;
  cercle_pr();
  cercle_pb();
}

function cercle_pr() {
 grade_pr += vitesse_pr/1000;
 if(grade_pr &gt; 360) grade_pr = 0;
 pr.style.top  = Math.round(Y_pr + (rayon_pr * Math.cos(grade_pr)));
 pr.style.left = Math.round(X_pr + (rayon_pr * Math.sin(grade_pr)));
 window.setTimeout(&quot;cercle_pr()&quot;,100/vitesse_pr);
}

function cercle_pb() {
 grade_pb += vitesse_pb/1000;
 if(grade_pb &gt; 360) grade_pb = 0;
 bp.style.top  = Math.round(Y_pb + (rayon_pb * Math.cos(grade_pb)));
 pb.style.left = Math.round(X_pb + (rayon_pb * Math.sin(grade_pb)));
 window.setTimeout(&quot;cercle_pb()&quot;,100/vitesse_pb);
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;&lt;body onLoad=&quot;Init()&quot;&gt;

&lt;div id=&quot;point_rouge&quot;&gt;&lt;img src=&quot;tourneautour1.gif&quot; width=&quot;20&quot; height=&quot;20&quot; border=&quot;0&quot; alt=&quot;point rouge&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;point_bleu&quot;&gt;&lt;img src=&quot;tourneautour2.gif&quot; width=&quot;20&quot; height=&quot;20&quot; border=&quot;0&quot; alt=&quot;point bleu&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;moi&quot;&gt;MOI&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans le passage <code>body</code> de l'exemple, sont simplement not&eacute;s trois passages <code>div</code> sans autre formatage. Les deux premiers contiennent chacun un petit graphique - <code>tourneautour1.gif</code> est un point rouge, <code>tourneautour2.gif</code> un point bleu. Les deux graphiques ont un arri&egrave;re plan transparent, ce qui est important &eacute;tant donn&eacute; que les points dans le d&eacute;roulement ult&eacute;rieur se chevauchent souvent.</p>

<p>Dans le rep&egrave;re d'ouverture <code>&lt;body&gt;</code> est not&eacute; le <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/langage/gestevenements.htm"><b>gestionnaire d'&eacute;v&eacute;nement</b></a> <code>onLoad()</code>. Celui-ci se d&eacute;clenche, d&egrave;s que le fichier est charg&eacute; compl&egrave;tement dans le navigateur. Alors est appel&eacute;e la fonction  <code>Init()</code>, not&eacute;e dans l'ent&ecirc;te de fichier. Cette fonction met tout d'abord en &#339;uvre la fonction JavaScript <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/independant.htm#eval"><b>eval()</b></a>, pour raccourcir l'acc&egrave;s aux passages <code>div</code>. &Eacute;tant donn&eacute; que les trois passages <code>div</code> ont un attribut <code>id</code>, l'acc&egrave;s aux n&#339;uds-&eacute;l&eacute;ment correspondants avec <code>getElementById(&quot;point_rouge&quot;)</code> etc... est possible. Par l'application de <code>eval</code> sur une telle expression est sauvegard&eacute;e dans une variable telle que <code>pr</code> la &quot;signification&quot; pour ainsi dire de <code>getElementById(&quot;point_rouge&quot;)</code> , et apr&egrave;s cela il est possible de travailler exactement de la m&ecirc;me fa&ccedil;on avec <code>pr</code> que si l'on notait &agrave; chaque fois <code>getElementById(&quot;point_rouge&quot;)</code>.</p>

<p>Par les variables <code>pr</code>, <code>pb</code> et <code>moi</code> il est ensuite &eacute;galement possible d'adresser l'objet <code>style</code>. La fonction <code>Init()</code> &eacute;quipe d'abord les trois passages <code>div</code> avec les propri&eacute;t&eacute;s de feuilles de style CSS de d&eacute;part. Les trois passages sont positionn&eacute;s de fa&ccedil;on absolue avec <code>style.position = &quot;absolute&quot;</code>. Le coin sup&eacute;rieur gauche de chaque passage est d&eacute;termin&eacute; avec <code>style.left</code> et <code>style.top</code>. Le contenu du passage <code>moi</code>, donc le mot <code>MOI</code>, est format&eacute; en grand et bien visible.</p>

<p>&Agrave; la fin, la fonction <code>Init()</code> appelle les deux autres fonctions <code>cercle_pr()</code> et <code>cercle_pb()</code>. Chacune de ces deux fonctions contr&ocirc;le le mouvement circulaire de l'un des deux points, en recalculant somme toute, le coin sup&eacute;rieur gauche du passage <code>div</code> qui contient chacun des deux graphiques. Pour cela entrent en jeu les fonctions de cercle pour sinus (<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/math.htm#sin"><b>Math.sin()</b></a>) et cosinus Cosinus (<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/math.htm#cos"><b>Math.cos()</b></a>). &Agrave; la fin, chacune des deux fonctions se rappelle elle-m&ecirc;me de fa&ccedil;on r&eacute;cursive avec <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/window.htm#set_timeout"><b>window.setTimeout()</b></a>, pour fixer la prochaine position du passage <code>div</code> avec le graphique. Les variables comme <code>grade_pb</code>, <code>vitesse_pb</code> etc... avec lesquelles ces fonctions travaillent, ont &eacute;t&eacute; initialis&eacute;es auparavant dans le passage global du script.</p>







<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr></table>
<h2 class="Sh2"><img src="../../src/dom10.gif" width="30" height="30" border="0" alt="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" border="0" alt="JavaScript 1.5"><img src="../../src/netsc6x.gif" width="30" height="30" border="0" alt="Netscape 6.x"><img src="../../src/msie5x.gif" width="30" height="30" border="0" alt="MS IE 5.x">&nbsp;<a class="an" name="nouveaux_noeuds">Cr&eacute;er des nouveaux n&#339;uds et les ajouter &agrave; l'arborescence</a></h2>

<p>HTML dynamique d'apr&egrave;s le mod&egrave;le DOM ne signifie pas seulement l'acc&egrave;s &agrave; des &eacute;l&eacute;ments HTML d&eacute;j&agrave; existants mais aussi la cr&eacute;ation de nouveaux &eacute;l&eacute;ments et leur ajout dans l'arborescence. Comment cela fonctionne, c'est ce que montre l'exemple suivant. Il repr&eacute;sente un &eacute;diteur HTML rudimentaire.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/editeur.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;style type=&quot;text/css&quot;&gt;
&lt;!--
h1 { font-family:Arial,sans-serif; font-size:24pt; font-weight:normal; border-bottom:2px solid red; }
h2 { font-family:Arial,sans-serif; font-size:20pt; font-weight:normal; border-bottom:1px solid red; }
h3 { font-family:Arial,sans-serif; font-size:12pt; font-weight:bold; }
p { font-family:Arial,sans-serif; font-size:11pt; }
--&gt;
&lt;/style&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
function ajouter() {
  var type = document.formulaire.type_element.options[document.formulaire.type_element.selectedIndex].value;
  var noeud_element = document.createElement(type);
  if(type == &quot;hr&quot;)
    document.getElementById(&quot;utilisateur&quot;).appendChild(noeud_element);
  else {
    var noeud_texte = document.createTextNode(document.formulaire.contenu_element.value);
    noeud_element.appendChild(noeud_texte);
    document.getElementById(&quot;utilisateur&quot;).appendChild(noeud_element);
  }
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;&lt;body&gt;

&lt;form name=&quot;formulaire&quot; style=&quot;background-color:#EEEEEE; padding:10px&quot; action=&quot;&quot;&gt;
&lt;select name=&quot;type_element&quot; size=&quot;1&quot;&gt;
&lt;option value=&quot;h1&quot;&gt;Titre 1&lt;/option&gt;
&lt;option value=&quot;h2&quot;&gt;Titre 2&lt;/option&gt;
&lt;option value=&quot;h3&quot;&gt;Titre 3&lt;/option&gt;
&lt;option value=&quot;p&quot;&gt;Paragraphe de texte&lt;/option&gt;
&lt;option value=&quot;hr&quot;&gt;Ligne de s&amp;eacuteparation&lt;/option&gt;
&lt;/select&gt;
&lt;input type=&quot;text&quot; name=&quot;contenu_element&quot; size=&quot;50&quot;&gt;
&lt;input type=&quot;button&quot; value=&quot;Ajouter&quot; onClick=&quot;ajouter()&quot;&gt;
&lt;/form&gt;

&lt;div id=&quot;utilisateur&quot; style=&quot;background-color:#FFFFC0; padding:10px&quot;&gt;
&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple contient dans le passage HTML visible, un formulaire avec une liste de choix, un champ de saisie et un bouton pouvant &ecirc;tre cliqu&eacute;. Au dessous est encore not&eacute; un passage <code>div</code>, qui n'a cependant aucun contenu concret. Dans la liste de choix du formulaire, l'utilisateur peut choisir un type d'&eacute;l&eacute;ment HTML - Dans les attributs  <code>value</code> des &eacute;l&eacute;ments <code>option</code> sont sauvegard&eacute;s les noms effectifs d'&eacute;l&eacute;ments HTML des diff&eacute;rents choix. Dans le champ de saisie du formulaire, l'utilisateur peut entrer un contenu en texte pour l'&eacute;l&eacute;ment qu'il a choisi. Quand il clique ensuite sur le bouton, la fonction <code>ajouter()</code> qui est not&eacute;e dans un passage JavaScript de l'ent&ecirc;te de fichier, est appel&eacute;e.</p>

<p>L&agrave; est d'abord sauvegard&eacute;e la longue et peu commode expression <code>document.formulaire.type_element.options[document.formulaire.type_element.selectedIndex].value</code> dans la variable <code>type</code>. la longue expression ou plut&ocirc;t la variable sauvegarde le type d'&eacute;l&eacute;ment HTML choisi dans le formulaire par l'utilisateur, &agrave; savoir par exemple <code>h1</code> ou bien <code>p</code>.</p>

<p>Avec <code>document.createElement(type)</code> est ensuite cr&eacute;&eacute; un nouvel &eacute;l&eacute;ment vide du type <code>type</code>, donc selon la valeur de la variable <code>type</code> par exemple un &eacute;l&eacute;ment <code>h1</code> ou un &eacute;l&eacute;ment <code>p</code>. Ceci n'affiche pourtant pas encore l'&eacute;l&eacute;ment. <code>document.createElement()</code> cr&eacute;e en fin de compte le n&#339;ud-&eacute;l&eacute;ment sans l'ajouter cependant dans l'arborescence du document. C'est exactement la m&ecirc;me chose qu'avec <code>document.createTextNode()</code>. Cette m&eacute;thode cr&eacute;e un n&#339;ud texte, mais ne fixe en aucune fa&ccedil;on l'endroit o&ugrave; ce n&#339;ud-texte doit &ecirc;tre ajout&eacute;. Dans l'exemple, un tel n&#339;ud-texte est cr&eacute;&eacute; avec <code>document.createTextNode(document.formulaire.contenu_element.value)</code> &agrave; partir de ce que l'utilisateur a entr&eacute; dans le champ de saisie. L'&quot;accrochage&quot; dans l'arborescence est la prochaine t&acirc;che du script.</p>

<p>Pour cela, le script doit pourtant distinguer entre les &eacute;l&eacute;ments qui ont un contenu en texte et ceux qui n'en ont pas. L'&eacute;l&eacute;ment <code>hr</code> que l'utilisateur peut &eacute;galement choisir, donc l'&eacute;l&eacute;ment HTML pour une ligne de s&eacute;paration, ne peut pas avoir de contenu en texte. C'est la raison pour laquelle le script distingue avec <code>if</code> et <code>else</code> entre <code>type&nbsp;==&nbsp;&quot;hr&quot;</code> et toutes les autres valeurs possibles de <code>type</code>. Si l'utilisateur a choisi l'&eacute;l&eacute;ment <code>hr</code>, le nouvel &eacute;l&eacute;ment cr&eacute;&eacute; <code>hr</code> sauvegard&eacute; dans la variable <code>noeud_element</code> est ajout&eacute; dans l'arborescence. Le n&#339;ud texte quant &agrave; lui est rejet&eacute;. Dans tous les autres cas (embranchement <code>else</code>) le n&#339;ud-texte doit d'abord &ecirc;tre ajout&eacute; au n&#339;ud-&eacute;l&eacute;ment pour que l'&eacute;l&eacute;ment puisse recevoir le texte comme contenu. Enfin, l'&eacute;l&eacute;ment doit &ecirc;tre ajout&eacute; dans l'arborescence.</p>

<p>Pour tous les processus d'ajout, la m&eacute;thode <code>appendChild()</code> de l'objet <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/node.htm"><b>node</b></a> est employ&eacute;e. La m&eacute;thode est applicable &agrave; un objet n&#339;ud qui peut avoir des n&#339;uds-enfants. Donc par exemple, un n&#339;ud-&eacute;l&eacute;ment. La m&eacute;thode attend comme param&egrave;tre le n&#339;ud qui doit &ecirc;tre ajout&eacute; comme n&#339;ud-enfant.<br>
Si dans l'exemple figure donc: <code>noeud_element.appendChild(noeud_texte);</code><br>
Alors <code>noeud_element</code> est une variable dans laquelle a &eacute;t&eacute; cr&eacute;&eacute; auparavant un &eacute;l&eacute;ment objet par <code>createElement()</code>, et  <code>noeud_texte</code> est une variable qui a auparavant sauvegard&eacute; un n&#339;ud-texte par l'appel de  <code>createTextNode()</code>.<br>
Avec l'instruction <code>document.getElementById(&quot;utilisateur&quot;).appendChild(noeud_element)</code> il est acc&eacute;d&eacute; au passage <code>div</code> tout d'abord vide du document. &Agrave; cet &eacute;l&eacute;ment, est ajout&eacute; le nouveau n&#339;ud-&eacute;l&eacute;ment.</p>





<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr></table>
<h2 class="Sh2"><img src="../../src/dom10.gif" width="30" height="30" border="0" alt="DOM 1.0"><img src="../../src/js15.gif" width="30" height="30" border="0" alt="JavaScript 1.5"><img src="../../src/netsc6x.gif" width="30" height="30" border="0" alt="Netscape 6.x">&nbsp;<a class="an" name="event_handling">Gestion d'&eacute;v&eacute;nements dans le mod&egrave;le DOM</a></h2>

<p>La normalisation de la gestion d'&eacute;v&eacute;nements dans le mod&egrave;le DOM n'&eacute;tait toujours pas achev&eacute; au moment de la r&eacute;daction de ce document - ainsi il manquait par exemple toujours l'impl&eacute;mentation d'&eacute;v&eacute;nements clavier. L'Explorer Internet  5.x n'interpr&egrave;te encore toujours pas les &eacute;v&eacute;nements d'apr&egrave;s la syntaxe DOM, Netscape 6.x par contre le fait d&eacute;j&agrave;. L'exemple suivant montre le principe selon lequel fonctionne la gestion d'&eacute;v&eacute;nements d'apr&egrave;s la syntaxe du mod&egrave;le DOM.</p>

<h3 class="xmp">Exemple:</h3>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/domevents.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a></p>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
function sortir(texte) {
  element_protocole = document.createElement(&quot;li&quot;);
  nouveau_texte = document.createTextNode(texte);
  element_protocole.appendChild(nouveau_texte);
  document.getElementById(&quot;protocole&quot;).appendChild(element_protocole);
}

function gestion_clic_champ_saisie(ev) {
  Event = ev;
  texte = &quot;Vous avez cliqu&amp;eacute; dans le champ de saisie. &quot;;
  texte = texte + &quot;Event-Typ = &quot; + Event.type + &quot;, &quot;;
  texte = texte + &quot;Event-Target-Elementname = &quot; + Event.target.nodeName + &quot;.&quot;;
  sortir(texte);
}

function gestion_mouvement_passage(ev) {
  Event = ev;
  texte = &quot;Vous avez boug&amp;eacute; la souris dans le passage. &quot;;
  texte = texte + &quot;position_X = &quot; + Event.clientX + &quot;, &quot;;
  texte = texte + &quot;position_Y = &quot; + Event.clientY + &quot;.&quot;;
  sortir(texte);
}

function gestion_clic_passage(ev) {
  Event = ev;
  texte = &quot;Vous avez cliqu&amp;eacute; dans le passage. &quot;;
  texte = texte + &quot;position_X = &quot; + Event.clientX + &quot;, &quot;;
  texte = texte + &quot;position_Y = &quot; + Event.clientY + &quot;.&quot;;
  sortir(texte);
}

function Init() {
  document.getElementsByName(&quot;saisie&quot;)[0].addEventListener(&quot;click&quot;, gestion_clic_champ_saisie, true);
  document.getElementById(&quot;passage&quot;).addEventListener(&quot;mousemove&quot;, gestion_mouvement_passage, true);
  document.getElementById(&quot;passage&quot;).addEventListener(&quot;click&quot;, gestion_clic_passage, true);
}
//--&gt;
&lt;/script&gt;
&lt;/head&gt;&lt;body onLoad=&quot;Init()&quot;&gt;

&lt;form name=&quot;formulaire&quot; style=&quot;background-color:#EEEEEE; padding:10px&quot; action=&quot;&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;saisie&quot; size=&quot;50&quot;&gt;
&lt;/form&gt;

&lt;div id=&quot;passage&quot; style=&quot;background-color:#FF0000; color:#FFFFFF; font-weight:bold; width:100px&quot;&gt;Ein passage&lt;/div&gt;

&lt;ol id=&quot;protocole&quot; style=&quot;font-family:Arial,sans-serif; font-size:10pt&quot;&gt;&lt;li&gt;Ereignisliste&lt;/li&gt;&lt;/ol&gt;

&lt;/body&gt;&lt;/html&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans le passage visible du fichier HTML est not&eacute; un formulaire avec un champ de saisie, plus un passage <code>div</code>, et enfin une liste num&eacute;rot&eacute;e vide. Dans le rep&egrave;re d'introduction <code>&lt;body&gt;</code> est not&eacute; le gestionnaire d'&eacute;v&eacute;nement <code>onLoad</code>, qui n'a n&eacute;anmoins toujours rien &agrave; voir avec la gestion d'&eacute;v&eacute;nements d'apr&egrave;s la syntaxe du mod&egrave;le DOM. L&agrave; est tout simplement appel&eacute;e la fonction <code>Init()</code>, qui est not&eacute;e dans l'ent&ecirc;te de fichier.</p>

<p>Dans la fonction <code>Init()</code> on aborde cependant le c&#339;ur du sujet en ce qui concerne la gestion d'&eacute;v&eacute;nements dans le mod&egrave;le DOM. La gestion d'&eacute;v&eacute;nements consiste d'abord dans le mod&egrave;le DOM &agrave; enregistrer une surveillance d'&eacute;v&eacute;nement pour un n&#339;ud de votre choix dans le document. Pour ce faire existe la m&eacute;thode <code>addEventListener()</code>. Avec la partie qui pr&eacute;c&egrave;de, dans l'exemple par exemple <code>document.getElementsByName(&quot;saisie&quot;)[0]</code>, est adress&eacute; le n&#339;ud du document pour lequel une surveillance d'&eacute;v&eacute;nements doit &ecirc;tre enregistr&eacute;e. Dans l'exemple de la fonction <code>Init()</code> trois surveillances d'&eacute;v&eacute;nements en tout sont sollicit&eacute;es: une pour le champ de saisie du formulaire et deux pour le passage <code>div</code>.</p>

<p>La m&eacute;thode <code>addEventListener()</code> attend trois param&egrave;tres. Le premier param&egrave;tre mentionne quel type d'&eacute;v&eacute;nement doit &ecirc;tre surveill&eacute;. Pour les &eacute;v&eacute;nements souris, il s'agit pour une large part des types d'&eacute;v&eacute;nements connus de l'objet JavaScript <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../javascript/objets/event.htm"><b>event</b></a> comme <code>click</code>, <code>mouseover</code>, <code>mousedown</code>, <code>mouseup</code>, <code>mousemove</code>. &Agrave; cela s'ajoutent les types d'&eacute;v&eacute;nements du mod&egrave;le DOM tels que <code>DOMFocusIn</code> (le n&#339;ud devient zone de saisie active), <code>DOMFocusOut</code> (le n&#339;ud cesse d'&ecirc;tre la zone de saisie active), <code>DOMActivate</code> (le n&#339;ud est activ&eacute; par un clic de souris ou une touche clavier), ainsi que des &eacute;v&eacute;nements ind&eacute;pendants de l'utilisateur tels que <code>DOMSubtreeModified</code> (arborescence modifi&eacute;e), <code>DOMNodeInserted</code> (n&#339;ud ins&eacute;r&eacute; dans l'arborescence) ou bien <code>DOMNodeRemoved</code> (n&#339;ud effac&eacute; de l'arborescence). Le nom du type d'&eacute;v&eacute;nement doit figurer entre guillemets dans la mention du param&egrave;tre.</p>

<p>Le deuxi&egrave;me param&egrave;tre, que le <code>addEventListener()</code> attend, est le nom d'une fonction, qui doit &ecirc;tre appel&eacute;e si l'&eacute;v&eacute;nement survient. Le nom de la fonction est mentionn&eacute; sans guillemets. La fonction mentionn&eacute;e re&ccedil;oit automatiquement un objet &eacute;v&eacute;nement et peut ainsi commencer ce qu'elle doit faire. &Agrave; ce sujet, voir plus bas.</p>

<p>Comme troisi&egrave;me param&egrave;tre, il faut transmettre &agrave; l' <code>addEventListener()</code> soit <code>true</code> soit <code>false</code>. Avec  <code>true</code> vous activez la surveillance d'&eacute;v&eacute;nement, avec <code>false</code> pas encore.</p>

<p>Pour chaque &eacute;v&eacute;nement que vous d&eacute;sirez surveiller, vous avez besoin d'une fonction qui r&eacute;agit &agrave; l'&eacute;v&eacute;nement. C'est la fonction dont le nom est transmis comme deuxi&egrave;me param&egrave;tre pour <code>addEventListener()</code>. Dans l'exemple ci-dessus, trois &eacute;v&eacute;nements doivent &ecirc;tre surveill&eacute;s. C'est pourquoi il y a trois fonctions similaires des noms de <code>gestion_clic_champ_saisie()</code>, <code>gestion_mouvement_passage()</code> et <code>gestion_clic_passage()</code>. Toutes les trois re&ccedil;oivent l'&eacute;v&eacute;nement en tant qu'objet lors de leur appel automatique qui a lieu lorsque l'&eacute;v&eacute;nement survient. Les fonctions de l'exemple attendent pour cette raison un param&egrave;tre <code>ev</code>, qu'elles affectent dans leur premi&egrave;re instruction &agrave; la variable <code>Event</code>. Apr&egrave;s les fonctions peuvent acc&eacute;der par la variable <code>Event</code> aux propri&eacute;t&eacute;s et m&eacute;thodes de l'objet &eacute;v&eacute;nement. Pour les &eacute;v&eacute;nements souris existent par exemple des propri&eacute;t&eacute;s telle que <code>clientX</code> (nombre de pixels &agrave; compter du bord gauche du passage visible du n&#339;ud), <code>clientY</code> (nombre de pixels &agrave; compter du bord sup&eacute;rieur du passage visible du n&#339;ud), <code>screenX</code> (nombre de pixels &agrave; compter du bord gauche de l'&eacute;cran) ou <code>screenY</code> (nombre de pixels &agrave; compter du bord sup&eacute;rieur de l'&eacute;cran).</p>

<p>Dans l'exemple, les fonctions qui surveillent un &eacute;v&eacute;nement, composent simplement un texte et appellent ensuite la fonction <code>sortir()</code> avec le texte form&eacute;. La fonction  <code>sortir()</code> cr&eacute;e d'abord un nouvel &eacute;l&eacute;ment HTML du type <code>li</code> avec <code>document.createElement(&quot;li&quot;)</code>. Ensuite elle cr&eacute;e un nouveau n&#339;ud texte  avec le texte transmis avec <code>document.createTextNode(texte)</code>. Enfin, elle ajoute le n&#339;ud-texte avec <code>appendChild()</code> en tant que n&#339;ud enfant du n&#339;ud-&eacute;l&eacute;ment cr&eacute;&eacute;  <code>li</code>, et ajoute celui-ci dans la liste num&eacute;rot&eacute;e not&eacute;e dans le document. De cette mani&egrave;re, la liste num&eacute;rot&eacute;e se remplit de fa&ccedil;on dynamique avec chaque &eacute;v&eacute;nement ayant &eacute;t&eacute; reconnu.</p>



<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="microsoft.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="microsoft.htm"><b>L'ancien mod&egrave;le DHTML de Microsoft</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="../intro.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="../intro.htm"><b>g&eacute;n&eacute;ralit&eacute;s sur HTML dynamique</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>HTML dynamique</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Les diff&eacute;rents mod&egrave;les DHTML</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
