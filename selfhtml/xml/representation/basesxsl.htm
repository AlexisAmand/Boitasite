<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title> SELFHTML: XML/DTD / Repr&eacute;sentation de donn&eacute;es XML / Bases de XSL/XSLT</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Quelle est la diff&eacute;rence entre XSL et XSLT que signifie &quot;Transformation&quot; et o&ugrave; les processeurs XSLT peuvent &ecirc;tre mis en &#339;uvre.">
<meta name="keywords"       content="SELFHTML, XML, XSL, XSLT, Transformation">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/xml/representation/basesxsl.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // XML/DTD == ../index.htm // Repr&eacute;sentation de donn&eacute;es XML == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>XML/DTD</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Repr&eacute;sentation de donn&eacute;es XML</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Bases de XSL/XSLT</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#xsl_xslt"><b>XSL et XSLT</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#transformation"><b>Transformation avec XSLT</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#navigateur_serveur"><b>XSLT dans le navigateur et sur le serveur</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="xsl_xslt">XSL et XSLT</a></h2>

<p>Le langage XSL (<i>Extensible Stylesheet Language</i>, en fran&ccedil;ais: langage de format extensible) comprend deux composants importants:<br>
1. Un composant pour le <b>formatage</b> de donn&eacute;es XML (souvent appel&eacute; <i>XSL-FO</i> - &quot;XSL Formatting Objects&quot; ), et<br>
2. un composant pour la <b>transformation</b> de donn&eacute;es XML en autres donn&eacute;es XML.<br>
Pour le composant pour la transformation, l'abr&eacute;viation XSLT (<i>XSL Transformation</i>, en fran&ccedil;ais: transformation XML) s'est impos&eacute;e.</p>

<p>Les abr&eacute;viations XSL et XSLT portent &agrave; confusion, surtout quand on consulte &agrave; ce sujet les pages du consortium W3. Il y a l&agrave; des sp&eacute;cifications s&eacute;par&eacute;es pour XSL et XSLT, compl&eacute;t&eacute;es par une autre sp&eacute;cification importante, &agrave; savoir celle sur le langage <b>XPath</b>. XPath agit &agrave; l'int&eacute;rieur de XSLT comme un sous langage. Mais pourquoi donc il ne pourrait pas y avoir tout simplement un langage de formatage pour les donn&eacute;es XML? La raison en est avant tout que le composant de transformation XSLT est si puissant qu'il a d&eacute;velopp&eacute; une vie propre. Ne vous laissez pas troubler. Dans la pratique actuelle, vous utilisez XSL avant tout, en utilisant le composant de transformation XSLT.</p>

<p>XSL a &eacute;t&eacute; cr&eacute;&eacute; comme langage de feuilles de style g&eacute;n&eacute;ral pour les donn&eacute;es XML. La t&acirc;che essentielle de XSL est donc en fin de compte de formater les donn&eacute;es XML. On exige naturellement beaucoup d'un tel langage, &eacute;tant donn&eacute; que les donn&eacute;es XML peuvent &ecirc;tre de natures diverses. Tandis que les CSS sont fort centr&eacute;es sur le domaine de HTML et la repr&eacute;sentation de pages Web, les possibilit&eacute;s de formatage de XSL ont tendance &agrave; &ecirc;tre plus orient&eacute;es vers les exigences des publications imprim&eacute;es. Pour cela XSL net un peu comme les CSS un grand &eacute;ventail de propri&eacute;t&eacute;s de style et contient en plus &eacute;galement des possibilit&eacute;s qui contr&ocirc;lent le d&eacute;roulement logique de la pr&eacute;sentation de donn&eacute;es, comme par exemple la num&eacute;rotation automatique de chapitre ou des fonctions de tri. XSL peut certes &ecirc;tre encore largement d&eacute;sign&eacute; comme langage de description pour les formats, mais contient en plus &eacute;galement des constructions telles que des instructions conditionnelles ou des instructions pour des boucles qui font davantage penser &agrave; des langages de programmation.</p>

<p>Avec le composant de transformation XSLT, XSL dispose pourtant d'une autre possibilit&eacute; importante: le composant de transformation permet entre autres, de transformer des donn&eacute;es XML en HTML. ET c'est exactement l&agrave; que r&eacute;side la grande chance pour XML sur le WWW! Car les fournisseurs de projets Web peuvent ainsi sauvegarder proprement leurs donn&eacute;es structur&eacute;es en XML et les pr&eacute;senter malgr&eacute; tout en HTML, de fa&ccedil;on que chaque navigateur puisse afficher les donn&eacute;es. Pour cela, toutes les constructions HTML souhait&eacute;es sont permises - y compris JavaScript et les CSS. Ainsi il n'est pas rare de voir des situations o&ugrave; aussi bien XSLT que les CSS sont mis en &#339;uvre pour cr&eacute;er avec des donn&eacute;es XML des pages Web qui interpellent. Mai les deux langages ont dans cette technique une place bien pr&eacute;cise: XSLT sert &agrave; g&eacute;n&eacute;rer du code HTML avec des donn&eacute;es XML et les CSS sont le langage de formatage pour le produit de la conversion HTML g&eacute;n&eacute;r&eacute; par XSLT.</p>

<p>Sur le plan de la publication sur le Web la transformation de d&eacute;finitions XML en code HTML est &agrave; l'heure actuelle l'application principale de XSL. C'est pour cette raison que la pr&eacute;sente documentation se contente de n'approfondir que XSLT. Il a &eacute;t&eacute; renonc&eacute; par contre provisoirement d'&eacute;tablir une r&eacute;f&eacute;rence du langage de format XSL proprement-dit.</p>


<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><a class="an" name="transformation">Transformation avec XSLT</a></h2>

<p>La partie XSLT de XSL a pour mission de transformer des &eacute;l&eacute;ments d'un langage bas&eacute; sur XML dans un autre langage conforme &agrave; XML. Ainsi donc, vous pouvez par exemple transformer des &eacute;l&eacute;ments d'un de vos fichiers XML, comme <code>prenom</code> et <code>nom</code>, en constructions de marquage d'un autre langage pour cr&eacute;er une sortie format&eacute; des &eacute;l&eacute;ments.</p>

<p>Quand par exemple, vous transformez des donn&eacute;es XML en HTML, vous cr&eacute;ez une relation entre les &eacute;l&eacute;ments et attributs de vos donn&eacute;es XML et certaines constructions HTML. Ainsi vous pouvez par exemple mentionner dans la feuille de style XSLT qu'un &eacute;l&eacute;ment nomm&eacute; <code>prenom</code> doit &ecirc;tre transcrit dans le code HTML en <code>&lt;td&gt;[...]&lt;/td&gt;</code>. Si maintenant, vous incorporez la feuille de style XSL dans vos donn&eacute;es d'application XML et que vous notez maintenant par exemple <code>&lt;prenom&gt;Stefan&lt;/prenom&gt;</code> alors vous obtiendrez comme r&eacute;sultat lors de la transformation, la construction HTML <code>&lt;td&gt;Stefan&lt;/td&gt;</code>.</p>

<p>On parle aussi de la transformation de l'<b>arbre des donn&eacute;es XML</b> en un <b>arbre de transformation</b>. Derri&egrave;re figure le fait que toutes les donn&eacute;es bas&eacute;es sur XML peuvent &ecirc;tre repr&eacute;sent&eacute;es sous forme d'<img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../regles/arborescence.htm"><b>arborescence</b></a>. L'illustration suivante met en lumi&egrave;re comment un arbre des donn&eacute;es XML devient un arbre de transformation - il ne s'agit bien s&ucirc;r ici que d'un petit extrait:</p>

<p><img src="arborescence_xslt.gif" width="702" height="270" border="0" alt="arbre des donn&eacute;es XML et arbre de transformation"></p>

<p>Les traits noirs sur la gauche montrent les correspondances. Le rep&egrave;re  <code>&lt;contact&gt;</code> de l'arbre des donn&eacute;es XML donne dans l'arbre de transformation HTML le rep&egrave;re <code>&lt;tr&gt;</code>, gr&acirc;ce auquel une ligne de tableau est commenc&eacute;e. Des exigences tr&egrave;s vari&eacute;es peuvent &ecirc;tre pos&eacute;es &agrave; une telle transformation. Vous pouvez reconna&icirc;tre aux parties soulign&eacute;es que la transformation est plus compliqu&eacute;e &agrave; cet endroit. L&agrave; o&ugrave; les adresses pour la page d'accueil et le courriel sont simplement sauvegard&eacute;es comme texte dans les donn&eacute;es XML, la sortie HTML doit sortie un lien pouvant &ecirc;tre cliqu&eacute;. Pour cela, il est n&eacute;cessaire de noter lors de la transformation que le contenu de l'&eacute;l&eacute;ment <code>url</code> par exemple dans l'arbre des donn&eacute;es XML doit &ecirc;tre affect&eacute; dans l'arbre de transformation &agrave; l'attribut <code>href</code> de l'&eacute;l&eacute;ment <code>a</code> et qu'il doit ensuite appara&icirc;tre encore une fois en tant que contenu de l'&eacute;l&eacute;ment <code>a</code>. Comme vous pouvez le voir &agrave; cet exemple, il est souvent n&eacute;cessaire de cibler pr&eacute;cis&eacute;ment l'acc&egrave;s aux diff&eacute;rentes parties (n&#339;uds) des donn&eacute;es XML, pour placer celles-ci lors de la cr&eacute;ation de l'arbre de transformation &eacute;galement &agrave; des endroits bien pr&eacute;cis. Pour cela, vous devez adresser pr&eacute;cis&eacute;ment les parties d&eacute;sir&eacute;es comme &quot;contenu de l'&eacute;l&eacute;ment <code>url</code> dans l'enregistrement actuel (rechercher le jeu de n&#339;uds - voir aussi <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../regles/arborescence.htm#noeuds_jeux_noeuds"><b>N&#339;uds et jeux de n&#339;uds dans l'arborescence</b></a>). Pour cet adressage, XSLT utilise une syntaxe qui est d&eacute;finie dans un langage &agrave; part: en <b>XPath</b>. XPath d&eacute;crit comment acc&eacute;der aux parties constituant la structure dans les structures de donn&eacute;es conformes &agrave; XML.</p>

<p>XSL est lui-m&ecirc;me un langage de marquage bas&eacute; sur XML et se compose d'&eacute;l&eacute;ments et d'attributs. Pour les employer leur espace de nommage est habituellement import&eacute; dans un fichier XML. Le fichier est sauvegard&eacute; avec l'extension <code>.xsl</code>. Dans une application XSLT typique, vous devez encore importer outre l'espace de nommage XSL l'espace de nommage du langage dans lequel il doit &ecirc;tre transform&eacute;. Pour les applications Web, c'est le plus souvent HTML. Un fichier XSLT typique est donc compos&eacute; d'&eacute;l&eacute;ments propres &agrave; XSL et d'&eacute;l&eacute;ments HTML.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><a class="an" name="navigateur_serveur">XSLT dans le navigateur et sur le serveur</a></h2>

<p>XSLT a besoin d'un <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../intro.htm#parser"><b>analyseur syntaxique</b></a>, qui ex&eacute;cute les instructions de transformation. Car si vous mentionnez en XSLT que par exemple un &eacute;l&eacute;ment nomm&eacute; <code>prenom</code> doit &ecirc;tre transcrit en code HTML en <code>&lt;td&gt;[...]&lt;/td&gt;</code>, vous notez en XSLT ni plus ni moins qu'un &eacute;l&eacute;ment correspondant qui repr&eacute;sente une instruction de transformation exactement comme si vous notiez des &eacute;l&eacute;ments HTML dans un fichier HTML. Pour que ces instructions aient un effet, un analyseur syntaxique doit traiter les instructions comme entr&eacute;es de donn&eacute;es et en cr&eacute;er un r&eacute;sultat qu'il communique au logiciel, par exemple un navigateur, charg&eacute; d'afficher les donn&eacute;es.</p>

<p>L'analyseur syntaxique XSLT est simplement un module logiciel. La question se pose pourtant de savoir quelle est la meilleure place pour ce module logiciel. Quand la transformation des donn&eacute;es XML doit avoir lieu dans une sortie format&eacute;e dans le navigateur, alors, le navigateur lui-m&ecirc;me doit disposer d'un module correspondant. C'est par exemple le cas pour l'Explorer Internet MS &agrave; partir de la version 5.0. Les navigateurs plus anciens ne connaissent cependant pas un tel module et pas d'affichage ou plut&ocirc;t aucun affichage convenable &agrave; l'&eacute;cran de donn&eacute;es XML ne peut se faire.</p>

<p>L'autre possibilit&eacute; qui est actuellement la plus r&eacute;pandue pour les pages Web sur Internet, est pour cette raison, d'int&eacute;grer le module logiciel pour l'analyseur syntaxique XSLT dans le serveur Web. L'avantage en est que les donn&eacute;es XML sont transform&eacute;es en HTML avant m&ecirc;me qu'elles ne soient transmises par HTTP au navigateur qui les demande. Cela a l'effet merveilleux que les donn&eacute;es XML peuvent &ecirc;tre pr&eacute;sent&eacute;es sur chaque navigateur m&ecirc;me s'il est ancien ou rudimentaire. Car le navigateur, lorsqu'il r&eacute;clame les donn&eacute;es ne re&ccedil;oit rien en XML. &Agrave; la place il ne re&ccedil;oit du serveur que des donn&eacute;es en HTML. Pour Apache, qui est aujourd'hui sur le Web de loin le produit  pour serveur le plus r&eacute;pandu, il existe un tel module XSLT nomm&eacute; <b>Xalan</b> - &eacute;crit en Java ou en C++.</p>

<p>Pour les pages Web dynamiques c&ocirc;t&eacute; serveur, donc par exemple pour des pages cr&eacute;es par un cript CGI, vous avez &eacute;galement tout &agrave; fait la possibilit&eacute; de transformer vos donn&eacute;es XML dans le script en constructions HTML. Pour des applications XML simples, coder soi-m&ecirc;me les instructions de transcription de XML en HTML ne pr&eacute;sente aucun probl&egrave;me. Pour des applications XML plus importantes, il est cependant recommand&eacute; de faire appel dans le script &agrave; des modules sp&eacute;cialis&eacute;s pour ce travail de transformation. En Perl, il existe par exemple les modules <b>XML::Parser</b> et <b>XML::Parser::Expat</b>, pour traiter directement des donn&eacute;es XML.</p>


<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="exemplesxslt.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="exemplesxslt.htm"><b>Exemples pour XSLT</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="css.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="css.htm"><b>Repr&eacute;sentation XML avec des feuilles de style CSS
</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>XML/DTD</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Repr&eacute;sentation de donn&eacute;es XML</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
