<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>SELFHTML: XML/DTD / Repr&eacute;sentation de donn&eacute;es XML / Exemples pour XSLT</title>
<link rel="stylesheet" type="text/css" href="../../src/selfhtml.css">
<meta name="description"    content="Comment fonctionne XSLT - explications sur le vu d'exemples.">
<meta name="keywords"       content="SELFHTML, XML, XSLT, Transformation">
<meta name="author"         content="Stefan M&uuml;nz, selfhtml@teamone.de">
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="DC.Publisher"   content="Serge Fran&ccedil;ois, selfhtml@selfhtml.com.fr">
<meta name="DC.Date"        content="2003-01-27T08:00+00:00">
<meta name="DC.Identifier"  content="http://selfhtml.selfhtml.com.fr/xml/representation/exemplesxslt.htm">
<meta name="DC.Language"    content="fr">
<meta name="DC.Rights"      content="../../editorial/copyright.htm">
<meta name="DC.Date.Create" content="2003-01-27T08:00+00:00">
<meta name="SELF.Version"   content="1">
<meta name="SELF.Pagetype"  content="Information">
<meta name="SELF.Path"      content="SELFHTML == ../../index.htm // XML/DTD == ../index.htm // Repr&eacute;sentation de donn&eacute;es XML == index.htm">
<!-- Matomo -->
<script type="text/javascript">
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//matomo.boitasite.com/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Matomo Code -->
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#AA5522" vlink="#772200" alink="#000000">

<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="top"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>XML/DTD</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Repr&eacute;sentation de donn&eacute;es XML</b></a></td>
</tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#EEEEEE" class="doc" width="110"><img src="../../src/logo.gif" width="106" height="109" border="0" alt="SELFHTML"></td>
<td bgcolor="#EEEEEE" class="doc" valign="bottom" width="100%"><h2>Exemples pour XSLT</h2>
<tr>
<td bgcolor="#EEEEEE" class="doc" valign="top" align="center">
<img src="../../src/docx.gif" width="30" height="20" vspace="6" border="0" alt="Page d'information: vue d'ensemble">
</td>
<td bgcolor="#FFFFFF" valign="top" nowrap>
<p>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#remarques"><b>Remarques sur les exemples</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#exemple_salut"><b>Premier exemple: un salut</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#exemple_texte"><b>Deuxi&egrave;me exemple: texte avec formatages</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#exemple_liens"><b>Troisi&egrave;me exemple: texte avec des liens (graphiques et multim&eacute;dia)</b></a><br>
<img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas">&nbsp;<a href="#exemple_glossaire"><b>Quatri&egrave;me exemple: un glossaire en tant que tableau</b></a><br>
</p>
</td>
</tr><tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;<a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;</td></tr>
</table>



<h2 class="Sh2"><a class="an" name="remarques">Remarques sur les exemples</a></h2>

<p>Pour se familiariser avec la terminologie de XSLT, il est recommand&eacute; de travailler tous les exemples de cette page et de les comprendre.</p>

<p>Les exemples recouvrent quelques unes des possibilit&eacute;s typiques d'utilisation de XSLT. Ils n'&eacute;puisent cependant pas les possibilit&eacute;s du langage. XSLT est lui-m&ecirc;me un langage conforme &agrave; XML et se compose de certains &eacute;l&eacute;ments et attributs. Vous trouverez une vue d'ensemble syst&eacute;matique &agrave; ce sujet dans la partie <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;
<a href="elementsxslt.htm"><b>&Eacute;l&eacute;ments XSLT</b></a>.</p>

<p>L'Explorer Internet Microsoft 5.x a suivant sa version des probl&egrave;mes avec ces exemples. La raison en est qu'il a &eacute;t&eacute; livr&eacute; - et l'est en partie toujours - avec un analyseur syntaxique p&eacute;rim&eacute;. Cet analyseur syntaxique interpr&egrave;te XSLT en se fondant sur une ancienne mouture (Working Draft) du consortium W3 qui entre-temps est depuis longtemps d&eacute;pass&eacute;e pour &ecirc;tre remplac&eacute;e par la recommandation XSLT-1.0-. De cette fa&ccedil;on malencontreuse et par la propagation de l'Explorer Internet Microsoft des millions de copies d'un analyseur syntaxique XSLT absolument inutilisable courent le monde. Bien que Microsoft propose depuis longtemps des mises &agrave; jour de cet outil inutile, il est in&eacute;vitable que de nombreux utilisateurs poss&egrave;dent un Explorer Internet Microsoft qui interpr&egrave;te tr&egrave;s incompl&egrave;tement et par des d&eacute;tours incertains les transcriptions XSLT. C'est pourquoi l'emploi judicieux de XSLT n'est vraiment possible que c&ocirc;t&eacute; serveur. Vous pouvez lire des d&eacute;tails sur l'impl&eacute;mentation de XSLT de l'Explorer Internet sur la toile sur la page <img src="../../src/en.gif" width="16" height="10" border="0" alt="Page en langue anglaise">&nbsp;<a target="_top" href="http://www.netcrucible.com/xslt/msxml-faq.htm"><b>Unofficial MSXML XSLT FAQ</b></a>.</p>

<p>Dans les exemples de cette page et des pages suivantes, il n'a pas &eacute;t&eacute; tenu compte de l'ancienne impl&eacute;mentation de l'Explorer Internet. XSLT est &eacute;crit comme il doit &ecirc;tre employ&eacute; aujourd'hui. Pour retracer les exemples, il y a aujourd'hui des utilitaires logiciels comme <b>Saxon</b> ou <b>Xt</b>. Dans l'index des liens de l'offre en ligne de SELFHTML actuel, vous trouverez des liens &agrave; ces <img src="../../src/serverdoc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="http://www.selfhtml.com.fr/liens/index.htm"><b>Index des liens: logiciels XML</b></a>.</p>

<p>&Agrave; titre d'exemple, le travail avec  <b>Saxon</b> est d&eacute;crit. Ce programme est un pur analyseur syntaxique XSLT qui &agrave; partir d'un fichier XML et d'une feuille de style XSLT, cr&eacute;e un fichier de sortie sur la base des d&eacute;finitions XSLT. Saxon est purement orient&eacute; &quot;ligne d'invite de commande&quot; (pour les utilisateurs de Windows existe une version qui peut tourner dans une fen&ecirc;tre DOS). C'est ce qui permet &agrave; Saxon d'&ecirc;tre &eacute;galement particuli&egrave;rement bien appropri&eacute; pour &ecirc;tre ex&eacute;cut&eacute; par exemple &agrave; partir de  <img src="../../src/chap.gif" width="15" height="13" border="0" alt="Chapitre: vue d'ensemble">&nbsp;<a href="../../cgiperl/index.htm"><b>scripts CGI</b></a>, qui veulent envoyer des donn&eacute;es XML sous forme HTML &agrave; un serveur qui les appelle.</p>

<p>Un appel simple de Saxon pourrait s'intituler:<br>
<kbd>saxon mesdonnees.xml moi.xsl &gt;sortie.html</kbd></p>

<p>Dans cette commande <var>mesdonnees.xml</var> est un fichier avec une structure de donn&eacute;es XML. Le fichier <var>moi.xsl</var> contient les d&eacute;finitions XSLT, sur la fa&ccedil;on dont les structures de donn&eacute;es XML de donn&eacute;es XML comme celles de <var>mesdonnees.xml</var> doivent &ecirc;tre transcrites en HTML. <var>sortie.html</var> est le nom du fichier HTML qui doit &ecirc;tre cr&eacute;&eacute; &agrave; partir des donn&eacute;es de sortie XML et des d&eacute;finitions de transcription en HTML.</p>

<p>M&ecirc;me en relation avec des scripts <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../cgiperl/index.htm"><b>CGI</b></a> on peut se servir de fa&ccedil;on optimale d'un programme comme  Saxon. Si vous vous int&eacute;ressez &agrave; CGI et &agrave; Perl vous trouverez dans la partie sur  <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../../cgiperl/fonctions/appelssysteme.htm#qx"><b>qx(...) - ex&eacute;cuter d'autres programmes et scripts et capturer STDOUT</b></a>, un exemple comment&eacute; sur la fa&ccedil;on dont vous pouvez envoyer des donn&eacute;es XML sauvegard&eacute;es c&ocirc;t&eacute; serveur en tant que code HTML au navigateur qui les appelle &agrave; l'aide de Saxon et de Perl.</p>

<p>Les exemples de cette page et des pages suivantes ont &eacute;t&eacute; transcrits de cette fa&ccedil;on de XML en HTML. Les donn&eacute;es HTML qui en r&eacute;sultent peuvent &ecirc;tre appel&eacute;s comme exemples d'affichage. De m&ecirc;me les fichiers XML peuvent &ecirc;tre appel&eacute;s. </p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><img src="../../src/xml10.gif" width="30" height="30" border="0" alt="XML1.0">&nbsp;<a class="an" name="exemple_salut">Premier exemple: un salut</a></h2>

<p>Le premier exemple montre le cas le plus simple possible: il y a une DTD dans laquelle seul un &eacute;l&eacute;ment est d&eacute;fini. Le fichier d'application XML est simple en cons&eacute;quence. Un fichier XSL qui contient les instructions XSLT assure la transformation en HTML.</p>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/bonjour.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier de r&eacute;sultat <var>bonjour.htm</var>)<br>
<img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/bonjour.xml" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (Fichier <var>bonjour.xml</var> - navigateur XML/XSLT indispensable)</p>

<h3 class="xmp">Exemple de DTD <var>bonjour.dtd</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!ELEMENT salut (#PCDATA)&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple d'une application valide <var>bonjour.xml</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE salut SYSTEM &quot;bonjour.dtd&quot;&gt;
&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;bonjour.xsl&quot; ?&gt;

&lt;salut&gt;hello monde!&lt;/salut&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple du fichier XSL incorpor&eacute; <var>bonjour.xsl</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;

&lt;xsl:template match=&quot;/&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
 &lt;p align=&quot;center&quot; style=&quot;font-family:Tahoma; font-size:48pt; color:red&quot;&gt;
  &lt;xsl:value-of select=&quot;.&quot; /&gt;
 &lt;/p&gt;
 &lt;/body&gt;&lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>Dans l'exemple de DTD, sauvegard&eacute;e s&eacute;par&eacute;ment dans un fichier nomm&eacute; <var>bonjour.dtd</var>, est d&eacute;fini le seul &eacute;l&eacute;ment du petit exemple &agrave; savoir l'&eacute;l&eacute;ment document  <code>salut</code>. Vous trouverez des d&eacute;tails pour ce genre de d&eacute;finitions d'&eacute;l&eacute;ment dans la partie sur les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../dtd/elements.htm"><b>&Eacute;l&eacute;ments et r&egrave;gles d'imbrication</b></a>.</p>

<p>Dans le fichier d'application XML <var>bonjour.xml</var>, il est fait r&eacute;f&eacute;rence dans une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../regles/declaration_type_document.htm#dtd_externe"><b>d&eacute;claration de type de document avec DTD externe</b></a> &agrave; la DTD &eacute;tablie pr&eacute;c&eacute;demment. Tout de suite &agrave; la suite de la d&eacute;claration de type de document, encore avant les donn&eacute;es d'utilisation proprement dites du fichier, suit une instruction &agrave; l'aide de laquelle le fichier XSL est incorpor&eacute;:<br>
<code>&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;bonjour.xsl&quot; ?&gt;</code></p>

<p>Il s'agit d'une <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../regles/declarationxml.htm#instructions_traitement"><b>instruction de traitement dans le fichier XML</b></a> au logiciel de traitement. Gr&acirc;ce &agrave; la notation <code>xml-stylesheet</code> le logiciel de traitement sait que les attributs qui suivent incorporent un fichier de feuilles de style s&eacute;par&eacute;. Avec l'attribut <code>href</code> le fichier est r&eacute;f&eacute;renc&eacute;. L'attribut <code>type</code> est tout aussi important. Lors de l'utilisation de XSL l'analyseur syntaxique XML attend pour cette attribut, la valeur <code>text/xsl</code>.</p>

<p>La constriction du fichier XSL est maintenant int&eacute;ressante, dans l'exemple, c'est le fichier <var>bonjour.xsl</var>. Les fichiers de feuilles de style XSL re&ccedil;oivent habituellement l'extension <var>.xsl</var>. &Eacute;tant donn&eacute; qu'il s'agit &eacute;galement pour les fichiers XSL de fichiers XML conformes, le fichier commence comme d'habitude par une d&eacute;claration XML  (dans l'exemple: <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</code>).</p>

<p>Tout le contenu du fichier XSL est inclus dans <code>&lt;xsl:stylesheet...&gt;...&lt;/xsl:stylesheet&gt;</code>. La notation avec deux points est la notation typique quand dans le fichier d'autres <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../regles/espaces_nom.htm"><b>espaces de nommage XML</b></a> sont employ&eacute;s. Dans le rep&egrave;re d'ouverture sont mentionn&eacute;s quels espaces de nommage sont employ&eacute;s. Il faut mentionner dans tous les cas, l'espace de nommage de XSL. Pour ce faire, il vous faut mentionner <code>http://www.w3.org/1999/XSL/Transform</code> comme espace de nommage. L'analyseur syntaxique plus ancien de l'Explorer Internet Microsoft  ne peut pas ensuite traiter librement les donn&eacute;es. Les analyseurs syntaxiques plus modernes par contre attendent cette mention.<br>
Avec un deuxi&egrave;me attribut <code>xmlns</code> dans le rep&egrave;re d'ouverture <code>&lt;xsl:stylesheet&gt;</code> vous pouvez en outre mentionner l'espace de nommage du langage d&eacute;sir&eacute; pour le r&eacute;sultat. Dans l'exemple ci-dessus, il n'en a pas &eacute;t&eacute; fait usage. Si toutefois vous avez besoin comme r&eacute;sultat d'un document conforme &agrave; XML, vous devez mentionner son espace de nommage. Avec une mention telle que <code>xmlns=&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</code> vous mentionnez par exemple l'espace de nommage de  XHTML 1.0 dans la variante &quot;Transitional&quot;.</p>

<p>Tous les rep&egrave;res d'ouverture et de fermeture &agrave; l'int&eacute;rieur de <code>&lt;xsl:stylesheet...&gt;...&lt;/xsl:stylesheet&gt;</code>, qui font partie de l'espace de nommage de XSL, sont reconnaissables &agrave; la notation <code>&lt;xsl:...&gt;...&lt;/xsl:...&gt;</code>. L'espace de nommage avec lequel XSL est incorpor&eacute; ne doit d'ailleurs pas s'appeler obligatoirement <code>xsl</code>, pourtant ce nom s'est instaur&eacute; dans les habitudes de fa&ccedil;on compr&eacute;hensible.</p>

<p>L'exemple ci-dessus continue avec <code>&lt;xsl:template match=&quot;/&quot;&gt;</code> (<i>anglais template = fran&ccedil;ais mod&egrave;le</i>). <code>xsl:template</code> re&ccedil;oit toujours dans son rep&egrave;re d'ouverture un attribut du nom de <code>match=</code> pour lequel vous mentionnez quel &eacute;l&eacute;ment de vos donn&eacute;es XML doit &ecirc;tre transform&eacute;. Avec la mention <code>match=&quot;/&quot;</code> vous vous r&eacute;f&eacute;rez &agrave; la racine du document des donn&eacute;es XML,  repr&eacute;sent&eacute; par l'&eacute;l&eacute;ment <code>salut</code>, utilis&eacute; dans la paire de rep&egrave;res <code>&lt;salut&gt;...&lt;/salut&gt;</code>.</p>

<p>Apr&egrave;s que vous avez choisi avec <code>match=</code> &agrave; quel &eacute;l&eacute;ment XML vous vous r&eacute;f&eacute;rez pour la d&eacute;finition Template qui suit, vous pouvez notez, comme contenu de l'&eacute;l&eacute;ment <code>xsl:template</code> comment l'&eacute;l&eacute;ment XML choisi doit &ecirc;tre remplac&eacute;. &Eacute;tant donn&eacute; qu'il doit &ecirc;tre transform&eacute; en HTML, est donc not&eacute; comme contenu de <code>xsl:template</code> le code HTML d&eacute;sir&eacute;. Dans l'exemple ci-dessus, c'est un petit fichier HTML complet. La raison en est qu'avec  <code>match=&quot;/&quot;</code>, c'est la racine du document des donn&eacute;es XML qui a &eacute;t&eacute; choisie. &Eacute;tant donn&eacute; que le r&eacute;sultat attendu est un fichier HTML complet, la racine du document des donn&eacute;es XML est transform&eacute;e en une ossature typique de fichier HTML.</p>

<p>Dans le code HTML, il faut que le <b>contenu</b> de <code>&lt;salut&gt;...&lt;/salut&gt;</code> soit sorti &agrave; l'endroit d&eacute;sir&eacute; -  dans l'exemple entre <code>&lt;body&gt;</code> et <code>&lt;/body&gt;</code> dans un paragraphe <code>&lt;p&gt;...&lt;/p&gt;</code>. C'est &agrave; cela que sert, dans les feuilles de style la commande <code>&lt;xsl:value-of select=&quot;.&quot;&nbsp;/&gt;</code> (<i>anglais value-of = fran&ccedil;ais valeur de</i>). La mention <code>select=&quot;.&quot;</code> veut dire quelque chose comme &quot;choisis le contenu complet de l'&eacute;l&eacute;ment actuel&quot;. Afin que la sortie HTML ait l'air un peu plus avenante le rep&egrave;re d'ouverture <code>&lt;p&gt;</code> contient des mentions de formatage. M&ecirc;me les mentions CSS sont permises comme vous pouvez le voir dans l'exemple. Lors de la transformation et &agrave; l'endroit correspondant, le code HTML suivant est cr&eacute;&eacute;:<br>
<code>&lt;p align=&quot;center&quot; style=&quot;font-family:Tahoma; font-size:48pt; color:red&quot;&gt;<br>
hello monde!<br>
&lt;/p&gt;</code></p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><img src="../../src/xml10.gif" width="30" height="30" border="0" alt="XML1.0">&nbsp;<a class="an" name="exemple_texte">Deuxi&egrave;me exemple: texte avec formatages</a></h2>

<p>L' <img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#exemple_salut"><b>exemple de salut</b></a> a une structure XML rigide. D'apr&egrave;s la d&eacute;finition de la DTD,  <code>&lt;salut&gt;...&lt;/salut&gt;</code> ne peut y &ecirc;tre not&eacute; exactement qu'une seule fois avec un texte de salutation comme contenu. L'exemple suivant montre une structure de donn&eacute;es dans laquelle il y a un &eacute;l&eacute;ment qui peut revenir aussi souvent que souhait&eacute; et qui peut encore contenir d'autres &eacute;l&eacute;ments int&eacute;rieurs. L'exemple concerne un fichier de nouveaut&eacute;s dans lequel sont rassembl&eacute;s des messages sur les nouveaux produits sur le march&eacute; des logiciels.<br>
Les mentions XSLT pour la transformation en HTML doivent &ecirc;tre construites un peu diff&eacute;remment dans cet exemple plus complexe.</p>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/produktnews.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier de r&eacute;sultat <var>produktnews.htm</var>)<br>
<img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/produktnews.xml" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier <var>produktnews.xml</var> - navigateur XML/XSLT indispensable)</p>

<h3 class="xmp">Exemple de DTD <var>produktnews.dtd</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!ELEMENT nouveautes (#PCDATA | description)*&gt;
&lt;!ELEMENT description (#PCDATA | fabricant | produit | prix)*&gt;
&lt;!ELEMENT fabricant (#PCDATA)&gt;
&lt;!ELEMENT produit (#PCDATA)&gt;
&lt;!ELEMENT prix (#PCDATA)&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple d'une application valide <var>produktnews.xml</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE nouveautes SYSTEM &quot;produktnews.dtd&quot;&gt;
&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;produktnews.xsl&quot; ?&gt;
&lt;nouveautes&gt;

Les derniers messages de nouveaut�s:

&lt;description&gt;
La firme  &lt;fabricant&gt;Logimages&lt;/fabricant&gt; a sorti une nouvelle version du jeu populaire
de ballon &lt;produit&gt;Manette chaude&lt;/produit&gt;.
D'apr�s les renseignements fournis par le constructeur, la nouvelle version qui fonctionne aussi sous le syst�me d'exploitation &lt;produit&gt;sans plantage&lt;/produit&gt; devrait co�ter aux alentours de &lt;prix&gt;80 Euros&lt;/prix&gt;.
&lt;/description&gt;

&lt;description&gt;
Il existe maintenant une rustine de &lt;fabricant&gt;Logicycles SARL&lt;/fabricant&gt; pour le CD ROM de collection
&lt;produit&gt;Floril�ge d'id�es d'autrui&lt;/produit&gt;. Il �tait de notori�t� publique que quelques uns des mod�les de pages Web sensationnelles
contenaient encore par erreur des mentions des auteurs originaux. La rustine est maintenant offerte pour le prix ridicule de
&lt;prix&gt;200 Euros&lt;/prix&gt;.
&lt;/description&gt;

&lt;/nouveautes&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple du fichier XSL incorpor&eacute; <var>produktnews.xsl</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;

&lt;xsl:template match=&quot;/&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=&quot;font-family:Verdana; font-size:18pt; color:green&quot;&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;&lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match=&quot;description&quot;&gt;
 &lt;p style=&quot;font-family:Verdana; font-size:10pt; color:black&quot;&gt;
   &lt;xsl:apply-templates /&gt;
 &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match=&quot;fabricant&quot;&gt;
 &lt;span style=&quot;font-weight:bold; color:red&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match=&quot;produit&quot;&gt;
 &lt;span style=&quot;font-weight:bold; color:blue&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match=&quot;prix&quot;&gt;
 &lt;b&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/b&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit dans la DTD <var>produktnews.dtd</var> les &eacute;l&eacute;ments d&eacute;sir&eacute;s et leurs r&egrave;gles d'imbrication. Dans le fichier d'application <var>produktnews.xml</var> vous voyez un exemple sur la fa&ccedil;on de transcrire correctement ces d&eacute;finitions. Vous trouverez des d&eacute;tails sur de telles d&eacute;finitions d'&eacute;l&eacute;ments dans les DTD, dans la partie sur les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../dtd/elements.htm"><b>&eacute;l&eacute;ments et r&egrave;gles d'imbrication</b></a>.</p>

<p>Exactement comme dans l'<img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#exemple_salut"><b>exemple de salut</b></a> le fichier XSL est &agrave; nouveau incorpor&eacute; dans le fichier XML avec des mentions pour une transformation en HTML. Le fichier XSL qui s'appelle ici <i>produktnews.xsl</i> a aussi l'ossature typique compos&eacute;e par l'&eacute;l&eacute;ment <code>xsl:stylesheet</code> qui &eacute;tablit la relation avec l'espace de nommage de XSL.</p>

<p>Comme dans l'exemple de salut la racine du document est adress&eacute;e avec <code>&lt;xsl:template match=&quot;/&quot;&gt;</code>. Entre ce rep&egrave;re d'ouverture et son pendant <code>&lt;/xsl:template&gt;</code> l'ossature HTML pour la transformation est not&eacute;e. &Agrave; l'int&eacute;rieur de <code>&lt;body&gt;...&lt;/body&gt;</code> n'est pourtant not&eacute; dans cet exemple que l'&eacute;l&eacute;ment vide <code>&lt;xsl:apply-templates&nbsp;/&gt;</code>  (<i>anglais apply-templates = fran&ccedil;ais appliquer les mod&egrave;les</i>). Avec cette mention, vous indiquez &agrave; l'analyseur syntaxique XSLT d'appliquer les mod&egrave;les not&eacute;s &agrave; l'ext&eacute;rieur de l'&eacute;l&eacute;ment <code>xsl:template</code> actuel &agrave; l'endroit correspondant.<br>
Si dans cet exemple plusieurs d&eacute;finitions de mod&egrave;les distinctes avec leur propre &eacute;l&eacute;ment <code>xsl:template</code> sont n&eacute;cessaires, cela est d&ucirc; au fait que le contenu qui, dans la sortie HTML, doit suivre entre <code>&lt;body&gt;...&lt;/body&gt;</code> n'a pas de construction rigide. Ainsi dans l'&eacute;l&eacute;ment racine <code>nouveautes</code> peuvent &ecirc;tre plac&eacute;s du texte comme la quantit&eacute; souhait&eacute;e d'&eacute;l&eacute;ments du type <code>description</code> et de ses &eacute;l&eacute;ments-enfants. Vous pouvez donc lire la mention <code>&lt;xsl:apply-templates&nbsp;/&gt;</code> comme voulant dire &quot;fais attention pour les &eacute;l&eacute;ments plac&eacute;s dans cet &eacute;l&eacute;ment aux mod&egrave;les d&eacute;finis s&eacute;par&eacute;ment pour eux&quot;.</p>

<p>La deuxi&egrave;me d&eacute;finition de mod&egrave;le de l'exemple commence par <code>&lt;xsl:template match=&quot;description&quot;&gt;</code>. Vous mentionnez ainsi, pour le code HTML qui suit, qu'il s'applique &agrave; tous les contenus du type d'&eacute;l&eacute;ment <code>description</code>. Dans l'exemple, un paragraphe HTML <code>&lt;p&gt;...&lt;/p&gt;</code> avec les formatages souhait&eacute;s est cr&eacute;&eacute; pour chacun de ces &eacute;l&eacute;ments. &Agrave; l'int&eacute;rieur de cet &eacute;l&eacute;ment <code>xsl:template</code> seul est not&eacute; cette fois encore <code>&lt;xsl:apply-templates&nbsp;/&gt;</code> . La raison en est encore dans ce cas que les &eacute;l&eacute;ments du type <code>description</code> peuvent contenir un
contenu mixte et d'autres &eacute;l&eacute;ments-enfants possibles. Pour ces &eacute;l&eacute;ments-enfants des mod&egrave;les distincts, &agrave; nouveau, seront d&eacute;finis dont il sera tenu compte gr&acirc;ce &agrave; l'instruction <code>&lt;xsl:apply-templates&nbsp;/&gt;</code>.</p>

<p>Pour chacun des types d'&eacute;l&eacute;ments-enfants possibles de <code>description</code>, dans l'exemple les types <code>fabricant</code>, <code>produit</code> et <code>prix</code>, des mod&egrave;les seront d&eacute;finis d'apr&egrave;s le m&ecirc;me sch&eacute;ma. &Eacute;tant donn&eacute; que ces &eacute;l&eacute;ments ne peuvent plus eux-m&ecirc;mes contenir d'autres &eacute;l&eacute;ments mais seulement du contenu en caract&egrave;res (<code>#PCDATA</code>), les mentions pour le formatage HTML se r&eacute;f&egrave;rent simplement &agrave; leur contenu. Vous devez r&eacute;f&eacute;rencer le contenu avec <code>&lt;xsl:value-of select=&quot;.&quot;&nbsp;/&gt;</code> comme dans l'exemple de salut.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><img src="../../src/xml10.gif" width="30" height="30" border="0" alt="XML1.0">&nbsp;<a class="an" name="exemple_liens">Troisi&egrave;me exemple: texte avec des liens (graphiques et multim&eacute;dia)</a></h2>

<p>Dans les deux premiers exemples, on n'a travaill&eacute; qu'avec des &eacute;l&eacute;ments. Dans le cas de liens il faut pourtant acc&eacute;der &agrave; chacun des diff&eacute;rents attributs pour cr&eacute;er la sortie HTML, &agrave; savoir &agrave;  l'attribut <code>href</code> de l'&eacute;l&eacute;ment <code>a</code>. M&ecirc;me &ccedil;a, c'est possible avec XSLT . C'est exactement la m&ecirc;me chose que si vous vouliez incorporer des graphiques ou du multim&eacute;dia. Alors vous devez par exemple acc&eacute;der &agrave; l'attribut <code>src</code> de l'&eacute;l&eacute;ment <code>img</code> ou bien &agrave; l'attribut <code>data</code> de l'&eacute;l&eacute;ment <code>object</code>. C'est ce que d&eacute;montre l'exemple suivant avec des liens.</p>

<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/linktext.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier de r&eacute;sultat <var>linktext.htm</var>)<br>
<img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/linktext.xml" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier <var>linktext.xml</var> - navigateur XML/XSLT indispensable)</p>

<h3 class="xmp">Exemple de DTD <var>linktext.dtd</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!ELEMENT texte_lien (#PCDATA | link)*&gt;
&lt;!ELEMENT link (#PCDATA)&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple d'une application valide <var>linktext.xml</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE texte_lien SYSTEM &quot;linktext.dtd&quot;&gt;
&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;linktext.xsl&quot; ?&gt;
&lt;texte_lien&gt;
La page d'accueil du consortium W3 sur XSL est � l'adresse suivante &lt;link&gt;http://www.w3.org/Style/XSL/&lt;/link&gt; pour ceux que &ccedil;a int�resse.
&lt;/texte_lien&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple du fichier XSL incorpor&eacute; <var>linktext.xsl</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;

&lt;xsl:template match=&quot;/&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot; link=&quot;#FF0000&quot; vlink=&quot;#AA0000&quot; alink=&quot;#000000&quot; style=&quot;font-family:Arial; font-size:10pt;&quot;&gt;
  &lt;xsl:apply-templates /&gt;
 &lt;/body&gt;&lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match=&quot;link&quot;&gt;
 &lt;a&gt;&lt;xsl:attribute name=&quot;href&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/xsl:attribute&gt;
 &lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/a&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit dans la DTD <var>linktext.dtd</var> les &eacute;l&eacute;ments d&eacute;sir&eacute;s et leurs r&egrave;gles d'imbrication. Dans le fichier d'application  <var>linktext.xml</var> vous voyez un exemple sur la fa&ccedil;on de transcrire correctement ces d&eacute;finitions. Vous trouverez des d&eacute;tails sur de telles d&eacute;finitions d'&eacute;l&eacute;ments dans les DTD, dans la partie sur les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../dtd/elements.htm"><b>&eacute;l&eacute;ments et r&egrave;gles d'imbrication.</b></a>.</p>

<p>Exactement comme dans l'<img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#exemple_salut"><b>exemple de salut </b></a> le fichier XSL est &agrave; nouveau incorpor&eacute; dans le fichier XML avec des mentions pour une transformation en HTML. Le fichier XSL qui s'appelle ici  <var>linktext.xsl</var> - a aussi l'ossature typique.</p>

<p>Comme dans l'<img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#exemple_texte"><b>exemple de texte</b></a> l'&eacute;l&eacute;ment document <code>texte_lien</code> de cet exemple peut avoir un contenu mixte compos&eacute; de texte et d'un &eacute;l&eacute;ment-enfant possible  <code>link</code>. Lors de la construction de la sortie HTML n'a &eacute;t&eacute; not&eacute; pour cette raison entre <code>&lt;body&gt;...&lt;/body&gt;</code> que l'&eacute;l&eacute;ment vide <code>&lt;xsl:apply-templates&nbsp;/&gt;</code>. Le code HTML pour l'&eacute;l&eacute;ment-enfant possible HTML est d&eacute;fini dans un mod&egrave;le distinct qui commence avec <code>&lt;xsl:template match=&quot;link&quot;&gt;</code>.</p>

<p>Dans ce mod&egrave;le, vous pouvez reconna&icirc;tre comment on acc&egrave;de &agrave; des attributs distincts. Car pour cr&eacute;er &agrave; partir de <code>&lt;link&gt;http://www.w3.org/Style/XSL/&lt;/link&gt;</code> une sortie HTML pouvant &ecirc;tre cliqu&eacute;e comme <code>&lt;a&nbsp;href=&quot;http://www.w3.org/Style/XSL/&quot;&gt;http://www.w3.org/Style/XSL/&lt;/a&gt;</code>, le contenu de l'&eacute;l&eacute;ment <code>link</code> doit &ecirc;tre sorti deux fois: une fois comme attribution de valeur &agrave; l'attribut <code>href</code> et une fois comme contenu de l'&eacute;l&eacute;ment <code>a</code>.<br>
Pour ce faire, notez pour le code HTML qui doit &ecirc;tre cr&eacute;&eacute;, une premi&egrave;re fois seulement le rep&egrave;re d'ouverture sans attribut dans l'exemple du lien donc seulement <code>&lt;a&gt;</code>. Notez ensuite <code>&lt;xsl:attribute name=&quot;href&quot;&gt;</code>. L'analyseur syntaxique XSLT sait alors que l'attribut ainsi adress&eacute; <code>href</code> se r&eacute;f&egrave;re &agrave; l'&eacute;l&eacute;ment HTML not&eacute; auparavant. Le contenu entre ce rep&egrave;re d'ouverture et son pendant <code>&lt;/xsl:attribute&gt;</code> est la valeur que vous d&eacute;sirez affecter &agrave; l'attribut. Dans l'exemple ci-dessus ce doit &ecirc;tre le contenu plac&eacute; entre <code>&lt;link&gt;</code> et <code>&lt;/link&gt;</code>. Ce contenu peut &ecirc;tre r&eacute;f&eacute;renc&eacute; avec l'instruction d&eacute;j&agrave; connue <code>&lt;xsl:value-of&nbsp;select=&quot;.&quot;&nbsp;/&gt;</code> . Ainsi le contenu de caract&egrave;res de l'&eacute;l&eacute;ment XML aboutit dans l'affectation de valeur de l'attribut HTML.</p>

<p>En m&ecirc;me temps, le contenu de <code>&lt;link&gt;...&lt;/link&gt;</code> doit &eacute;galement appara&icirc;tre en HTML comme contenu de <code>&lt;a...&gt;...&lt;/a&gt;</code>. Il est donc &eacute;galement not&eacute; encore une fois <code>&lt;xsl:value-of&nbsp;select=&quot;.&quot;&nbsp;/&gt;</code> &agrave; l'int&eacute;rieur du mod&egrave;le pour l'&eacute;l&eacute;ment <code>link</code>.</p>

<h3 class="inf">Attention:</h3>

<p>Pour les graphiques et le multim&eacute;dia, proc&eacute;dez de fa&ccedil;on analogue. &Agrave; supposer que figure dans les donn&eacute;es XML:<br> <code>&lt;image&gt;images/titre.gif&lt;/image&gt;</code><br>
Ensuite vous pouvez en XSL le transcrire comme suit en HTML:<br>
<code>&lt;xsl:template match=&quot;image&quot;&gt;<br>
 &lt;img&gt;&lt;xsl:attribute name=&quot;src&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/xsl:attribute&gt;&lt;/img&gt;<br>
&lt;/xsl:template&gt;</code></p>

<p><b>Important:</b> Vous devez dans ce cas noter l'&eacute;l&eacute;ment <code>img</code> de HTML avec rep&egrave;re d'ouverture et de fermeture sans rien entre. Autrement les analyseurs syntaxiques XSLT produisent en r&egrave;gle g&eacute;n&eacute;rale des erreurs.</p>




<table bgcolor="#EEEEEE" class="doc" width="100%"><tr><td>
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a><a href="#bottom"><img src="../../src/bas.gif" width="14" height="10" border="0" alt="vers le bas"></a>&#160;
</td></tr></table>

<h2 class="Sh2"><img src="../../src/xml10.gif" width="30" height="30" border="0" alt="XML1.0">&nbsp;<a class="an" name="exemple_glossaire">Quatri&egrave;me exemple: un glossaire en tant que tableau</a></h2>


<p>Un glossaire est un document typique avec une structure simple qui se r&eacute;p&egrave;te. Il est constitu&eacute; de termes et de leur d&eacute;finition correspondante. Chacun des termes avec sa d&eacute;finition repr&eacute;sente un &eacute;l&eacute;ment du glossaire. Lors de la transformation de ces donn&eacute;es XML en HTML, le glossaire doit &ecirc;tre format&eacute; comme un tableau en deux colonnes. Dans la colonne de gauche, les termes et dans la colonne de droite les d&eacute;finitions correspondantes.</p>


<p><img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/glossaire.htm" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier de r&eacute;sultat <var>glossaire.htm</var>)<br>
<img src="../../src/docf.gif" width="15" height="10" border="0" alt="D&eacute;monstration - nouvelle fen&ecirc;tre">&nbsp;<a href="affichage/glossaire.xml" target="_blank"><b>Exemple d'affichage: aper&ccedil;u</b></a> (fichier <var>glossaire.xml</var> - navigateur XML/XSLT indispensable)</p>

<h3 class="xmp">Exemple de DTD <var>glossaire.dtd</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;!ELEMENT glossaire     (element)*&gt;
&lt;!ELEMENT element     (terme,definition)&gt;
&lt;!ELEMENT terme     (#PCDATA)&gt;
&lt;!ELEMENT definition  (#PCDATA)&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple d'une application valide <var>glossaire.xml</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE glossaire SYSTEM &quot;glossaire.dtd&quot;&gt;
&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;glossaire.xsl&quot; ?&gt;
&lt;glossaire&gt;
 &lt;element&gt;
    &lt;terme&gt;Avatar&lt;/terme&gt;
   &lt;definition&gt;
    d�signe dans la mythologie un dieu qui se prom�ne sur terre. Dans le jargon de la toile, c'est un personnage graphique imaginaire qui prend part avec un participant au clavardage, � des jeux de r�les etc....
    &lt;/definition&gt;
 &lt;/element&gt;
 &lt;element&gt;
    &lt;terme&gt;Award&lt;/terme&gt;
   &lt;definition&gt;
    Sur la toile, une distinction pour des pages Web particuli�rement bien faites. La prolif�ration de donateurs de distinctions autoproclam�s  qui ne visent qu'� attirer des visiteurs sur leurs propres pages, ont beaucoup nui � la notion de distinction sur le Web.
    &lt;/definition&gt;
 &lt;/element&gt;
&lt;/glossaire&gt;
</pre></td></tr></table>

<h3 class="xmp">Exemple du fichier XSL incorpor&eacute; <var>glossaire.xls</var>:</h3>

<table width="100%" cellpadding="10"><tr><td class="xmpcode" bgcolor="#FFFFE0"><pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;

&lt;xsl:template match=&quot;/&quot;&gt;
 &lt;html&gt;
 &lt;head&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;table border=&quot;1&quot;&gt;
 &lt;tr&gt;
  &lt;td&gt;&lt;b&gt;terme&lt;/b&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;xsl:for-each select=&quot;glossaire/element&quot;&gt;
 &lt;tr&gt;
  &lt;td valign=&quot;top&quot;&gt;&lt;xsl:value-of select=&quot;terme&quot; /&gt;&lt;/td&gt;
  &lt;td valign=&quot;top&quot;&gt;&lt;xsl:value-of select=&quot;definition&quot; /&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/xsl:for-each&gt;
 &lt;/table&gt;
 &lt;/body&gt;
 &lt;/html&gt;
 &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre></td></tr></table>

<h3 class="xpl">Explication:</h3>

<p>L'exemple d&eacute;finit dans la DTD <var>glossaire.dtd</var> les &eacute;l&eacute;ments d&eacute;sir&eacute;s et leurs r&egrave;gles d'imbrication. Dans le fichier d'application  <var>glossaire.xml</var> vous voyez un exemple sur la fa&ccedil;on de transcrire correctement ces d&eacute;finitions. Vous trouverez des d&eacute;tails sur de telles d&eacute;finitions d'&eacute;l&eacute;ments dans les DTD, dans la partie sur les <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;<a href="../dtd/elements.htm"><b>&eacute;l&eacute;ments et r&egrave;gles d'imbrication.</b></a>.</p>

<p>Exactement comme dans l'<img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut">&nbsp;<a href="#exemple_salut"><b>exemple de salut</b></a> le fichier XSL est &agrave; nouveau incorpor&eacute; dans le fichier XML avec des mentions pour une transformation en HTML.  Le fichier XSL qui s'appelle ici  <var>glossaire.xsl</var> - a aussi l'ossature typique .</p>

<p>&Eacute;tant donn&eacute; que le glossaire a une construction rigide, compos&eacute;e d'un contenu d'&eacute;l&eacute;ment fixe dans un ordre fixe, il est possible de cr&eacute;er toute la sortie HTML d&eacute;sir&eacute;e un peu comme dans l'exemple de salut avec un seul &eacute;l&eacute;ment <code>xsl:template</code>. Il y a pourtant une diff&eacute;rence importante avec l'exemple de salut: Alors que l'exemple de salut ne pouvait &ecirc;tre not&eacute; qu'une fois, le glossaire peut comporter d'apr&egrave;s les d&eacute;finitions de la DTD, autant d'&eacute;l&eacute;ments qu'on le souhaite. Ceux-ci sont toutefois construits de mani&egrave;re uniforme.</p>

<p>Ils existe pour ces cas-l&agrave; l'instruction de boucle <code>xsl:for-each</code> (<i>anglais for-each = fran&ccedil;ais pour chacun(e)</i>). Il en a &eacute;t&eacute; fait usage dans l'exemple ci-dessus &agrave; l'endroit o&ugrave; elle doit cr&eacute;er un effet de r&eacute;p&eacute;tition dans le code HTML. Les donn&eacute;es HTML doivent &ecirc;tre sorties sous forme de tableau HTML, donc on a cr&eacute;&eacute; avec <code>&lt;table...&gt;...&lt;/table&gt;</code> un tableau correspondant. Dans la boucle introduite par <code>&lt;xsl:for-each&nbsp;select=&quot;glossaire/element&quot;&gt;</code>, une rang&eacute;e de tableau est construite. Ce qui induit que lors de la cr&eacute;ation de la sortie HTML autant de rang&eacute;es de tableau que le glossaire contient d'&eacute;l&eacute;ments seront cr&eacute;&eacute;es. &Agrave; l'int&eacute;rieur de la boucle il est fait r&eacute;f&eacute;rence pour le contenu de <code>&lt;tr&gt;...&lt;/tr&gt;</code> et gr&acirc;ce &agrave; l'instruction d&eacute;j&agrave; rencontr&eacute;e <code>&lt;xsl:value-of&nbsp;select=&quot;.&quot;&nbsp;/&gt;</code> au contenu  des &eacute;l&eacute;ments <code>terme</code> et <code>definition</code> actuels <b>&agrave; chacune</b> des diff&eacute;rentes boucles.</p>

<p>En outre, ce qui est nouveau dans l'exemple du glossaire c'est l'adressage <code>select=&quot;glossaire/element&quot;</code> pour l'&eacute;l&eacute;ment <code>xsl:for-each</code>. Le <b>nom de chemin</b> de l'&eacute;l&eacute;ment pour lequel la boucle doit &ecirc;tre r&eacute;p&eacute;t&eacute;e, doit &ecirc;tre mentionn&eacute;. Le nom de chemin commence avec l'&eacute;l&eacute;ment document, donc avec  <code>glossaire</code>. La r&eacute;p&eacute;tition est souhait&eacute;e pour l'&eacute;l&eacute;ment <code>element</code> qui est un &eacute;l&eacute;ment-enfant de <code>glossaire</code>. Ces hi&eacute;rarchies sont not&eacute;es exactement comme des noms de r&eacute;pertoires dans des  URI, donc s&eacute;par&eacute;es par des barres obliques. Les r&egrave;gles pour ces noms de chemins sont r&eacute;gis par le langage <img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information">&nbsp;
<a href="syntaxexpath.htm"><b>XPath</b></a>.</p>









<table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">
&#160;<a href="#top"><img src="../../src/haut.gif" width="14" height="10" border="0" alt="vers le haut"></a>
</td></tr>
<tr><td bgcolor="#EEEEEE" class="doc" align="right"><a href="elementsxslt.htm"><img src="../../src/suivant.gif" width="10" height="10" border="0" hspace="10" alt="page suivante"></a></td>
<td bgcolor="#FFFFFF"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="elementsxslt.htm"><b>&Eacute;l&eacute;ments XSLT</b></a>
</td></tr>
<tr>
<td bgcolor="#EEEEEE" class="doc" align="right"><a href="basesxsl.htm"><img src="../../src/precedent.gif" width="10" height="10" border="0" hspace="10" alt="page pr&eacute;c&eacute;dente"></a></td>
<td bgcolor="#FFFFFF" width="100%"><img src="../../src/doc.gif" width="15" height="10" border="0" alt="Autre page d'information"> <a href="basesxsl.htm"><b>Bases de XSL/XSLT</b></a>
</td>
</tr>
<tr><td colspan="2" bgcolor="#EEEEEE" class="doc">&#160;</td></tr>
</table><table cellpadding="4" cellspacing="0" border="0" width="100%">
<tr>
<td bgcolor="#FFEEDD" class="nav"><a class="an" name="bottom"><img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"></a> <a href="../../index.htm"><b>SELFHTML</b></a>/<a href="../../navigation/index.htm" target="_parent">Aides &agrave; la navigation</a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="../index.htm"><b>XML/DTD</b></a> <img src="../../src/refchap.gif" width="16" height="13" border="0" alt="Renvoie au chapitre d'origine"> <a href="index.htm"><b>Repr&eacute;sentation de donn&eacute;es XML</b></a></td>
</tr>
</table>

<p>&copy; 2001 Stefan M&uuml;nz / &copy; 2003 Traduction <img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:13405@free.fr">Serge Fran&ccedil;ois, 13405@free.fr</a><br><img src="../../src/courriel.gif" width="15" height="10" border="0" alt="Adresse &eacute;lectronique">&nbsp;<a href="mailto:selfhtml@selfhtml.com.fr">selfhtml@selfhtml.com.fr</a></p>



</body>
</html>
